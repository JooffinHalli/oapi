// -------------------------------
// | this file is auto-generated |
// -------------------------------

/**
 * @see {@link https://raw.githubusercontent.com/stripe/openapi/master/openapi/spec3.json swagger}
 * @title Stripe API
 * @description The Stripe REST API. Please see https://stripe.com/docs/api for more details.
 */
export namespace Schemas {

/**
 * @title Account
 * @description This is an object representing a Stripe account. You can retrieve it to see
 * properties on the account like its current requirements or if the account is
 * enabled to make live charges or receive payouts.
 * 
 * For accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection)
 * is `application`, which includes Custom accounts, the properties below are always
 * returned.
 * 
 * For accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection)
 * is `stripe`, which includes Standard and Express accounts, some properties are only returned
 * until you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions)
 * to start Connect Onboarding. Learn about the [differences between accounts](/connect/accounts).
 */
export type account = {
 /**
  * @description Business information about the account.
  */
 business_profile?: Schemas.account_business_profile | null
 /**
  * @description The business type.
  */
 business_type?: ('company' | 'government_entity' | 'individual' | 'non_profit') | null
 /**
  * @title AccountCapabilities
  */
 capabilities?: Schemas.account_capabilities
 /**
  * @description Whether the account can process charges.
  */
 charges_enabled?: boolean
 /**
  * @title LegalEntityCompany
  */
 company?: Schemas.legal_entity_company
 /**
  * @title AccountUnificationAccountController
  */
 controller?: Schemas.account_unification_account_controller
 /**
  * @description The account's country.
  */
 country?: string
 /**
  * @description Time at which the account was connected. Measured in seconds since the Unix epoch.
  */
 created?: number
 /**
  * @description Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).
  */
 default_currency?: string
 /**
  * @description Whether account details have been submitted. Accounts with Stripe Dashboard access, which includes Standard accounts, cannot receive payouts before this is true. Accounts where this is false should be directed to [an onboarding flow](/connect/onboarding) to finish submitting account details.
  */
 details_submitted?: boolean
 /**
  * @description An email address associated with the account. It's not used for authentication and Stripe doesn't market to this field without explicit approval from the platform.
  */
 email?: string | null
 /**
  * @title ExternalAccountList
  * @description External accounts (bank accounts and debit cards) currently attached to this account. External accounts are only returned for requests where `controller[is_controller]` is true.
  */
 external_accounts?: {
  /**
   * @description The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.
   */
  data: (Schemas.bank_account | Schemas.card)[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 }
 /**
  * @title AccountFutureRequirements
  */
 future_requirements?: Schemas.account_future_requirements
 /**
  * @description The groups associated with the account.
  */
 groups?: Schemas.account_group_membership | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @title Person
  * @description This is an object representing a person associated with a Stripe account.
  * 
  * A platform can only access a subset of data in a person for an account where [account.controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`, which includes Standard and Express accounts, after creating an Account Link or Account Session to start Connect onboarding.
  * 
  * See the [Standard onboarding](/connect/standard-accounts) or [Express onboarding](/connect/express-accounts) documentation for information about prefilling information and account onboarding steps. Learn more about [handling identity verification with the API](/connect/handling-api-verification#person-information).
  */
 individual?: Schemas.person
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string>
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'account'
 /**
  * @description Whether the funds in this account can be paid out.
  */
 payouts_enabled?: boolean
 /**
  * @title AccountRequirements
  */
 requirements?: Schemas.account_requirements
 /**
  * @description Options for customizing how the account functions within Stripe.
  */
 settings?: Schemas.account_settings | null
 /**
  * @title AccountTOSAcceptance
  */
 tos_acceptance?: Schemas.account_tos_acceptance
 /**
  * @description The Stripe account type. Can be `standard`, `express`, `custom`, or `none`.
  */
 type?: ('custom' | 'express' | 'none' | 'standard')
}

/**
 * @title AccountAnnualRevenue
 */
export type account_annual_revenue = {
 /**
  * @description A non-negative integer representing the amount in the [smallest currency unit](/currencies#zero-decimal).
  */
 amount?: number | null
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency?: string | null
 /**
  * @description The close-out date of the preceding fiscal year in ISO 8601 format. E.g. 2023-12-31 for the 31st of December, 2023.
  */
 fiscal_year_end?: string | null
}

/**
 * @title AccountBacsDebitPaymentsSettings
 */
export type account_bacs_debit_payments_settings = {
 /**
  * @description The Bacs Direct Debit display name for this account. For payments made with Bacs Direct Debit, this name appears on the mandate as the statement descriptor. Mobile banking apps display it as the name of the business. To use custom branding, set the Bacs Direct Debit Display Name during or right after creation. Custom branding incurs an additional monthly fee for the platform. The fee appears 5 business days after requesting Bacs. If you don't set the display name before requesting Bacs capability, it's automatically set as "Stripe" and the account is onboarded to Stripe branding, which is free.
  */
 display_name?: string | null
 /**
  * @description The Bacs Direct Debit Service user number for this account. For payments made with Bacs Direct Debit, this number is a unique identifier of the account with our banking partners.
  */
 service_user_number?: string | null
}

/**
 * @title AccountBrandingSettings
 */
export type account_branding_settings = {
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px.
  */
 icon?: (string | Schemas.file) | null
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px.
  */
 logo?: (string | Schemas.file) | null
 /**
  * @description A CSS hex color value representing the primary branding color for this account
  */
 primary_color?: string | null
 /**
  * @description A CSS hex color value representing the secondary branding color for this account
  */
 secondary_color?: string | null
}

/**
 * @title AccountBusinessProfile
 */
export type account_business_profile = {
 /**
  * @description The applicant's gross annual revenue for its preceding fiscal year.
  */
 annual_revenue?: Schemas.account_annual_revenue | null
 /**
  * @description An estimated upper bound of employees, contractors, vendors, etc. currently working for the business.
  */
 estimated_worker_count?: number | null
 /**
  * @description [The merchant category code for the account](/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide.
  */
 mcc?: string | null
 /**
  * @description Whether the business is a minority-owned, women-owned, and/or LGBTQI+ -owned business.
  */
 minority_owned_business_designation?: ('lgbtqi_owned_business' | 'minority_owned_business' | 'none_of_these_apply' | 'prefer_not_to_answer' | 'women_owned_business')[] | null
 /**
  * @title AccountMonthlyEstimatedRevenue
  */
 monthly_estimated_revenue?: Schemas.account_monthly_estimated_revenue
 /**
  * @description The customer-facing business name.
  */
 name?: string | null
 /**
  * @description Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes.
  */
 product_description?: string | null
 /**
  * @description A publicly available mailing address for sending support issues to.
  */
 support_address?: Schemas.address | null
 /**
  * @description A publicly available email address for sending support issues to.
  */
 support_email?: string | null
 /**
  * @description A publicly available phone number to call with support issues.
  */
 support_phone?: string | null
 /**
  * @description A publicly available website for handling support issues.
  */
 support_url?: string | null
 /**
  * @description The business's publicly available website.
  */
 url?: string | null
}

/**
 * @title AccountCapabilities
 */
export type account_capabilities = {
 /**
  * @description The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges.
  */
 acss_debit_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the Affirm capability of the account, or whether the account can directly process Affirm charges.
  */
 affirm_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
  */
 afterpay_clearpay_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the Alma capability of the account, or whether the account can directly process Alma payments.
  */
 alma_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the AmazonPay capability of the account, or whether the account can directly process AmazonPay payments.
  */
 amazon_pay_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
  */
 au_becs_debit_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
  */
 bacs_debit_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
  */
 bancontact_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges.
  */
 bank_transfer_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the Billie capability of the account, or whether the account can directly process Billie payments.
  */
 billie_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the blik payments capability of the account, or whether the account can directly process blik charges.
  */
 blik_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.
  */
 boleto_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
  */
 card_issuing?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
  */
 card_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
  */
 cartes_bancaires_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the Cash App Pay capability of the account, or whether the account can directly process Cash App Pay payments.
  */
 cashapp_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the Crypto capability of the account, or whether the account can directly process Crypto payments.
  */
 crypto_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
  */
 eps_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
  */
 fpx_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the GB customer_balance payments (GBP currency) capability of the account, or whether the account can directly process GB customer_balance charges.
  */
 gb_bank_transfer_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
  */
 giropay_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
  */
 grabpay_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
  */
 ideal_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the india_international_payments capability of the account, or whether the account can process international charges (non INR) in India.
  */
 india_international_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
  */
 jcb_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the Japanese customer_balance payments (JPY currency) capability of the account, or whether the account can directly process Japanese customer_balance charges.
  */
 jp_bank_transfer_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the KakaoPay capability of the account, or whether the account can directly process KakaoPay payments.
  */
 kakao_pay_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges.
  */
 klarna_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the konbini payments capability of the account, or whether the account can directly process konbini charges.
  */
 konbini_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the KrCard capability of the account, or whether the account can directly process KrCard payments.
  */
 kr_card_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the legacy payments capability of the account.
  */
 legacy_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the link_payments capability of the account, or whether the account can directly process Link charges.
  */
 link_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the MobilePay capability of the account, or whether the account can directly process MobilePay charges.
  */
 mobilepay_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the Multibanco payments capability of the account, or whether the account can directly process Multibanco charges.
  */
 multibanco_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the Mexican customer_balance payments (MXN currency) capability of the account, or whether the account can directly process Mexican customer_balance charges.
  */
 mx_bank_transfer_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the NaverPay capability of the account, or whether the account can directly process NaverPay payments.
  */
 naver_pay_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the New Zealand BECS Direct Debit payments capability of the account, or whether the account can directly process New Zealand BECS Direct Debit charges.
  */
 nz_bank_account_becs_debit_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
  */
 oxxo_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
  */
 p24_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the pay_by_bank payments capability of the account, or whether the account can directly process pay_by_bank charges.
  */
 pay_by_bank_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the Payco capability of the account, or whether the account can directly process Payco payments.
  */
 payco_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the paynow payments capability of the account, or whether the account can directly process paynow charges.
  */
 paynow_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the pix payments capability of the account, or whether the account can directly process pix charges.
  */
 pix_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the promptpay payments capability of the account, or whether the account can directly process promptpay charges.
  */
 promptpay_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the RevolutPay capability of the account, or whether the account can directly process RevolutPay payments.
  */
 revolut_pay_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the SamsungPay capability of the account, or whether the account can directly process SamsungPay payments.
  */
 samsung_pay_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the Satispay capability of the account, or whether the account can directly process Satispay payments.
  */
 satispay_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the SEPA customer_balance payments (EUR currency) capability of the account, or whether the account can directly process SEPA customer_balance charges.
  */
 sepa_bank_transfer_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
  */
 sepa_debit_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
  */
 sofort_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the Swish capability of the account, or whether the account can directly process Swish payments.
  */
 swish_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the tax reporting 1099-K (US) capability of the account.
  */
 tax_reporting_us_1099_k?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the tax reporting 1099-MISC (US) capability of the account.
  */
 tax_reporting_us_1099_misc?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
  */
 transfers?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the banking capability, or whether the account can have bank accounts.
  */
 treasury?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the TWINT capability of the account, or whether the account can directly process TWINT charges.
  */
 twint_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges.
  */
 us_bank_account_ach_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the US customer_balance payments (USD currency) capability of the account, or whether the account can directly process US customer_balance charges.
  */
 us_bank_transfer_payments?: ('active' | 'inactive' | 'pending')
 /**
  * @description The status of the Zip capability of the account, or whether the account can directly process Zip charges.
  */
 zip_payments?: ('active' | 'inactive' | 'pending')
}

/**
 * @title AccountCapabilityFutureRequirements
 */
export type account_capability_future_requirements = {
 /**
  * @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  */
 alternatives?: Schemas.account_requirements_alternative[] | null
 /**
  * @description Date on which `future_requirements` becomes the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on the capability's enablement state prior to transitioning.
  */
 current_deadline?: number | null
 /**
  * @description Fields that need to be collected to keep the capability enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash.
  */
 currently_due: string[]
 /**
  * @description This is typed as an enum for consistency with `requirements.disabled_reason`, but it safe to assume `future_requirements.disabled_reason` is null because fields in `future_requirements` will never disable the account.
  */
 disabled_reason?: ('other' | 'paused.inactivity' | 'pending.onboarding' | 'pending.review' | 'platform_disabled' | 'platform_paused' | 'rejected.inactivity' | 'rejected.other' | 'rejected.unsupported_business' | 'requirements.fields_needed') | null
 /**
  * @description Fields that are `currently_due` and need to be collected again because validation or verification failed.
  */
 errors: Schemas.account_requirements_error[]
 /**
  * @description Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well.
  */
 eventually_due: string[]
 /**
  * @description Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`.
  */
 past_due: string[]
 /**
  * @description Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. Fields might appear in `eventually_due` or `currently_due` and in `pending_verification` if verification fails but another verification is still pending.
  */
 pending_verification: string[]
}

/**
 * @title AccountCapabilityRequirements
 */
export type account_capability_requirements = {
 /**
  * @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  */
 alternatives?: Schemas.account_requirements_alternative[] | null
 /**
  * @description The date by which all required account information must be both submitted and verified. This includes fields listed in `currently_due` as well as those in `pending_verification`. If any required information is missing or unverified by this date, the account may be disabled. Note that `current_deadline` may change if additional `currently_due` requirements are requested.
  */
 current_deadline?: number | null
 /**
  * @description Fields that need to be collected to keep the capability enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the capability is disabled.
  */
 currently_due: string[]
 /**
  * @description Description of why the capability is disabled. [Learn more about handling verification issues](https://stripe.com/docs/connect/handling-api-verification).
  */
 disabled_reason?: ('other' | 'paused.inactivity' | 'pending.onboarding' | 'pending.review' | 'platform_disabled' | 'platform_paused' | 'rejected.inactivity' | 'rejected.other' | 'rejected.unsupported_business' | 'requirements.fields_needed') | null
 /**
  * @description Fields that are `currently_due` and need to be collected again because validation or verification failed.
  */
 errors: Schemas.account_requirements_error[]
 /**
  * @description Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set.
  */
 eventually_due: string[]
 /**
  * @description Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the capability on the account.
  */
 past_due: string[]
 /**
  * @description Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending.
  */
 pending_verification: string[]
}

/**
 * @title AccountCardIssuingSettings
 */
export type account_card_issuing_settings = {
 /**
  * @title CardIssuingAccountTermsOfService
  */
 tos_acceptance?: Schemas.card_issuing_account_terms_of_service
}

/**
 * @title AccountCardPaymentsSettings
 */
export type account_card_payments_settings = {
 /**
  * @title AccountDeclineChargeOn
  */
 decline_on?: Schemas.account_decline_charge_on
 /**
  * @description The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion.
  */
 statement_descriptor_prefix?: string | null
 /**
  * @description The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kana` specified on the charge. `statement_descriptor_prefix_kana` is useful for maximizing descriptor space for the dynamic portion.
  */
 statement_descriptor_prefix_kana?: string | null
 /**
  * @description The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kanji` specified on the charge. `statement_descriptor_prefix_kanji` is useful for maximizing descriptor space for the dynamic portion.
  */
 statement_descriptor_prefix_kanji?: string | null
}

/**
 * @title AccountDashboardSettings
 */
export type account_dashboard_settings = {
 /**
  * @description The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts.
  */
 display_name?: string | null
 /**
  * @description The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones).
  */
 timezone?: string | null
}

/**
 * @title AccountDeclineChargeOn
 */
export type account_decline_charge_on = {
 /**
  * @description Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification.
  */
 avs_failure: boolean
 /**
  * @description Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification.
  */
 cvc_failure: boolean
}

/**
 * @title AccountFutureRequirements
 */
export type account_future_requirements = {
 /**
  * @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  */
 alternatives?: Schemas.account_requirements_alternative[] | null
 /**
  * @description Date on which `future_requirements` becomes the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on its enablement state prior to transitioning.
  */
 current_deadline?: number | null
 /**
  * @description Fields that need to be collected to keep the account enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash.
  */
 currently_due?: string[] | null
 /**
  * @description This is typed as an enum for consistency with `requirements.disabled_reason`.
  */
 disabled_reason?: ('action_required.requested_capabilities' | 'listed' | 'other' | 'platform_paused' | 'rejected.fraud' | 'rejected.incomplete_verification' | 'rejected.listed' | 'rejected.other' | 'rejected.platform_fraud' | 'rejected.platform_other' | 'rejected.platform_terms_of_service' | 'rejected.terms_of_service' | 'requirements.past_due' | 'requirements.pending_verification' | 'under_review') | null
 /**
  * @description Fields that are `currently_due` and need to be collected again because validation or verification failed.
  */
 errors?: Schemas.account_requirements_error[] | null
 /**
  * @description Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well.
  */
 eventually_due?: string[] | null
 /**
  * @description Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`.
  */
 past_due?: string[] | null
 /**
  * @description Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. Fields might appear in `eventually_due` or `currently_due` and in `pending_verification` if verification fails but another verification is still pending.
  */
 pending_verification?: string[] | null
}

/**
 * @title AccountGroupMembership
 */
export type account_group_membership = {
 /**
  * @description The group the account is in to determine their payments pricing, and null if the account is on customized pricing. [See the Platform pricing tool documentation](https://stripe.com/docs/connect/platform-pricing-tools) for details.
  */
 payments_pricing?: string | null
}

/**
 * @title AccountInvoicesSettings
 */
export type account_invoices_settings = {
 /**
  * @description The list of default Account Tax IDs to automatically include on invoices. Account Tax IDs get added when an invoice is finalized.
  */
 default_account_tax_ids?: (string | Schemas.tax_id)[] | null
 /**
  * @description Whether payment methods should be saved when a payment is completed for a one-time invoices on a hosted invoice page.
  */
 hosted_payment_method_save?: ('always' | 'never' | 'offer') | null
}

/**
 * @title AccountLink
 * @description Account Links are the means by which a Connect platform grants a connected account permission to access
 * Stripe-hosted applications, such as Connect Onboarding.
 * 
 * Related guide: [Connect Onboarding](https://stripe.com/docs/connect/custom/hosted-onboarding)
 */
export type account_link = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description The timestamp at which this account link will expire.
  */
 expires_at: number
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'account_link'
 /**
  * @description The URL for the account link.
  */
 url: string
}

/**
 * @title AccountMonthlyEstimatedRevenue
 */
export type account_monthly_estimated_revenue = {
 /**
  * @description A non-negative integer representing how much to charge in the [smallest currency unit](/currencies#zero-decimal).
  */
 amount: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
}

/**
 * @title AccountPaymentsSettings
 */
export type account_payments_settings = {
 /**
  * @description The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge.
  */
 statement_descriptor?: string | null
 /**
  * @description The Kana variation of `statement_descriptor` used for charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors).
  */
 statement_descriptor_kana?: string | null
 /**
  * @description The Kanji variation of `statement_descriptor` used for charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors).
  */
 statement_descriptor_kanji?: string | null
}

/**
 * @title AccountPayoutSettings
 */
export type account_payout_settings = {
 /**
  * @description A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See [Understanding Connect account balances](/connect/account-balances) for details. The default value is `false` when [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, otherwise `true`.
  */
 debit_negative_balances: boolean
 /**
  * @title TransferSchedule
  */
 schedule: Schemas.transfer_schedule
 /**
  * @description The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard.
  */
 statement_descriptor?: string | null
}

/**
 * @title AccountRequirements
 */
export type account_requirements = {
 /**
  * @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  */
 alternatives?: Schemas.account_requirements_alternative[] | null
 /**
  * @description Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected.
  */
 current_deadline?: number | null
 /**
  * @description Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
  */
 currently_due?: string[] | null
 /**
  * @description If the account is disabled, this enum describes why. [Learn more about handling verification issues](https://stripe.com/docs/connect/handling-api-verification).
  */
 disabled_reason?: ('action_required.requested_capabilities' | 'listed' | 'other' | 'platform_paused' | 'rejected.fraud' | 'rejected.incomplete_verification' | 'rejected.listed' | 'rejected.other' | 'rejected.platform_fraud' | 'rejected.platform_other' | 'rejected.platform_terms_of_service' | 'rejected.terms_of_service' | 'requirements.past_due' | 'requirements.pending_verification' | 'under_review') | null
 /**
  * @description Fields that are `currently_due` and need to be collected again because validation or verification failed.
  */
 errors?: Schemas.account_requirements_error[] | null
 /**
  * @description Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set.
  */
 eventually_due?: string[] | null
 /**
  * @description Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account.
  */
 past_due?: string[] | null
 /**
  * @description Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending.
  */
 pending_verification?: string[] | null
}

/**
 * @title AccountRequirementsAlternative
 */
export type account_requirements_alternative = {
 /**
  * @description Fields that can be provided to satisfy all fields in `original_fields_due`.
  */
 alternative_fields_due: string[]
 /**
  * @description Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`.
  */
 original_fields_due: string[]
}

/**
 * @title AccountRequirementsError
 */
export type account_requirements_error = {
 /**
  * @description The code for the type of error.
  */
 code: ('information_missing' | 'invalid_address_city_state_postal_code' | 'invalid_address_highway_contract_box' | 'invalid_address_private_mailbox' | 'invalid_business_profile_name' | 'invalid_business_profile_name_denylisted' | 'invalid_company_name_denylisted' | 'invalid_dob_age_over_maximum' | 'invalid_dob_age_under_18' | 'invalid_dob_age_under_minimum' | 'invalid_product_description_length' | 'invalid_product_description_url_match' | 'invalid_representative_country' | 'invalid_signator' | 'invalid_statement_descriptor_business_mismatch' | 'invalid_statement_descriptor_denylisted' | 'invalid_statement_descriptor_length' | 'invalid_statement_descriptor_prefix_denylisted' | 'invalid_statement_descriptor_prefix_mismatch' | 'invalid_street_address' | 'invalid_tax_id' | 'invalid_tax_id_format' | 'invalid_tos_acceptance' | 'invalid_url_denylisted' | 'invalid_url_format' | 'invalid_url_web_presence_detected' | 'invalid_url_website_business_information_mismatch' | 'invalid_url_website_empty' | 'invalid_url_website_inaccessible' | 'invalid_url_website_inaccessible_geoblocked' | 'invalid_url_website_inaccessible_password_protected' | 'invalid_url_website_incomplete' | 'invalid_url_website_incomplete_cancellation_policy' | 'invalid_url_website_incomplete_customer_service_details' | 'invalid_url_website_incomplete_legal_restrictions' | 'invalid_url_website_incomplete_refund_policy' | 'invalid_url_website_incomplete_return_policy' | 'invalid_url_website_incomplete_terms_and_conditions' | 'invalid_url_website_incomplete_under_construction' | 'invalid_url_website_other' | 'invalid_value_other' | 'verification_directors_mismatch' | 'verification_document_address_mismatch' | 'verification_document_address_missing' | 'verification_document_corrupt' | 'verification_document_country_not_supported' | 'verification_document_directors_mismatch' | 'verification_document_dob_mismatch' | 'verification_document_duplicate_type' | 'verification_document_expired' | 'verification_document_failed_copy' | 'verification_document_failed_greyscale' | 'verification_document_failed_other' | 'verification_document_failed_test_mode' | 'verification_document_fraudulent' | 'verification_document_id_number_mismatch' | 'verification_document_id_number_missing' | 'verification_document_incomplete' | 'verification_document_invalid' | 'verification_document_issue_or_expiry_date_missing' | 'verification_document_manipulated' | 'verification_document_missing_back' | 'verification_document_missing_front' | 'verification_document_name_mismatch' | 'verification_document_name_missing' | 'verification_document_nationality_mismatch' | 'verification_document_not_readable' | 'verification_document_not_signed' | 'verification_document_not_uploaded' | 'verification_document_photo_mismatch' | 'verification_document_too_large' | 'verification_document_type_not_supported' | 'verification_extraneous_directors' | 'verification_failed_address_match' | 'verification_failed_authorizer_authority' | 'verification_failed_business_iec_number' | 'verification_failed_document_match' | 'verification_failed_id_number_match' | 'verification_failed_keyed_identity' | 'verification_failed_keyed_match' | 'verification_failed_name_match' | 'verification_failed_other' | 'verification_failed_representative_authority' | 'verification_failed_residential_address' | 'verification_failed_tax_id_match' | 'verification_failed_tax_id_not_issued' | 'verification_legal_entity_structure_mismatch' | 'verification_missing_directors' | 'verification_missing_executives' | 'verification_missing_owners' | 'verification_rejected_ownership_exemption_reason' | 'verification_requires_additional_memorandum_of_associations' | 'verification_requires_additional_proof_of_registration' | 'verification_supportability')
 /**
  * @description An informative message that indicates the error type and provides additional details about the error.
  */
 reason: string
 /**
  * @description The specific user onboarding requirement field (in the requirements hash) that needs to be resolved.
  */
 requirement: string
}

/**
 * @title AccountSepaDebitPaymentsSettings
 */
export type account_sepa_debit_payments_settings = {
 /**
  * @description SEPA creditor identifier that identifies the company making the payment.
  */
 creditor_id?: string
}

/**
 * @title ConnectEmbeddedMethodAccountSessionCreateMethodAccountSession
 * @description An AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.
 * 
 * We recommend that you create an AccountSession each time you need to display an embedded component
 * to your user. Do not save AccountSessions to your database as they expire relatively
 * quickly, and cannot be used more than once.
 * 
 * Related guide: [Connect embedded components](https://stripe.com/docs/connect/get-started-connect-embedded-components)
 */
export type account_session = {
 /**
  * @description The ID of the account the AccountSession was created for
  */
 account: string
 /**
  * @description The client secret of this AccountSession. Used on the client to set up secure access to the given `account`.
  * 
  * The client secret can be used to provide access to `account` from your frontend. It should not be stored, logged, or exposed to anyone other than the connected account. Make sure that you have TLS enabled on any page that includes the client secret.
  * 
  * Refer to our docs to [setup Connect embedded components](https://stripe.com/docs/connect/get-started-connect-embedded-components) and learn about how `client_secret` should be handled.
  */
 client_secret: string
 /**
  * @title ConnectEmbeddedAccountSessionCreateComponents
  */
 components: Schemas.connect_embedded_account_session_create_components
 /**
  * @description The timestamp at which this AccountSession will expire.
  */
 expires_at: number
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'account_session'
}

/**
 * @title AccountSettings
 */
export type account_settings = {
 /**
  * @title AccountBacsDebitPaymentsSettings
  */
 bacs_debit_payments?: Schemas.account_bacs_debit_payments_settings
 /**
  * @title AccountBrandingSettings
  */
 branding: Schemas.account_branding_settings
 /**
  * @title AccountCardIssuingSettings
  */
 card_issuing?: Schemas.account_card_issuing_settings
 /**
  * @title AccountCardPaymentsSettings
  */
 card_payments: Schemas.account_card_payments_settings
 /**
  * @title AccountDashboardSettings
  */
 dashboard: Schemas.account_dashboard_settings
 /**
  * @title AccountInvoicesSettings
  */
 invoices?: Schemas.account_invoices_settings
 /**
  * @title AccountPaymentsSettings
  */
 payments: Schemas.account_payments_settings
 /**
  * @title AccountPayoutSettings
  */
 payouts?: Schemas.account_payout_settings
 /**
  * @title AccountSepaDebitPaymentsSettings
  */
 sepa_debit_payments?: Schemas.account_sepa_debit_payments_settings
 /**
  * @title AccountTreasurySettings
  */
 treasury?: Schemas.account_treasury_settings
}

/**
 * @title AccountTermsOfService
 */
export type account_terms_of_service = {
 /**
  * @description The Unix timestamp marking when the account representative accepted the service agreement.
  */
 date?: number | null
 /**
  * @description The IP address from which the account representative accepted the service agreement.
  */
 ip?: string | null
 /**
  * @description The user agent of the browser from which the account representative accepted the service agreement.
  */
 user_agent?: string
}

/**
 * @title AccountTOSAcceptance
 */
export type account_tos_acceptance = {
 /**
  * @description The Unix timestamp marking when the account representative accepted their service agreement
  */
 date?: number | null
 /**
  * @description The IP address from which the account representative accepted their service agreement
  */
 ip?: string | null
 /**
  * @description The user's service agreement type
  */
 service_agreement?: string
 /**
  * @description The user agent of the browser from which the account representative accepted their service agreement
  */
 user_agent?: string | null
}

/**
 * @title AccountTreasurySettings
 */
export type account_treasury_settings = {
 /**
  * @title AccountTermsOfService
  */
 tos_acceptance?: Schemas.account_terms_of_service
}

/**
 * @title AccountUnificationAccountController
 */
export type account_unification_account_controller = {
 /**
  * @title AccountUnificationAccountControllerFees
  */
 fees?: Schemas.account_unification_account_controller_fees
 /**
  * @description `true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null.
  */
 is_controller?: boolean
 /**
  * @title AccountUnificationAccountControllerLosses
  */
 losses?: Schemas.account_unification_account_controller_losses
 /**
  * @description A value indicating responsibility for collecting requirements on this account. Only returned when the Connect application retrieving the resource controls the account.
  */
 requirement_collection?: ('application' | 'stripe')
 /**
  * @title AccountUnificationAccountControllerStripeDashboard
  */
 stripe_dashboard?: Schemas.account_unification_account_controller_stripe_dashboard
 /**
  * @description The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself.
  */
 type: ('account' | 'application')
}

/**
 * @title AccountUnificationAccountControllerFees
 */
export type account_unification_account_controller_fees = {
 /**
  * @description A value indicating the responsible payer of a bundle of Stripe fees for pricing-control eligible products on this account. Learn more about [fee behavior on connected accounts](https://docs.stripe.com/connect/direct-charges-fee-payer-behavior).
  */
 payer: ('account' | 'application' | 'application_custom' | 'application_express')
}

/**
 * @title AccountUnificationAccountControllerLosses
 */
export type account_unification_account_controller_losses = {
 /**
  * @description A value indicating who is liable when this account can't pay back negative balances from payments.
  */
 payments: ('application' | 'stripe')
}

/**
 * @title AccountUnificationAccountControllerStripeDashboard
 */
export type account_unification_account_controller_stripe_dashboard = {
 /**
  * @description A value indicating the Stripe dashboard this account has access to independent of the Connect application.
  */
 type: ('express' | 'full' | 'none')
}

/**
 * @title Address
 */
export type address = {
 /**
  * @description City, district, suburb, town, or village.
  */
 city?: string | null
 /**
  * @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  */
 country?: string | null
 /**
  * @description Address line 1 (e.g., street, PO Box, or company name).
  */
 line1?: string | null
 /**
  * @description Address line 2 (e.g., apartment, suite, unit, or building).
  */
 line2?: string | null
 /**
  * @description ZIP or postal code.
  */
 postal_code?: string | null
 /**
  * @description State, county, province, or region.
  */
 state?: string | null
}

/**
 * @title alma_installments
 */
export type alma_installments = {
 /**
  * @description The number of installments.
  */
 count: number
}

/**
 * @title amazon_pay_underlying_payment_method_funding_details
 */
export type amazon_pay_underlying_payment_method_funding_details = {
 /**
  * @title payment_method_details_passthrough_card
  */
 card?: Schemas.payment_method_details_passthrough_card
 /**
  * @description funding type of the underlying payment method.
  */
 type?: 'card' | null
}

/**
 * @title APIErrors
 */
export type api_errors = {
 /**
  * @description For card errors resulting from a card issuer decline, a short string indicating [how to proceed with an error](https://stripe.com/docs/declines#retrying-issuer-declines) if they provide one.
  */
 advice_code?: string
 /**
  * @description For card errors, the ID of the failed charge.
  */
 charge?: string
 /**
  * @description For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported.
  */
 code?: string
 /**
  * @description For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one.
  */
 decline_code?: string
 /**
  * @description A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported.
  */
 doc_url?: string
 /**
  * @description A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.
  */
 message?: string
 /**
  * @description For card errors resulting from a card issuer decline, a 2 digit code which indicates the advice given to merchant by the card network on how to proceed with an error.
  */
 network_advice_code?: string
 /**
  * @description For payments declined by the network, an alphanumeric code which indicates the reason the payment failed.
  */
 network_decline_code?: string
 /**
  * @description If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.
  */
 param?: string
 /**
  * @title PaymentIntent
  * @description A PaymentIntent guides you through the process of collecting a payment from your customer.
  * We recommend that you create exactly one PaymentIntent for each order or
  * customer session in your system. You can reference the PaymentIntent later to
  * see the history of payment attempts for a particular session.
  * 
  * A PaymentIntent transitions through
  * [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
  * throughout its lifetime as it interfaces with Stripe.js to perform
  * authentication flows and ultimately creates at most one successful charge.
  * 
  * Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)
  */
 payment_intent?: Schemas.payment_intent
 /**
  * @title PaymentMethod
  * @description PaymentMethod objects represent your customer's payment instruments.
  * You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
  * Customer objects to store instrument details for future payments.
  * 
  * Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
  */
 payment_method?: Schemas.payment_method
 /**
  * @description If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors.
  */
 payment_method_type?: string
 /**
  * @description A URL to the request log entry in your dashboard.
  */
 request_log_url?: string
 /**
  * @title SetupIntent
  * @description A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
  * For example, you can use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
  * Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
  * 
  * Create a SetupIntent when you're ready to collect your customer's payment credentials.
  * Don't maintain long-lived, unconfirmed SetupIntents because they might not be valid.
  * The SetupIntent transitions through multiple [statuses](https://docs.stripe.com/payments/intents#intent-statuses) as it guides
  * you through the setup process.
  * 
  * Successful SetupIntents result in payment credentials that are optimized for future payments.
  * For example, cardholders in [certain regions](https://stripe.com/guides/strong-customer-authentication) might need to be run through
  * [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) during payment method collection
  * to streamline later [off-session payments](https://docs.stripe.com/payments/setup-intents).
  * If you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),
  * it automatically attaches the resulting payment method to that Customer after successful setup.
  * We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
  * PaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.
  * 
  * By using SetupIntents, you can reduce friction for your customers, even as regulations change over time.
  * 
  * Related guide: [Setup Intents API](https://docs.stripe.com/payments/setup-intents)
  */
 setup_intent?: Schemas.setup_intent
 /**
  * @description The [source object](https://stripe.com/docs/api/sources/object) for errors returned on a request involving a source.
  */
 source?: (Schemas.bank_account | Schemas.card | Schemas.source)
 /**
  * @description The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`
  */
 type: ('api_error' | 'card_error' | 'idempotency_error' | 'invalid_request_error')
}

/**
 * @title ApplePayDomain
 */
export type apple_pay_domain = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 domain_name: string
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'apple_pay_domain'
}

/**
 * @title Application
 */
export type application = {
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The name of the application.
  */
 name?: string | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'application'
}

/**
 * @title PlatformFee
 */
export type application_fee = {
 /**
  * @description ID of the Stripe account this fee was taken from.
  */
 account: (string | Schemas.account)
 /**
  * @description Amount earned, in cents (or local equivalent).
  */
 amount: number
 /**
  * @description Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the fee if a partial refund was issued)
  */
 amount_refunded: number
 /**
  * @description ID of the Connect application that earned the fee.
  */
 application: (string | Schemas.application)
 /**
  * @description Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds).
  */
 balance_transaction?: (string | Schemas.balance_transaction) | null
 /**
  * @description ID of the charge that the application fee was taken from.
  */
 charge: (string | Schemas.charge)
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description Polymorphic source of the application fee. Includes the ID of the object the application fee was created from.
  */
 fee_source?: Schemas.platform_earning_fee_source | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'application_fee'
 /**
  * @description ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter.
  */
 originating_transaction?: (string | Schemas.charge) | null
 /**
  * @description Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.
  */
 refunded: boolean
 /**
  * @title FeeRefundList
  * @description A list of refunds that have been applied to the fee.
  */
 refunds: {
  /**
   * @description Details about each object.
   */
  data: Schemas.fee_refund[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 }
}

/**
 * @title SecretServiceResourceSecret
 * @description Secret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.
 * 
 * The primary resource in Secret Store is a `secret`. Other apps can't view secrets created by an app. Additionally, secrets are scoped to provide further permission control.
 * 
 * All Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don't change per-user, like a third-party API key.
 * 
 * A `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.
 * 
 * Related guide: [Store data between page reloads](https://stripe.com/docs/stripe-apps/store-auth-data-custom-objects)
 */
export type appssecret = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description If true, indicates that this secret has been deleted
  */
 deleted?: boolean
 /**
  * @description The Unix timestamp for the expiry time of the secret, after which the secret deletes.
  */
 expires_at?: number | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description A name for the secret that's unique within the scope.
  */
 name: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'apps.secret'
 /**
  * @description The plaintext secret value to be stored.
  */
 payload?: string | null
 /**
  * @title SecretServiceResourceScope
  */
 scope: Schemas.secret_service_resource_scope
}

/**
 * @title AutomaticTax
 */
export type automatic_tax = {
 /**
  * @description If Stripe disabled automatic tax, this enum describes why.
  */
 disabled_reason?: ('finalization_requires_location_inputs' | 'finalization_system_error') | null
 /**
  * @description Whether Stripe automatically computes tax on this invoice. Note that incompatible invoice items (invoice items with manually specified [tax rates](https://stripe.com/docs/api/tax_rates), negative amounts, or `tax_behavior=unspecified`) cannot be added to automatic tax invoices.
  */
 enabled: boolean
 /**
  * @description The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
  */
 liability?: Schemas.connect_account_reference | null
 /**
  * @description The tax provider powering automatic tax.
  */
 provider?: string | null
 /**
  * @description The status of the most recent automated tax calculation for this invoice.
  */
 status?: ('complete' | 'failed' | 'requires_location_inputs') | null
}

/**
 * @title Balance
 * @description This is an object representing your Stripe balance. You can retrieve it to see
 * the balance currently on your Stripe account.
 * 
 * The top-level `available` and `pending` comprise your "payments balance."
 * 
 * Related guide: [Balances and settlement time](https://stripe.com/docs/payments/balances), [Understanding Connect account balances](https://stripe.com/docs/connect/account-balances)
 */
export type balance = {
 /**
  * @description Available funds that you can transfer or pay out automatically by Stripe or explicitly through the [Transfers API](https://stripe.com/docs/api#transfers) or [Payouts API](https://stripe.com/docs/api#payouts). You can find the available balance for each currency and payment type in the `source_types` property.
  */
 available: Schemas.balance_amount[]
 /**
  * @description Funds held due to negative balances on connected accounts where [account.controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. You can find the connect reserve balance for each currency and payment type in the `source_types` property.
  */
 connect_reserved?: Schemas.balance_amount[]
 /**
  * @description Funds that you can pay out using Instant Payouts.
  */
 instant_available?: Schemas.balance_amount_net[]
 /**
  * @title BalanceDetail
  */
 issuing?: Schemas.balance_detail
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'balance'
 /**
  * @description Funds that aren't available in the balance yet. You can find the pending balance for each currency and each payment type in the `source_types` property.
  */
 pending: Schemas.balance_amount[]
 /**
  * @title BalanceDetailUngated
  */
 refund_and_dispute_prefunding?: Schemas.balance_detail_ungated
}

/**
 * @title BalanceAmount
 */
export type balance_amount = {
 /**
  * @description Balance amount.
  */
 amount: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @title BalanceAmountBySourceType
  */
 source_types?: Schemas.balance_amount_by_source_type
}

/**
 * @title BalanceAmountBySourceType
 */
export type balance_amount_by_source_type = {
 /**
  * @description Amount coming from [legacy US ACH payments](https://docs.stripe.com/ach-deprecated).
  */
 bank_account?: number
 /**
  * @description Amount coming from most payment methods, including cards as well as [non-legacy bank debits](https://docs.stripe.com/payments/bank-debits).
  */
 card?: number
 /**
  * @description Amount coming from [FPX](https://docs.stripe.com/payments/fpx), a Malaysian payment method.
  */
 fpx?: number
}

/**
 * @title BalanceAmountNet
 */
export type balance_amount_net = {
 /**
  * @description Balance amount.
  */
 amount: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description Breakdown of balance by destination.
  */
 net_available?: Schemas.balance_net_available[]
 /**
  * @title BalanceAmountBySourceType
  */
 source_types?: Schemas.balance_amount_by_source_type
}

/**
 * @title BalanceDetail
 */
export type balance_detail = {
 /**
  * @description Funds that are available for use.
  */
 available: Schemas.balance_amount[]
}

/**
 * @title BalanceDetailUngated
 */
export type balance_detail_ungated = {
 /**
  * @description Funds that are available for use.
  */
 available: Schemas.balance_amount[]
 /**
  * @description Funds that are pending
  */
 pending: Schemas.balance_amount[]
}

/**
 * @title BalanceNetAvailable
 */
export type balance_net_available = {
 /**
  * @description Net balance amount, subtracting fees from platform-set pricing.
  */
 amount: number
 /**
  * @description ID of the external account for this net balance (not expandable).
  */
 destination: string
 /**
  * @title BalanceAmountBySourceType
  */
 source_types?: Schemas.balance_amount_by_source_type
}

/**
 * @title BalanceTransaction
 * @description Balance transactions represent funds moving through your Stripe account.
 * Stripe creates them for every type of transaction that enters or leaves your Stripe account balance.
 * 
 * Related guide: [Balance transaction types](https://stripe.com/docs/reports/balance-transaction-types)
 */
export type balance_transaction = {
 /**
  * @description Gross amount of this transaction (in cents (or local equivalent)). A positive value represents funds charged to another party, and a negative value represents funds sent to another party.
  */
 amount: number
 /**
  * @description The date that the transaction's net funds become available in the Stripe balance.
  */
 available_on: number
 /**
  * @description The balance that this transaction impacts.
  */
 balance_type?: ('issuing' | 'payments' | 'refund_and_dispute_prefunding')
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description?: string | null
 /**
  * @description If applicable, this transaction uses an exchange rate. If money converts from currency A to currency B, then the `amount` in currency A, multipled by the `exchange_rate`, equals the `amount` in currency B. For example, if you charge a customer 10.00 EUR, the PaymentIntent's `amount` is `1000` and `currency` is `eur`. If this converts to 12.34 USD in your Stripe account, the BalanceTransaction's `amount` is `1234`, its `currency` is `usd`, and the `exchange_rate` is `1.234`.
  */
 exchange_rate?: number | null
 /**
  * @description Fees (in cents (or local equivalent)) paid for this transaction. Represented as a positive integer when assessed.
  */
 fee: number
 /**
  * @description Detailed breakdown of fees (in cents (or local equivalent)) paid for this transaction.
  */
 fee_details: Schemas.fee[]
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Net impact to a Stripe balance (in cents (or local equivalent)). A positive value represents incrementing a Stripe balance, and a negative value decrementing a Stripe balance. You can calculate the net impact of a transaction on a balance by `amount` - `fee`
  */
 net: number
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'balance_transaction'
 /**
  * @description Learn more about how [reporting categories](https://stripe.com/docs/reports/reporting-categories) can help you understand balance transactions from an accounting perspective.
  */
 reporting_category: string
 /**
  * @description This transaction relates to the Stripe object.
  */
 source?: (string | Schemas.application_fee | Schemas.charge | Schemas.connect_collection_transfer | Schemas.customer_cash_balance_transaction | Schemas.dispute | Schemas.fee_refund | Schemas.issuingauthorization | Schemas.issuingdispute | Schemas.issuingtransaction | Schemas.payout | Schemas.refund | Schemas.reserve_transaction | Schemas.tax_deducted_at_source | Schemas.topup | Schemas.transfer | Schemas.transfer_reversal) | null
 /**
  * @description The transaction's net funds status in the Stripe balance, which are either `available` or `pending`.
  */
 status: string
 /**
  * @description Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `payout_minimum_balance_hold`, `payout_minimum_balance_release`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `stripe_balance_payment_debit`, `stripe_balance_payment_debit_reversal`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. Learn more about [balance transaction types and what they represent](https://stripe.com/docs/reports/balance-transaction-types). To classify transactions for accounting purposes, consider `reporting_category` instead.
  */
 type: ('adjustment' | 'advance' | 'advance_funding' | 'anticipation_repayment' | 'application_fee' | 'application_fee_refund' | 'charge' | 'climate_order_purchase' | 'climate_order_refund' | 'connect_collection_transfer' | 'contribution' | 'issuing_authorization_hold' | 'issuing_authorization_release' | 'issuing_dispute' | 'issuing_transaction' | 'obligation_outbound' | 'obligation_reversal_inbound' | 'payment' | 'payment_failure_refund' | 'payment_network_reserve_hold' | 'payment_network_reserve_release' | 'payment_refund' | 'payment_reversal' | 'payment_unreconciled' | 'payout' | 'payout_cancel' | 'payout_failure' | 'payout_minimum_balance_hold' | 'payout_minimum_balance_release' | 'refund' | 'refund_failure' | 'reserve_transaction' | 'reserved_funds' | 'stripe_balance_payment_debit' | 'stripe_balance_payment_debit_reversal' | 'stripe_fee' | 'stripe_fx_fee' | 'tax_fee' | 'topup' | 'topup_reversal' | 'transfer' | 'transfer_cancel' | 'transfer_failure' | 'transfer_refund')
}

/**
 * @title BankAccount
 * @description These bank accounts are payment methods on `Customer` objects.
 * 
 * On the other hand [External Accounts](/api#external_accounts) are transfer
 * destinations on `Account` objects for connected accounts.
 * They can be bank accounts or debit cards as well, and are documented in the links above.
 * 
 * Related guide: [Bank debits and transfers](/payments/bank-debits-transfers)
 */
export type bank_account = {
 /**
  * @description The account this bank account belongs to. Only applicable on Accounts (not customers or recipients) This property is only available when returned as an [External Account](/api/external_account_bank_accounts/object) where [controller.is_controller](/api/accounts/object#account_object-controller-is_controller) is `true`.
  */
 account?: (string | Schemas.account) | null
 /**
  * @description The name of the person or business that owns the bank account.
  */
 account_holder_name?: string | null
 /**
  * @description The type of entity that holds the account. This can be either `individual` or `company`.
  */
 account_holder_type?: string | null
 /**
  * @description The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
  */
 account_type?: string | null
 /**
  * @description A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout.
  */
 available_payout_methods?: ('instant' | 'standard')[] | null
 /**
  * @description Name of the bank associated with the routing number (e.g., `WELLS FARGO`).
  */
 bank_name?: string | null
 /**
  * @description Two-letter ISO code representing the country the bank account is located in.
  */
 country: string
 /**
  * @description Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  */
 currency: string
 /**
  * @description The ID of the customer that the bank account is associated with.
  */
 customer?: (string | Schemas.customer | Schemas.deleted_customer) | null
 /**
  * @description Whether this bank account is the default external account for its currency.
  */
 default_for_currency?: boolean | null
 /**
  * @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  */
 fingerprint?: string | null
 /**
  * @description Information about the [upcoming new requirements for the bank account](https://stripe.com/docs/connect/custom-accounts/future-requirements), including what information needs to be collected, and by when.
  */
 future_requirements?: Schemas.external_account_requirements | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The last four digits of the bank account number.
  */
 last4: string
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'bank_account'
 /**
  * @description Information about the requirements for the bank account, including what information needs to be collected.
  */
 requirements?: Schemas.external_account_requirements | null
 /**
  * @description The routing transit number for the bank account.
  */
 routing_number?: string | null
 /**
  * @description For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a payout sent to this bank account fails, we'll set the status to `errored` and will not continue to send [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) until the bank details are updated.
  * 
  * For external accounts, possible values are `new`, `errored` and `verification_failed`. If a payout fails, the status is set to `errored` and scheduled payouts are stopped until account details are updated. In the US and India, if we can't [verify the owner of the bank account](https://support.stripe.com/questions/bank-account-ownership-verification), we'll set the status to `verification_failed`. Other validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply.
  */
 status: string
}

/**
 * @title BankConnectionsResourceAccountholder
 */
export type bank_connections_resource_accountholder = {
 /**
  * @description The ID of the Stripe account this account belongs to. Should only be present if `account_holder.type` is `account`.
  */
 account?: (string | Schemas.account)
 /**
  * @description ID of the Stripe customer this account belongs to. Present if and only if `account_holder.type` is `customer`.
  */
 customer?: (string | Schemas.customer)
 /**
  * @description Type of account holder that this account belongs to.
  */
 type: ('account' | 'customer')
}

/**
 * @title BankConnectionsResourceBalance
 */
export type bank_connections_resource_balance = {
 /**
  * @description The time that the external institution calculated this balance. Measured in seconds since the Unix epoch.
  */
 as_of: number
 /**
  * @title BankConnectionsResourceBalanceAPIResourceCashBalance
  */
 cash?: Schemas.bank_connections_resource_balance_api_resource_cash_balance
 /**
  * @title BankConnectionsResourceBalanceAPIResourceCreditBalance
  */
 credit?: Schemas.bank_connections_resource_balance_api_resource_credit_balance
 /**
  * @description The balances owed to (or by) the account holder, before subtracting any outbound pending transactions or adding any inbound pending transactions.
  * 
  * Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
  * 
  * Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.
  */
 current: Record<string, number>
 /**
  * @description The `type` of the balance. An additional hash is included on the balance with a name matching this value.
  */
 type: ('cash' | 'credit')
}

/**
 * @title BankConnectionsResourceBalanceAPIResourceCashBalance
 */
export type bank_connections_resource_balance_api_resource_cash_balance = {
 /**
  * @description The funds available to the account holder. Typically this is the current balance after subtracting any outbound pending transactions and adding any inbound pending transactions.
  * 
  * Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
  * 
  * Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.
  */
 available?: Record<string, number> | null
}

/**
 * @title BankConnectionsResourceBalanceAPIResourceCreditBalance
 */
export type bank_connections_resource_balance_api_resource_credit_balance = {
 /**
  * @description The credit that has been used by the account holder.
  * 
  * Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
  * 
  * Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.
  */
 used?: Record<string, number> | null
}

/**
 * @title BankConnectionsResourceBalanceRefresh
 */
export type bank_connections_resource_balance_refresh = {
 /**
  * @description The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch.
  */
 last_attempted_at: number
 /**
  * @description Time at which the next balance refresh can be initiated. This value will be `null` when `status` is `pending`. Measured in seconds since the Unix epoch.
  */
 next_refresh_available_at?: number | null
 /**
  * @description The status of the last refresh attempt.
  */
 status: ('failed' | 'pending' | 'succeeded')
}

/**
 * @title BankConnectionsResourceLinkAccountSessionFilters
 */
export type bank_connections_resource_link_account_session_filters = {
 /**
  * @description Restricts the Session to subcategories of accounts that can be linked. Valid subcategories are: `checking`, `savings`, `mortgage`, `line_of_credit`, `credit_card`.
  */
 account_subcategories?: ('checking' | 'credit_card' | 'line_of_credit' | 'mortgage' | 'savings')[] | null
 /**
  * @description List of countries from which to filter accounts.
  */
 countries?: string[] | null
}

/**
 * @title BankConnectionsResourceOwnershipRefresh
 */
export type bank_connections_resource_ownership_refresh = {
 /**
  * @description The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch.
  */
 last_attempted_at: number
 /**
  * @description Time at which the next ownership refresh can be initiated. This value will be `null` when `status` is `pending`. Measured in seconds since the Unix epoch.
  */
 next_refresh_available_at?: number | null
 /**
  * @description The status of the last refresh attempt.
  */
 status: ('failed' | 'pending' | 'succeeded')
}

/**
 * @title BankConnectionsResourceTransactionRefresh
 */
export type bank_connections_resource_transaction_refresh = {
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch.
  */
 last_attempted_at: number
 /**
  * @description Time at which the next transaction refresh can be initiated. This value will be `null` when `status` is `pending`. Measured in seconds since the Unix epoch.
  */
 next_refresh_available_at?: number | null
 /**
  * @description The status of the last refresh attempt.
  */
 status: ('failed' | 'pending' | 'succeeded')
}

/**
 * @title BankConnectionsResourceTransactionResourceStatusTransitions
 */
export type bank_connections_resource_transaction_resource_status_transitions = {
 /**
  * @description Time at which this transaction posted. Measured in seconds since the Unix epoch.
  */
 posted_at?: number | null
 /**
  * @description Time at which this transaction was voided. Measured in seconds since the Unix epoch.
  */
 void_at?: number | null
}

/**
 * @title ThresholdsResourceAlert
 * @description A billing alert is a resource that notifies you when a certain usage threshold on a meter is crossed. For example, you might create a billing alert to notify you when a certain user made 100 API requests.
 */
export type billingalert = {
 /**
  * @description Defines the type of the alert.
  */
 alert_type: 'usage_threshold'
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'billing.alert'
 /**
  * @description Status of the alert. This can be active, inactive or archived.
  */
 status?: ('active' | 'archived' | 'inactive') | null
 /**
  * @description Title of the alert.
  */
 title: string
 /**
  * @description Encapsulates configuration of the alert to monitor usage on a specific [Billing Meter](https://stripe.com/docs/api/billing/meter).
  */
 usage_threshold?: Schemas.thresholds_resource_usage_threshold_config | null
}

/**
 * @title CreditBalanceSummary
 * @description Indicates the billing credit balance for billing credits granted to a customer.
 */
export type billingcredit_balance_summary = {
 /**
  * @description The billing credit balances. One entry per credit grant currency. If a customer only has credit grants in a single currency, then this will have a single balance entry.
  */
 balances: Schemas.credit_balance[]
 /**
  * @description The customer the balance is for.
  */
 customer: (string | Schemas.customer | Schemas.deleted_customer)
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'billing.credit_balance_summary'
}

/**
 * @title CreditBalanceTransaction
 * @description A credit balance transaction is a resource representing a transaction (either a credit or a debit) against an existing credit grant.
 */
export type billingcredit_balance_transaction = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Credit details for this credit balance transaction. Only present if type is `credit`.
  */
 credit?: Schemas.billing_credit_grants_resource_balance_credit | null
 /**
  * @description The credit grant associated with this credit balance transaction.
  */
 credit_grant: (string | Schemas.billingcredit_grant)
 /**
  * @description Debit details for this credit balance transaction. Only present if type is `debit`.
  */
 debit?: Schemas.billing_credit_grants_resource_balance_debit | null
 /**
  * @description The effective time of this credit balance transaction.
  */
 effective_at: number
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'billing.credit_balance_transaction'
 /**
  * @description ID of the test clock this credit balance transaction belongs to.
  */
 test_clock?: (string | Schemas.test_helperstest_clock) | null
 /**
  * @description The type of credit balance transaction (credit or debit).
  */
 type?: ('credit' | 'debit') | null
}

/**
 * @title CreditGrant
 * @description A credit grant is an API resource that documents the allocation of some billing credits to a customer.
 * 
 * Related guide: [Billing credits](https://docs.stripe.com/billing/subscriptions/usage-based/billing-credits)
 */
export type billingcredit_grant = {
 /**
  * @title BillingCreditGrantsResourceAmount
  */
 amount: Schemas.billing_credit_grants_resource_amount
 /**
  * @title BillingCreditGrantsResourceApplicabilityConfig
  */
 applicability_config: Schemas.billing_credit_grants_resource_applicability_config
 /**
  * @description The category of this credit grant. This is for tracking purposes and isn't displayed to the customer.
  */
 category: ('paid' | 'promotional')
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description ID of the customer receiving the billing credits.
  */
 customer: (string | Schemas.customer | Schemas.deleted_customer)
 /**
  * @description The time when the billing credits become effective-when they're eligible for use.
  */
 effective_at?: number | null
 /**
  * @description The time when the billing credits expire. If not present, the billing credits don't expire.
  */
 expires_at?: number | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description A descriptive name shown in dashboard.
  */
 name?: string | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'billing.credit_grant'
 /**
  * @description The priority for applying this credit grant. The highest priority is 0 and the lowest is 100.
  */
 priority?: number | null
 /**
  * @description ID of the test clock this credit grant belongs to.
  */
 test_clock?: (string | Schemas.test_helperstest_clock) | null
 /**
  * @description Time at which the object was last updated. Measured in seconds since the Unix epoch.
  */
 updated: number
 /**
  * @description The time when this credit grant was voided. If not present, the credit grant hasn't been voided.
  */
 voided_at?: number | null
}

/**
 * @title BillingMeter
 * @description Meters specify how to aggregate meter events over a billing period. Meter events represent the actions that customers take in your system. Meters attach to prices and form the basis of the bill.
 * 
 * Related guide: [Usage based billing](https://docs.stripe.com/billing/subscriptions/usage-based)
 */
export type billingmeter = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @title BillingMeterResourceCustomerMappingSettings
  */
 customer_mapping: Schemas.billing_meter_resource_customer_mapping_settings
 /**
  * @title BillingMeterResourceAggregationSettings
  */
 default_aggregation: Schemas.billing_meter_resource_aggregation_settings
 /**
  * @description The meter's name.
  */
 display_name: string
 /**
  * @description The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events.
  */
 event_name: string
 /**
  * @description The time window which meter events have been pre-aggregated for, if any.
  */
 event_time_window?: ('day' | 'hour') | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'billing.meter'
 /**
  * @description The meter's status.
  */
 status: ('active' | 'inactive')
 /**
  * @title BillingMeterResourceBillingMeterStatusTransitions
  */
 status_transitions: Schemas.billing_meter_resource_billing_meter_status_transitions
 /**
  * @description Time at which the object was last updated. Measured in seconds since the Unix epoch.
  */
 updated: number
 /**
  * @title BillingMeterResourceBillingMeterValue
  */
 value_settings: Schemas.billing_meter_resource_billing_meter_value
}

/**
 * @title BillingMeterEvent
 * @description Meter events represent actions that customers take in your system. You can use meter events to bill a customer based on their usage. Meter events are associated with billing meters, which define both the contents of the event’s payload and how to aggregate those events.
 */
export type billingmeter_event = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description The name of the meter event. Corresponds with the `event_name` field on a meter.
  */
 event_name: string
 /**
  * @description A unique identifier for the event.
  */
 identifier: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'billing.meter_event'
 /**
  * @description The payload of the event. This contains the fields corresponding to a meter's `customer_mapping.event_payload_key` (default is `stripe_customer_id`) and `value_settings.event_payload_key` (default is `value`). Read more about the [payload](https://stripe.com/docs/billing/subscriptions/usage-based/recording-usage#payload-key-overrides).
  */
 payload: Record<string, string>
 /**
  * @description The timestamp passed in when creating the event. Measured in seconds since the Unix epoch.
  */
 timestamp: number
}

/**
 * @title BillingMeterEventAdjustment
 * @description A billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.
 */
export type billingmeter_event_adjustment = {
 /**
  * @description Specifies which event to cancel.
  */
 cancel?: Schemas.billing_meter_resource_billing_meter_event_adjustment_cancel | null
 /**
  * @description The name of the meter event. Corresponds with the `event_name` field on a meter.
  */
 event_name: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'billing.meter_event_adjustment'
 /**
  * @description The meter event adjustment's status.
  */
 status: ('complete' | 'pending')
 /**
  * @description Specifies whether to cancel a single event or a range of events for a time period. Time period cancellation is not supported yet.
  */
 type: 'cancel'
}

/**
 * @title BillingMeterEventSummary
 * @description A billing meter event summary represents an aggregated view of a customer's billing meter events within a specified timeframe. It indicates how much
 * usage was accrued by a customer for that period.
 * 
 * Note: Meters events are aggregated asynchronously so the meter event summaries provide an eventually consistent view of the reported usage.
 */
export type billingmeter_event_summary = {
 /**
  * @description Aggregated value of all the events within `start_time` (inclusive) and `end_time` (inclusive). The aggregation strategy is defined on meter via `default_aggregation`.
  */
 aggregated_value: number
 /**
  * @description End timestamp for this event summary (exclusive). Must be aligned with minute boundaries.
  */
 end_time: number
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description The meter associated with this event summary.
  */
 meter: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'billing.meter_event_summary'
 /**
  * @description Start timestamp for this event summary (inclusive). Must be aligned with minute boundaries.
  */
 start_time: number
}

/**
 * @title BillingBillResourceInvoiceItemParentsInvoiceItemParent
 */
export type billing_bill_resource_invoice_item_parents_invoice_item_parent = {
 /**
  * @description Details about the subscription that generated this invoice item
  */
 subscription_details?: Schemas.billing_bill_resource_invoice_item_parents_invoice_item_subscription_parent | null
 /**
  * @description The type of parent that generated this invoice item
  */
 type: 'subscription_details'
}

/**
 * @title BillingBillResourceInvoiceItemParentsInvoiceItemSubscriptionParent
 */
export type billing_bill_resource_invoice_item_parents_invoice_item_subscription_parent = {
 /**
  * @description The subscription that generated this invoice item
  */
 subscription: string
 /**
  * @description The subscription item that generated this invoice item
  */
 subscription_item?: string
}

/**
 * @title BillingBillResourceInvoicingLinesCommonCreditedItems
 */
export type billing_bill_resource_invoicing_lines_common_credited_items = {
 /**
  * @description Invoice containing the credited invoice line items
  */
 invoice: string
 /**
  * @description Credited invoice line items
  */
 invoice_line_items: string[]
}

/**
 * @title BillingBillResourceInvoicingLinesCommonProrationDetails
 */
export type billing_bill_resource_invoicing_lines_common_proration_details = {
 /**
  * @description For a credit proration `line_item`, the original debit line_items to which the credit proration applies.
  */
 credited_items?: Schemas.billing_bill_resource_invoicing_lines_common_credited_items | null
}

/**
 * @title BillingBillResourceInvoicingLinesParentsInvoiceLineItemInvoiceItemParent
 */
export type billing_bill_resource_invoicing_lines_parents_invoice_line_item_invoice_item_parent = {
 /**
  * @description The invoice item that generated this line item
  */
 invoice_item: string
 /**
  * @description Whether this is a proration
  */
 proration: boolean
 /**
  * @description Additional details for proration line items
  */
 proration_details?: Schemas.billing_bill_resource_invoicing_lines_common_proration_details | null
 /**
  * @description The subscription that the invoice item belongs to
  */
 subscription?: string | null
}

/**
 * @title BillingBillResourceInvoicingLinesParentsInvoiceLineItemParent
 */
export type billing_bill_resource_invoicing_lines_parents_invoice_line_item_parent = {
 /**
  * @description Details about the invoice item that generated this line item
  */
 invoice_item_details?: Schemas.billing_bill_resource_invoicing_lines_parents_invoice_line_item_invoice_item_parent | null
 /**
  * @description Details about the subscription item that generated this line item
  */
 subscription_item_details?: Schemas.billing_bill_resource_invoicing_lines_parents_invoice_line_item_subscription_item_parent | null
 /**
  * @description The type of parent that generated this line item
  */
 type: ('invoice_item_details' | 'subscription_item_details')
}

/**
 * @title BillingBillResourceInvoicingLinesParentsInvoiceLineItemSubscriptionItemParent
 */
export type billing_bill_resource_invoicing_lines_parents_invoice_line_item_subscription_item_parent = {
 /**
  * @description The invoice item that generated this line item
  */
 invoice_item?: string | null
 /**
  * @description Whether this is a proration
  */
 proration: boolean
 /**
  * @description Additional details for proration line items
  */
 proration_details?: Schemas.billing_bill_resource_invoicing_lines_common_proration_details | null
 /**
  * @description The subscription that the subscription item belongs to
  */
 subscription?: string | null
 /**
  * @description The subscription item that generated this line item
  */
 subscription_item: string
}

/**
 * @title BillingBillResourceInvoicingParentsInvoiceParent
 */
export type billing_bill_resource_invoicing_parents_invoice_parent = {
 /**
  * @description Details about the quote that generated this invoice
  */
 quote_details?: Schemas.billing_bill_resource_invoicing_parents_invoice_quote_parent | null
 /**
  * @description Details about the subscription that generated this invoice
  */
 subscription_details?: Schemas.billing_bill_resource_invoicing_parents_invoice_subscription_parent | null
 /**
  * @description The type of parent that generated this invoice
  */
 type: ('quote_details' | 'subscription_details')
}

/**
 * @title BillingBillResourceInvoicingParentsInvoiceQuoteParent
 */
export type billing_bill_resource_invoicing_parents_invoice_quote_parent = {
 /**
  * @description The quote that generated this invoice
  */
 quote: string
}

/**
 * @title BillingBillResourceInvoicingParentsInvoiceSubscriptionParent
 */
export type billing_bill_resource_invoicing_parents_invoice_subscription_parent = {
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) defined as subscription metadata when an invoice is created. Becomes an immutable snapshot of the subscription metadata at the time of invoice finalization.
  *  *Note: This attribute is populated only for invoices created on or after June 29, 2023.*
  */
 metadata?: Record<string, string> | null
 /**
  * @description The subscription that generated this invoice
  */
 subscription: (string | Schemas.subscription)
 /**
  * @description Only set for upcoming invoices that preview prorations. The time used to calculate prorations.
  */
 subscription_proration_date?: number
}

/**
 * @title BillingBillResourceInvoicingPricingPricing
 */
export type billing_bill_resource_invoicing_pricing_pricing = {
 /**
  * @title BillingBillResourceInvoicingPricingPricingPriceDetails
  */
 price_details?: Schemas.billing_bill_resource_invoicing_pricing_pricing_price_details
 /**
  * @description The type of the pricing details.
  */
 type: 'price_details'
 /**
  * @description The unit amount (in the `currency` specified) of the item which contains a decimal value with at most 12 decimal places.
  */
 unit_amount_decimal?: string | null
}

/**
 * @title BillingBillResourceInvoicingPricingPricingPriceDetails
 */
export type billing_bill_resource_invoicing_pricing_pricing_price_details = {
 /**
  * @description The ID of the price this item is associated with.
  */
 price: string
 /**
  * @description The ID of the product this item is associated with.
  */
 product: string
}

/**
 * @title BillingBillResourceInvoicingTaxesTax
 */
export type billing_bill_resource_invoicing_taxes_tax = {
 /**
  * @description The amount of the tax, in cents (or local equivalent).
  */
 amount: number
 /**
  * @description Whether this tax is inclusive or exclusive.
  */
 tax_behavior: ('exclusive' | 'inclusive')
 /**
  * @description Additional details about the tax rate. Only present when `type` is `tax_rate_details`.
  */
 tax_rate_details?: Schemas.billing_bill_resource_invoicing_taxes_tax_rate_details | null
 /**
  * @description The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
  */
 taxability_reason: ('customer_exempt' | 'not_available' | 'not_collecting' | 'not_subject_to_tax' | 'not_supported' | 'portion_product_exempt' | 'portion_reduced_rated' | 'portion_standard_rated' | 'product_exempt' | 'product_exempt_holiday' | 'proportionally_rated' | 'reduced_rated' | 'reverse_charge' | 'standard_rated' | 'taxable_basis_reduced' | 'zero_rated')
 /**
  * @description The amount on which tax is calculated, in cents (or local equivalent).
  */
 taxable_amount?: number | null
 /**
  * @description The type of tax information.
  */
 type: 'tax_rate_details'
}

/**
 * @title BillingBillResourceInvoicingTaxesTaxRateDetails
 */
export type billing_bill_resource_invoicing_taxes_tax_rate_details = {
 tax_rate: string
}

/**
 * @title BillingClocksResourceStatusDetailsAdvancingStatusDetails
 */
export type billing_clocks_resource_status_details_advancing_status_details = {
 /**
  * @description The `frozen_time` that the Test Clock is advancing towards.
  */
 target_frozen_time: number
}

/**
 * @title BillingClocksResourceStatusDetailsStatusDetails
 */
export type billing_clocks_resource_status_details_status_details = {
 /**
  * @title BillingClocksResourceStatusDetailsAdvancingStatusDetails
  */
 advancing?: Schemas.billing_clocks_resource_status_details_advancing_status_details
}

/**
 * @title BillingCreditGrantsResourceAmount
 */
export type billing_credit_grants_resource_amount = {
 /**
  * @description The monetary amount.
  */
 monetary?: Schemas.billing_credit_grants_resource_monetary_amount | null
 /**
  * @description The type of this amount. We currently only support `monetary` billing credits.
  */
 type: 'monetary'
}

/**
 * @title BillingCreditGrantsResourceApplicabilityConfig
 */
export type billing_credit_grants_resource_applicability_config = {
 /**
  * @title BillingCreditGrantsResourceScope
  */
 scope: Schemas.billing_credit_grants_resource_scope
}

/**
 * @title BillingCreditGrantsResourceApplicablePrice
 */
export type billing_credit_grants_resource_applicable_price = {
 /**
  * @description Unique identifier for the object.
  */
 id?: string | null
}

/**
 * @title BillingCreditGrantsResourceBalanceCredit
 */
export type billing_credit_grants_resource_balance_credit = {
 /**
  * @title BillingCreditGrantsResourceAmount
  */
 amount: Schemas.billing_credit_grants_resource_amount
 /**
  * @description Details of the invoice to which the reinstated credits were originally applied. Only present if `type` is `credits_application_invoice_voided`.
  */
 credits_application_invoice_voided?: Schemas.billing_credit_grants_resource_balance_credits_application_invoice_voided | null
 /**
  * @description The type of credit transaction.
  */
 type: ('credits_application_invoice_voided' | 'credits_granted')
}

/**
 * @title BillingCreditGrantsResourceBalanceCreditsApplicationInvoiceVoided
 */
export type billing_credit_grants_resource_balance_credits_application_invoice_voided = {
 /**
  * @description The invoice to which the reinstated billing credits were originally applied.
  */
 invoice: (string | Schemas.invoice)
 /**
  * @description The invoice line item to which the reinstated billing credits were originally applied.
  */
 invoice_line_item: string
}

/**
 * @title BillingCreditGrantsResourceBalanceCreditsApplied
 */
export type billing_credit_grants_resource_balance_credits_applied = {
 /**
  * @description The invoice to which the billing credits were applied.
  */
 invoice: (string | Schemas.invoice)
 /**
  * @description The invoice line item to which the billing credits were applied.
  */
 invoice_line_item: string
}

/**
 * @title BillingCreditGrantsResourceBalanceDebit
 */
export type billing_credit_grants_resource_balance_debit = {
 /**
  * @title BillingCreditGrantsResourceAmount
  */
 amount: Schemas.billing_credit_grants_resource_amount
 /**
  * @description Details of how the billing credits were applied to an invoice. Only present if `type` is `credits_applied`.
  */
 credits_applied?: Schemas.billing_credit_grants_resource_balance_credits_applied | null
 /**
  * @description The type of debit transaction.
  */
 type: ('credits_applied' | 'credits_expired' | 'credits_voided')
}

/**
 * @title BillingCreditGrantsResourceMonetaryAmount
 */
export type billing_credit_grants_resource_monetary_amount = {
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description A positive integer representing the amount.
  */
 value: number
}

/**
 * @title BillingCreditGrantsResourceScope
 */
export type billing_credit_grants_resource_scope = {
 /**
  * @description The price type that credit grants can apply to. We currently only support the `metered` price type. This refers to prices that have a [Billing Meter](https://docs.stripe.com/api/billing/meter) attached to them. Cannot be used in combination with `prices`.
  */
 price_type?: 'metered'
 /**
  * @description The prices that credit grants can apply to. We currently only support `metered` prices. This refers to prices that have a [Billing Meter](https://docs.stripe.com/api/billing/meter) attached to them. Cannot be used in combination with `price_type`.
  */
 prices?: Schemas.billing_credit_grants_resource_applicable_price[]
}

/**
 * @title billing_details
 */
export type billing_details = {
 /**
  * @description Billing address.
  */
 address?: Schemas.address | null
 /**
  * @description Email address.
  */
 email?: string | null
 /**
  * @description Full name.
  */
 name?: string | null
 /**
  * @description Billing phone number (including extension).
  */
 phone?: string | null
 /**
  * @description Taxpayer identification number. Used only for transactions between LATAM buyers and non-LATAM sellers.
  */
 tax_id?: string | null
}

/**
 * @title BillingMeterResourceAggregationSettings
 */
export type billing_meter_resource_aggregation_settings = {
 /**
  * @description Specifies how events are aggregated.
  */
 formula: ('count' | 'last' | 'sum')
}

/**
 * @title BillingMeterResourceBillingMeterEventAdjustmentCancel
 */
export type billing_meter_resource_billing_meter_event_adjustment_cancel = {
 /**
  * @description Unique identifier for the event.
  */
 identifier?: string | null
}

/**
 * @title BillingMeterResourceBillingMeterStatusTransitions
 */
export type billing_meter_resource_billing_meter_status_transitions = {
 /**
  * @description The time the meter was deactivated, if any. Measured in seconds since Unix epoch.
  */
 deactivated_at?: number | null
}

/**
 * @title BillingMeterResourceBillingMeterValue
 */
export type billing_meter_resource_billing_meter_value = {
 /**
  * @description The key in the meter event payload to use as the value for this meter.
  */
 event_payload_key: string
}

/**
 * @title BillingMeterResourceCustomerMappingSettings
 */
export type billing_meter_resource_customer_mapping_settings = {
 /**
  * @description The key in the meter event payload to use for mapping the event to a customer.
  */
 event_payload_key: string
 /**
  * @description The method for mapping a meter event to a customer.
  */
 type: 'by_id'
}

/**
 * @title PortalConfiguration
 * @description A portal configuration describes the functionality and behavior of a portal session.
 */
export type billing_portalconfiguration = {
 /**
  * @description Whether the configuration is active and can be used to create portal sessions.
  */
 active: boolean
 /**
  * @description ID of the Connect Application that created the configuration.
  */
 application?: (string | Schemas.application | Schemas.deleted_application) | null
 /**
  * @title PortalBusinessProfile
  */
 business_profile: Schemas.portal_business_profile
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.
  */
 default_return_url?: string | null
 /**
  * @title PortalFeatures
  */
 features: Schemas.portal_features
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Whether the configuration is the default. If `true`, this configuration can be managed in the Dashboard and portal sessions will use this configuration unless it is overriden when creating the session.
  */
 is_default: boolean
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @title PortalLoginPage
  */
 login_page: Schemas.portal_login_page
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description The name of the configuration.
  */
 name?: string | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'billing_portal.configuration'
 /**
  * @description Time at which the object was last updated. Measured in seconds since the Unix epoch.
  */
 updated: number
}

/**
 * @title PortalSession
 * @description The Billing customer portal is a Stripe-hosted UI for subscription and
 * billing management.
 * 
 * A portal configuration describes the functionality and features that you
 * want to provide to your customers through the portal.
 * 
 * A portal session describes the instantiation of the customer portal for
 * a particular customer. By visiting the session's URL, the customer
 * can manage their subscriptions and billing details. For security reasons,
 * sessions are short-lived and will expire if the customer does not visit the URL.
 * Create sessions on-demand when customers intend to manage their subscriptions
 * and billing details.
 * 
 * Related guide: [Customer management](/customer-management)
 */
export type billing_portalsession = {
 /**
  * @description The configuration used by this session, describing the features available.
  */
 configuration: (string | Schemas.billing_portalconfiguration)
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description The ID of the customer for this session.
  */
 customer: string
 /**
  * @description Information about a specific flow for the customer to go through. See the [docs](https://stripe.com/docs/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.
  */
 flow?: Schemas.portal_flows_flow | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.
  */
 locale?: ('auto' | 'bg' | 'cs' | 'da' | 'de' | 'el' | 'en' | 'en-AU' | 'en-CA' | 'en-GB' | 'en-IE' | 'en-IN' | 'en-NZ' | 'en-SG' | 'es' | 'es-419' | 'et' | 'fi' | 'fil' | 'fr' | 'fr-CA' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'ko' | 'lt' | 'lv' | 'ms' | 'mt' | 'nb' | 'nl' | 'pl' | 'pt' | 'pt-BR' | 'ro' | 'ru' | 'sk' | 'sl' | 'sv' | 'th' | 'tr' | 'vi' | 'zh' | 'zh-HK' | 'zh-TW') | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'billing_portal.session'
 /**
  * @description The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays.
  */
 on_behalf_of?: string | null
 /**
  * @description The URL to redirect customers to when they click on the portal's link to return to your website.
  */
 return_url?: string | null
 /**
  * @description The short-lived URL of the session that gives customers access to the customer portal.
  */
 url: string
}

/**
 * @title CancellationDetails
 */
export type cancellation_details = {
 /**
  * @description Additional comments about why the user canceled the subscription, if the subscription was canceled explicitly by the user.
  */
 comment?: string | null
 /**
  * @description The customer submitted reason for why they canceled, if the subscription was canceled explicitly by the user.
  */
 feedback?: ('customer_service' | 'low_quality' | 'missing_features' | 'other' | 'switched_service' | 'too_complex' | 'too_expensive' | 'unused') | null
 /**
  * @description Why this subscription was canceled.
  */
 reason?: ('cancellation_requested' | 'payment_disputed' | 'payment_failed') | null
}

/**
 * @title AccountCapability
 * @description This is an object representing a capability for a Stripe account.
 * 
 * Related guide: [Account capabilities](https://stripe.com/docs/connect/account-capabilities)
 */
export type capability = {
 /**
  * @description The account for which the capability enables functionality.
  */
 account: (string | Schemas.account)
 /**
  * @title AccountCapabilityFutureRequirements
  */
 future_requirements?: Schemas.account_capability_future_requirements
 /**
  * @description The identifier for the capability.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'capability'
 /**
  * @description Whether the capability has been requested.
  */
 requested: boolean
 /**
  * @description Time at which the capability was requested. Measured in seconds since the Unix epoch.
  */
 requested_at?: number | null
 /**
  * @title AccountCapabilityRequirements
  */
 requirements?: Schemas.account_capability_requirements
 /**
  * @description The status of the capability.
  */
 status: ('active' | 'inactive' | 'pending' | 'unrequested')
}

/**
 * @title Card
 * @description You can store multiple cards on a customer in order to charge the customer
 * later. You can also store multiple debit cards on a recipient in order to
 * transfer to those cards later.
 * 
 * Related guide: [Card payments with Sources](https://stripe.com/docs/sources/cards)
 */
export type card = {
 account?: (string | Schemas.account) | null
 /**
  * @description City/District/Suburb/Town/Village.
  */
 address_city?: string | null
 /**
  * @description Billing address country, if provided when creating card.
  */
 address_country?: string | null
 /**
  * @description Address line 1 (Street address/PO Box/Company name).
  */
 address_line1?: string | null
 /**
  * @description If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
  */
 address_line1_check?: string | null
 /**
  * @description Address line 2 (Apartment/Suite/Unit/Building).
  */
 address_line2?: string | null
 /**
  * @description State/County/Province/Region.
  */
 address_state?: string | null
 /**
  * @description ZIP or postal code.
  */
 address_zip?: string | null
 /**
  * @description If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
  */
 address_zip_check?: string | null
 /**
  * @description This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”.
  */
 allow_redisplay?: ('always' | 'limited' | 'unspecified') | null
 /**
  * @description A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout.
  */
 available_payout_methods?: ('instant' | 'standard')[] | null
 /**
  * @description Card brand. Can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `Girocard`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.
  */
 brand: string
 /**
  * @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  */
 country?: string | null
 /**
  * @description Three-letter [ISO code for currency](https://www.iso.org/iso-4217-currency-codes.html) in lowercase. Must be a [supported currency](https://docs.stripe.com/currencies). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency. This property is only available when returned as an [External Account](/api/external_account_cards/object) where [controller.is_controller](/api/accounts/object#account_object-controller-is_controller) is `true`.
  */
 currency?: string | null
 /**
  * @description The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead.
  */
 customer?: (string | Schemas.customer | Schemas.deleted_customer) | null
 /**
  * @description If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).
  */
 cvc_check?: string | null
 /**
  * @description Whether this card is the default external account for its currency. This property is only available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.
  */
 default_for_currency?: boolean | null
 /**
  * @description (For tokenized numbers only.) The last four digits of the device account number.
  */
 dynamic_last4?: string | null
 /**
  * @description Two-digit number representing the card's expiration month.
  */
 exp_month: number
 /**
  * @description Four-digit number representing the card's expiration year.
  */
 exp_year: number
 /**
  * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  * 
  * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
  */
 fingerprint?: string | null
 /**
  * @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
  */
 funding: string
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Issuer identification number of the card.
  */
 iin?: string
 /**
  * @description The last four digits of the card.
  */
 last4: string
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description Cardholder name.
  */
 name?: string | null
 /**
  * @title token_card_networks
  */
 networks?: Schemas.token_card_networks
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'card'
 /**
  * @description Status of a card based on the card issuer.
  */
 regulated_status?: ('regulated' | 'unregulated') | null
 /**
  * @description For external accounts that are cards, possible values are `new` and `errored`. If a payout fails, the status is set to `errored` and [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) are stopped until account details are updated.
  */
 status?: string | null
 /**
  * @description If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null.
  */
 tokenization_method?: string | null
}

/**
 * @title card_generated_from_payment_method_details
 */
export type card_generated_from_payment_method_details = {
 /**
  * @title payment_method_details_card_present
  */
 card_present?: Schemas.payment_method_details_card_present
 /**
  * @description The type of payment method transaction-specific details from the transaction that generated this `card` payment method. Always `card_present`.
  */
 type: string
}

/**
 * @title CardIssuingAccountTermsOfService
 */
export type card_issuing_account_terms_of_service = {
 /**
  * @description The Unix timestamp marking when the account representative accepted the service agreement.
  */
 date?: number | null
 /**
  * @description The IP address from which the account representative accepted the service agreement.
  */
 ip?: string | null
 /**
  * @description The user agent of the browser from which the account representative accepted the service agreement.
  */
 user_agent?: string
}

/**
 * @title card_mandate_payment_method_details
 */
export type card_mandate_payment_method_details = unknown

/**
 * @title cash_balance
 * @description A customer's `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.
 */
export type cash_balance = {
 /**
  * @description A hash of all cash balances available to this customer. You cannot delete a customer with any cash balances, even if the balance is 0. Amounts are represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 available?: Record<string, number> | null
 /**
  * @description The ID of the customer whose cash balance this object represents.
  */
 customer: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'cash_balance'
 /**
  * @title CustomerBalanceCustomerBalanceSettings
  */
 settings: Schemas.customer_balance_customer_balance_settings
}

/**
 * @title Charge
 * @description The `Charge` object represents a single attempt to move money into your Stripe account.
 * PaymentIntent confirmation is the most common way to create Charges, but transferring
 * money to a different Stripe account through Connect also creates Charges.
 * Some legacy payment flows create Charges directly, which is not recommended for new integrations.
 */
export type charge = {
 /**
  * @description Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  */
 amount: number
 /**
  * @description Amount in cents (or local equivalent) captured (can be less than the amount attribute on the charge if a partial capture was made).
  */
 amount_captured: number
 /**
  * @description Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the charge if a partial refund was issued).
  */
 amount_refunded: number
 /**
  * @description ID of the Connect application that created the charge.
  */
 application?: (string | Schemas.application) | null
 /**
  * @description The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collect-fees) for details.
  */
 application_fee?: (string | Schemas.application_fee) | null
 /**
  * @description The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collect-fees) for details.
  */
 application_fee_amount?: number | null
 /**
  * @description ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).
  */
 balance_transaction?: (string | Schemas.balance_transaction) | null
 /**
  * @title billing_details
  */
 billing_details: Schemas.billing_details
 /**
  * @description The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined. This value only exists for card payments.
  */
 calculated_statement_descriptor?: string | null
 /**
  * @description If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.
  */
 captured: boolean
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description ID of the customer this charge is for if one exists.
  */
 customer?: (string | Schemas.customer | Schemas.deleted_customer) | null
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description?: string | null
 /**
  * @description Whether the charge has been disputed.
  */
 disputed: boolean
 /**
  * @description ID of the balance transaction that describes the reversal of the balance on your account due to payment failure.
  */
 failure_balance_transaction?: (string | Schemas.balance_transaction) | null
 /**
  * @description Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/error-codes) for a list of codes).
  */
 failure_code?: string | null
 /**
  * @description Message to user further explaining reason for charge failure if available.
  */
 failure_message?: string | null
 /**
  * @description Information on fraud assessments for the charge.
  */
 fraud_details?: Schemas.charge_fraud_details | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'charge'
 /**
  * @description The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers) for details.
  */
 on_behalf_of?: (string | Schemas.account) | null
 /**
  * @description Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details.
  */
 outcome?: Schemas.charge_outcome | null
 /**
  * @description `true` if the charge succeeded, or was successfully authorized for later capture.
  */
 paid: boolean
 /**
  * @description ID of the PaymentIntent associated with this charge, if one exists.
  */
 payment_intent?: (string | Schemas.payment_intent) | null
 /**
  * @description ID of the payment method used in this charge.
  */
 payment_method?: string | null
 /**
  * @description Details about the payment method at the time of the transaction.
  */
 payment_method_details?: Schemas.payment_method_details | null
 /**
  * @title PaymentFlowsPaymentIntentPresentmentDetails
  */
 presentment_details?: Schemas.payment_flows_payment_intent_presentment_details
 /**
  * @title RadarRadarOptions
  * @description Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information.
  */
 radar_options?: Schemas.radar_radar_options
 /**
  * @description This is the email address that the receipt for this charge was sent to.
  */
 receipt_email?: string | null
 /**
  * @description This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent.
  */
 receipt_number?: string | null
 /**
  * @description This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.
  */
 receipt_url?: string | null
 /**
  * @description Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.
  */
 refunded: boolean
 /**
  * @title RefundList
  * @description A list of refunds that have been applied to the charge.
  */
 refunds?: {
  /**
   * @description Details about each object.
   */
  data: Schemas.refund[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 } | null
 /**
  * @description ID of the review associated with this charge if one exists.
  */
 review?: (string | Schemas.review) | null
 /**
  * @description Shipping information for the charge.
  */
 shipping?: Schemas.shipping | null
 /**
  * @description The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://docs.stripe.com/connect/destination-charges) for details.
  */
 source_transfer?: (string | Schemas.transfer) | null
 /**
  * @description For a non-card charge, text that appears on the customer's statement as the statement descriptor. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
  * 
  * For a card charge, this value is ignored unless you don't specify a `statement_descriptor_suffix`, in which case this value is used as the suffix.
  */
 statement_descriptor?: string | null
 /**
  * @description Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. If the account has no prefix value, the suffix is concatenated to the account's statement descriptor.
  */
 statement_descriptor_suffix?: string | null
 /**
  * @description The status of the payment is either `succeeded`, `pending`, or `failed`.
  */
 status: ('failed' | 'pending' | 'succeeded')
 /**
  * @description ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter).
  */
 transfer?: (string | Schemas.transfer)
 /**
  * @description An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
  */
 transfer_data?: Schemas.charge_transfer_data | null
 /**
  * @description A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.
  */
 transfer_group?: string | null
}

/**
 * @title ChargeFraudDetails
 */
export type charge_fraud_details = {
 /**
  * @description Assessments from Stripe. If set, the value is `fraudulent`.
  */
 stripe_report?: string
 /**
  * @description Assessments reported by you. If set, possible values of are `safe` and `fraudulent`.
  */
 user_report?: string
}

/**
 * @title ChargeOutcome
 */
export type charge_outcome = {
 /**
  * @description An enumerated value providing a more detailed explanation on [how to proceed with an error](https://stripe.com/docs/declines#retrying-issuer-declines).
  */
 advice_code?: ('confirm_card_data' | 'do_not_try_again' | 'try_again_later') | null
 /**
  * @description For charges declined by the network, a 2 digit code which indicates the advice returned by the network on how to proceed with an error.
  */
 network_advice_code?: string | null
 /**
  * @description For charges declined by the network, an alphanumeric code which indicates the reason the charge failed.
  */
 network_decline_code?: string | null
 /**
  * @description Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement.
  */
 network_status?: string | null
 /**
  * @description An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges blocked because the payment is unlikely to be authorized have the value `low_probability_of_authorization`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details.
  */
 reason?: string | null
 /**
  * @description Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar.
  */
 risk_level?: string
 /**
  * @description Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams.
  */
 risk_score?: number
 /**
  * @description The ID of the Radar rule that matched the payment, if applicable.
  */
 rule?: (string | Schemas.rule)
 /**
  * @description A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer.
  */
 seller_message?: string | null
 /**
  * @description Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details.
  */
 type: string
}

/**
 * @title ChargeTransferData
 */
export type charge_transfer_data = {
 /**
  * @description The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account.
  */
 amount?: number | null
 /**
  * @description ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request.
  */
 destination: (string | Schemas.account)
}

/**
 * @title Session
 * @description A Checkout Session represents your customer's session as they pay for
 * one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout)
 * or [Payment Links](https://stripe.com/docs/payments/payment-links). We recommend creating a
 * new Session each time your customer attempts to pay.
 * 
 * Once payment is successful, the Checkout Session will contain a reference
 * to the [Customer](https://stripe.com/docs/api/customers), and either the successful
 * [PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active
 * [Subscription](https://stripe.com/docs/api/subscriptions).
 * 
 * You can create a Checkout Session on your server and redirect to its URL
 * to begin Checkout.
 * 
 * Related guide: [Checkout quickstart](https://stripe.com/docs/checkout/quickstart)
 */
export type checkoutsession = {
 /**
  * @description Settings for price localization with [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing).
  */
 adaptive_pricing?: Schemas.payment_pages_checkout_session_adaptive_pricing | null
 /**
  * @description When set, provides configuration for actions to take if this Checkout Session expires.
  */
 after_expiration?: Schemas.payment_pages_checkout_session_after_expiration | null
 /**
  * @description Enables user redeemable promotion codes.
  */
 allow_promotion_codes?: boolean | null
 /**
  * @description Total of all items before discounts or taxes are applied.
  */
 amount_subtotal?: number | null
 /**
  * @description Total of all items after discounts and taxes are applied.
  */
 amount_total?: number | null
 /**
  * @title PaymentPagesCheckoutSessionAutomaticTax
  */
 automatic_tax: Schemas.payment_pages_checkout_session_automatic_tax
 /**
  * @description Describes whether Checkout should collect the customer's billing address. Defaults to `auto`.
  */
 billing_address_collection?: ('auto' | 'required') | null
 /**
  * @description If set, Checkout displays a back button and customers will be directed to this URL if they decide to cancel payment and return to your website.
  */
 cancel_url?: string | null
 /**
  * @description A unique string to reference the Checkout Session. This can be a
  * customer ID, a cart ID, or similar, and can be used to reconcile the
  * Session with your internal systems.
  */
 client_reference_id?: string | null
 /**
  * @description The client secret of your Checkout Session. Applies to Checkout Sessions with `ui_mode: embedded` or `ui_mode: custom`. For `ui_mode: embedded`, the client secret is to be used when initializing Stripe.js embedded checkout.
  *  For `ui_mode: custom`, use the client secret with [initCheckout](https://stripe.com/docs/js/custom_checkout/init) on your front end.
  */
 client_secret?: string | null
 /**
  * @description Information about the customer collected within the Checkout Session.
  */
 collected_information?: Schemas.payment_pages_checkout_session_collected_information | null
 /**
  * @description Results of `consent_collection` for this session.
  */
 consent?: Schemas.payment_pages_checkout_session_consent | null
 /**
  * @description When set, provides configuration for the Checkout Session to gather active consent from customers.
  */
 consent_collection?: Schemas.payment_pages_checkout_session_consent_collection | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency?: string | null
 /**
  * @description Currency conversion details for [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing) sessions created before 2025-03-31.
  */
 currency_conversion?: Schemas.payment_pages_checkout_session_currency_conversion | null
 /**
  * @description Collect additional information from your customer using custom fields. Up to 3 fields are supported.
  */
 custom_fields: Schemas.payment_pages_checkout_session_custom_fields[]
 /**
  * @title PaymentPagesCheckoutSessionCustomText
  */
 custom_text: Schemas.payment_pages_checkout_session_custom_text
 /**
  * @description The ID of the customer for this Session.
  * For Checkout Sessions in `subscription` mode or Checkout Sessions with `customer_creation` set as `always` in `payment` mode, Checkout
  * will create a new customer object based on information provided
  * during the payment flow unless an existing customer was provided when
  * the Session was created.
  */
 customer?: (string | Schemas.customer | Schemas.deleted_customer) | null
 /**
  * @description Configure whether a Checkout Session creates a Customer when the Checkout Session completes.
  */
 customer_creation?: ('always' | 'if_required') | null
 /**
  * @description The customer details including the customer's tax exempt status and the customer's tax IDs. Customer's address details are not present on Sessions in `setup` mode.
  */
 customer_details?: Schemas.payment_pages_checkout_session_customer_details | null
 /**
  * @description If provided, this value will be used when the Customer object is created.
  * If not provided, customers will be asked to enter their email address.
  * Use this parameter to prefill customer data if you already have an email
  * on file. To access information about the customer once the payment flow is
  * complete, use the `customer` attribute.
  */
 customer_email?: string | null
 /**
  * @description List of coupons and promotion codes attached to the Checkout Session.
  */
 discounts?: Schemas.payment_pages_checkout_session_discount[] | null
 /**
  * @description The timestamp at which the Checkout Session will expire.
  */
 expires_at: number
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description ID of the invoice created by the Checkout Session, if it exists.
  */
 invoice?: (string | Schemas.invoice) | null
 /**
  * @description Details on the state of invoice creation for the Checkout Session.
  */
 invoice_creation?: Schemas.payment_pages_checkout_session_invoice_creation | null
 /**
  * @title PaymentPagesCheckoutSessionListLineItems
  * @description The line items purchased by the customer.
  */
 line_items?: {
  /**
   * @description Details about each object.
   */
  data: Schemas.item[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 }
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
  */
 locale?: ('auto' | 'bg' | 'cs' | 'da' | 'de' | 'el' | 'en' | 'en-GB' | 'es' | 'es-419' | 'et' | 'fi' | 'fil' | 'fr' | 'fr-CA' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'ko' | 'lt' | 'lv' | 'ms' | 'mt' | 'nb' | 'nl' | 'pl' | 'pt' | 'pt-BR' | 'ro' | 'ru' | 'sk' | 'sl' | 'sv' | 'th' | 'tr' | 'vi' | 'zh' | 'zh-HK' | 'zh-TW') | null
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description The mode of the Checkout Session.
  */
 mode: ('payment' | 'setup' | 'subscription')
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'checkout.session'
 /**
  * @description The optional items presented to the customer at checkout.
  */
 optional_items?: Schemas.payment_pages_checkout_session_optional_item[] | null
 /**
  * @description Where the user is coming from. This informs the optimizations that are applied to the session.
  */
 origin_context?: ('mobile_app' | 'web') | null
 /**
  * @description The ID of the PaymentIntent for Checkout Sessions in `payment` mode. You can't confirm or cancel the PaymentIntent for a Checkout Session. To cancel, [expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead.
  */
 payment_intent?: (string | Schemas.payment_intent) | null
 /**
  * @description The ID of the Payment Link that created this Session.
  */
 payment_link?: (string | Schemas.payment_link) | null
 /**
  * @description Configure whether a Checkout Session should collect a payment method. Defaults to `always`.
  */
 payment_method_collection?: ('always' | 'if_required') | null
 /**
  * @description Information about the payment method configuration used for this Checkout session if using dynamic payment methods.
  */
 payment_method_configuration_details?: Schemas.payment_method_config_biz_payment_method_configuration_details | null
 /**
  * @description Payment-method-specific configuration for the PaymentIntent or SetupIntent of this CheckoutSession.
  */
 payment_method_options?: Schemas.checkout_session_payment_method_options | null
 /**
  * @description A list of the types of payment methods (e.g. card) this Checkout
  * Session is allowed to accept.
  */
 payment_method_types: string[]
 /**
  * @description The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.
  * You can use this value to decide when to fulfill your customer's order.
  */
 payment_status: ('no_payment_required' | 'paid' | 'unpaid')
 /**
  * @description This property is used to set up permissions for various actions (e.g., update) on the CheckoutSession object.
  * 
  * For specific permissions, please refer to their dedicated subsections, such as `permissions.update_shipping_details`.
  */
 permissions?: Schemas.payment_pages_checkout_session_permissions | null
 /**
  * @title PaymentPagesCheckoutSessionPhoneNumberCollection
  */
 phone_number_collection?: Schemas.payment_pages_checkout_session_phone_number_collection
 /**
  * @title PaymentFlowsPaymentIntentPresentmentDetails
  */
 presentment_details?: Schemas.payment_flows_payment_intent_presentment_details
 /**
  * @description The ID of the original expired Checkout Session that triggered the recovery flow.
  */
 recovered_from?: string | null
 /**
  * @description This parameter applies to `ui_mode: embedded`. Learn more about the [redirect behavior](https://stripe.com/docs/payments/checkout/custom-success-page?payment-ui=embedded-form) of embedded sessions. Defaults to `always`.
  */
 redirect_on_completion?: ('always' | 'if_required' | 'never')
 /**
  * @description Applies to Checkout Sessions with `ui_mode: embedded` or `ui_mode: custom`. The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site.
  */
 return_url?: string
 /**
  * @description Controls saved payment method settings for the session. Only available in `payment` and `subscription` mode.
  */
 saved_payment_method_options?: Schemas.payment_pages_checkout_session_saved_payment_method_options | null
 /**
  * @description The ID of the SetupIntent for Checkout Sessions in `setup` mode. You can't confirm or cancel the SetupIntent for a Checkout Session. To cancel, [expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead.
  */
 setup_intent?: (string | Schemas.setup_intent) | null
 /**
  * @description When set, provides configuration for Checkout to collect a shipping address from a customer.
  */
 shipping_address_collection?: Schemas.payment_pages_checkout_session_shipping_address_collection | null
 /**
  * @description The details of the customer cost of shipping, including the customer chosen ShippingRate.
  */
 shipping_cost?: Schemas.payment_pages_checkout_session_shipping_cost | null
 /**
  * @description The shipping rate options applied to this Session.
  */
 shipping_options: Schemas.payment_pages_checkout_session_shipping_option[]
 /**
  * @description The status of the Checkout Session, one of `open`, `complete`, or `expired`.
  */
 status?: ('complete' | 'expired' | 'open') | null
 /**
  * @description Describes the type of transaction being performed by Checkout in order to customize
  * relevant text on the page, such as the submit button. `submit_type` can only be
  * specified on Checkout Sessions in `payment` mode. If blank or `auto`, `pay` is used.
  */
 submit_type?: ('auto' | 'book' | 'donate' | 'pay' | 'subscribe') | null
 /**
  * @description The ID of the [Subscription](https://stripe.com/docs/api/subscriptions) for Checkout Sessions in `subscription` mode.
  */
 subscription?: (string | Schemas.subscription) | null
 /**
  * @description The URL the customer will be directed to after the payment or
  * subscription creation is successful.
  */
 success_url?: string | null
 /**
  * @title PaymentPagesCheckoutSessionTaxIDCollection
  */
 tax_id_collection?: Schemas.payment_pages_checkout_session_tax_id_collection
 /**
  * @description Tax and discount details for the computed total amount.
  */
 total_details?: Schemas.payment_pages_checkout_session_total_details | null
 /**
  * @description The UI mode of the Session. Defaults to `hosted`.
  */
 ui_mode?: ('custom' | 'embedded' | 'hosted') | null
 /**
  * @description The URL to the Checkout Session. Applies to Checkout Sessions with `ui_mode: hosted`. Redirect customers to this URL to take them to Checkout. If you’re using [Custom Domains](https://stripe.com/docs/payments/checkout/custom-domains), the URL will use your subdomain. Otherwise, it’ll use `checkout.stripe.com.`
  * This value is only present when the session is active.
  */
 url?: string | null
 /**
  * @description Wallet-specific configuration for this Checkout Session.
  */
 wallet_options?: Schemas.checkout_session_wallet_options | null
}

/**
 * @title CheckoutAcssDebitMandateOptions
 */
export type checkout_acss_debit_mandate_options = {
 /**
  * @description A URL for custom mandate text
  */
 custom_mandate_url?: string
 /**
  * @description List of Stripe products where this mandate can be selected automatically. Returned when the Session is in `setup` mode.
  */
 default_for?: ('invoice' | 'subscription')[]
 /**
  * @description Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
  */
 interval_description?: string | null
 /**
  * @description Payment schedule for the mandate.
  */
 payment_schedule?: ('combined' | 'interval' | 'sporadic') | null
 /**
  * @description Transaction type of the mandate.
  */
 transaction_type?: ('business' | 'personal') | null
}

/**
 * @title CheckoutAcssDebitPaymentMethodOptions
 */
export type checkout_acss_debit_payment_method_options = {
 /**
  * @description Currency supported by the bank account. Returned when the Session is in `setup` mode.
  */
 currency?: ('cad' | 'usd')
 /**
  * @title CheckoutAcssDebitMandateOptions
  */
 mandate_options?: Schemas.checkout_acss_debit_mandate_options
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session' | 'on_session')
 /**
  * @description Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
  */
 target_date?: string
 /**
  * @description Bank account verification method.
  */
 verification_method?: ('automatic' | 'instant' | 'microdeposits')
}

/**
 * @title CheckoutAffirmPaymentMethodOptions
 */
export type checkout_affirm_payment_method_options = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title CheckoutAfterpayClearpayPaymentMethodOptions
 */
export type checkout_afterpay_clearpay_payment_method_options = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title CheckoutAlipayPaymentMethodOptions
 */
export type checkout_alipay_payment_method_options = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title CheckoutAmazonPayPaymentMethodOptions
 */
export type checkout_amazon_pay_payment_method_options = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session')
}

/**
 * @title CheckoutAuBecsDebitPaymentMethodOptions
 */
export type checkout_au_becs_debit_payment_method_options = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
 /**
  * @description Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
  */
 target_date?: string
}

/**
 * @title CheckoutBacsDebitPaymentMethodOptions
 */
export type checkout_bacs_debit_payment_method_options = {
 /**
  * @title checkout_payment_method_options_mandate_options_bacs_debit
  */
 mandate_options?: Schemas.checkout_payment_method_options_mandate_options_bacs_debit
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session' | 'on_session')
 /**
  * @description Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
  */
 target_date?: string
}

/**
 * @title CheckoutBancontactPaymentMethodOptions
 */
export type checkout_bancontact_payment_method_options = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title CheckoutBoletoPaymentMethodOptions
 */
export type checkout_boleto_payment_method_options = {
 /**
  * @description The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time.
  */
 expires_after_days: number
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session' | 'on_session')
}

/**
 * @title CheckoutCardInstallmentsOptions
 */
export type checkout_card_installments_options = {
 /**
  * @description Indicates if installments are enabled
  */
 enabled?: boolean
}

/**
 * @title CheckoutCardPaymentMethodOptions
 */
export type checkout_card_payment_method_options = {
 /**
  * @title CheckoutCardInstallmentsOptions
  */
 installments?: Schemas.checkout_card_installments_options
 /**
  * @description Request ability to [capture beyond the standard authorization validity window](/payments/extended-authorization) for this CheckoutSession.
  */
 request_extended_authorization?: ('if_available' | 'never')
 /**
  * @description Request ability to [increment the authorization](/payments/incremental-authorization) for this CheckoutSession.
  */
 request_incremental_authorization?: ('if_available' | 'never')
 /**
  * @description Request ability to make [multiple captures](/payments/multicapture) for this CheckoutSession.
  */
 request_multicapture?: ('if_available' | 'never')
 /**
  * @description Request ability to [overcapture](/payments/overcapture) for this CheckoutSession.
  */
 request_overcapture?: ('if_available' | 'never')
 /**
  * @description We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  */
 request_three_d_secure: ('any' | 'automatic' | 'challenge')
 /**
  * @title PaymentPagesPrivateCardPaymentMethodOptionsResourceRestrictions
  */
 restrictions?: Schemas.payment_pages_private_card_payment_method_options_resource_restrictions
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session' | 'on_session')
 /**
  * @description Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters.
  */
 statement_descriptor_suffix_kana?: string
 /**
  * @description Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters.
  */
 statement_descriptor_suffix_kanji?: string
}

/**
 * @title CheckoutCashappPaymentMethodOptions
 */
export type checkout_cashapp_payment_method_options = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title CheckoutCustomerBalanceBankTransferPaymentMethodOptions
 */
export type checkout_customer_balance_bank_transfer_payment_method_options = {
 /**
  * @title payment_method_options_customer_balance_eu_bank_account
  */
 eu_bank_transfer?: Schemas.payment_method_options_customer_balance_eu_bank_account
 /**
  * @description List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned.
  * 
  * Permitted values include: `sort_code`, `zengin`, `iban`, or `spei`.
  */
 requested_address_types?: ('aba' | 'iban' | 'sepa' | 'sort_code' | 'spei' | 'swift' | 'zengin')[]
 /**
  * @description The bank transfer type that this PaymentIntent is allowed to use for funding Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
  */
 type?: ('eu_bank_transfer' | 'gb_bank_transfer' | 'jp_bank_transfer' | 'mx_bank_transfer' | 'us_bank_transfer') | null
}

/**
 * @title CheckoutCustomerBalancePaymentMethodOptions
 */
export type checkout_customer_balance_payment_method_options = {
 /**
  * @title CheckoutCustomerBalanceBankTransferPaymentMethodOptions
  */
 bank_transfer?: Schemas.checkout_customer_balance_bank_transfer_payment_method_options
 /**
  * @description The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
  */
 funding_type?: 'bank_transfer' | null
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title CheckoutEpsPaymentMethodOptions
 */
export type checkout_eps_payment_method_options = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title CheckoutFpxPaymentMethodOptions
 */
export type checkout_fpx_payment_method_options = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title CheckoutGiropayPaymentMethodOptions
 */
export type checkout_giropay_payment_method_options = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title CheckoutGrabPayPaymentMethodOptions
 */
export type checkout_grab_pay_payment_method_options = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title CheckoutIdealPaymentMethodOptions
 */
export type checkout_ideal_payment_method_options = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title CheckoutKakaoPayPaymentMethodOptions
 */
export type checkout_kakao_pay_payment_method_options = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session')
}

/**
 * @title CheckoutKlarnaPaymentMethodOptions
 */
export type checkout_klarna_payment_method_options = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session' | 'on_session')
}

/**
 * @title CheckoutKonbiniPaymentMethodOptions
 */
export type checkout_konbini_payment_method_options = {
 /**
  * @description The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST.
  */
 expires_after_days?: number | null
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title CheckoutKrCardPaymentMethodOptions
 */
export type checkout_kr_card_payment_method_options = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session')
}

/**
 * @title CheckoutLinkPaymentMethodOptions
 */
export type checkout_link_payment_method_options = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session')
}

/**
 * @title CheckoutLinkWalletOptions
 */
export type checkout_link_wallet_options = {
 /**
  * @description Describes whether Checkout should display Link. Defaults to `auto`.
  */
 display?: ('auto' | 'never')
}

/**
 * @title CheckoutMobilepayPaymentMethodOptions
 */
export type checkout_mobilepay_payment_method_options = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title CheckoutMultibancoPaymentMethodOptions
 */
export type checkout_multibanco_payment_method_options = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title CheckoutNaverPayPaymentMethodOptions
 */
export type checkout_naver_pay_payment_method_options = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session')
}

/**
 * @title CheckoutOxxoPaymentMethodOptions
 */
export type checkout_oxxo_payment_method_options = {
 /**
  * @description The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.
  */
 expires_after_days: number
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title CheckoutP24PaymentMethodOptions
 */
export type checkout_p24_payment_method_options = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title CheckoutPaycoPaymentMethodOptions
 */
export type checkout_payco_payment_method_options = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
}

/**
 * @title checkout_payment_method_options_mandate_options_bacs_debit
 */
export type checkout_payment_method_options_mandate_options_bacs_debit = {
 /**
  * @description Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'DDIC' or 'STRIPE'.
  */
 reference_prefix?: string
}

/**
 * @title checkout_payment_method_options_mandate_options_sepa_debit
 */
export type checkout_payment_method_options_mandate_options_sepa_debit = {
 /**
  * @description Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'STRIPE'.
  */
 reference_prefix?: string
}

/**
 * @title CheckoutPaynowPaymentMethodOptions
 */
export type checkout_paynow_payment_method_options = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title CheckoutPaypalPaymentMethodOptions
 */
export type checkout_paypal_payment_method_options = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
 /**
  * @description Preferred locale of the PayPal checkout page that the customer is redirected to.
  */
 preferred_locale?: string | null
 /**
  * @description A reference of the PayPal transaction visible to customer which is mapped to PayPal's invoice ID. This must be a globally unique ID if you have configured in your PayPal settings to block multiple payments per invoice ID.
  */
 reference?: string | null
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session')
}

/**
 * @title CheckoutPixPaymentMethodOptions
 */
export type checkout_pix_payment_method_options = {
 /**
  * @description Determines if the amount includes the IOF tax.
  */
 amount_includes_iof?: ('always' | 'never')
 /**
  * @description The number of seconds after which Pix payment will expire.
  */
 expires_after_seconds?: number | null
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title CheckoutRevolutPayPaymentMethodOptions
 */
export type checkout_revolut_pay_payment_method_options = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session')
}

/**
 * @title CheckoutSamsungPayPaymentMethodOptions
 */
export type checkout_samsung_pay_payment_method_options = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
}

/**
 * @title CheckoutSepaDebitPaymentMethodOptions
 */
export type checkout_sepa_debit_payment_method_options = {
 /**
  * @title checkout_payment_method_options_mandate_options_sepa_debit
  */
 mandate_options?: Schemas.checkout_payment_method_options_mandate_options_sepa_debit
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session' | 'on_session')
 /**
  * @description Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
  */
 target_date?: string
}

/**
 * @title CheckoutSessionPaymentMethodOptions
 */
export type checkout_session_payment_method_options = {
 /**
  * @title CheckoutAcssDebitPaymentMethodOptions
  */
 acss_debit?: Schemas.checkout_acss_debit_payment_method_options
 /**
  * @title CheckoutAffirmPaymentMethodOptions
  */
 affirm?: Schemas.checkout_affirm_payment_method_options
 /**
  * @title CheckoutAfterpayClearpayPaymentMethodOptions
  */
 afterpay_clearpay?: Schemas.checkout_afterpay_clearpay_payment_method_options
 /**
  * @title CheckoutAlipayPaymentMethodOptions
  */
 alipay?: Schemas.checkout_alipay_payment_method_options
 /**
  * @title CheckoutAmazonPayPaymentMethodOptions
  */
 amazon_pay?: Schemas.checkout_amazon_pay_payment_method_options
 /**
  * @title CheckoutAuBecsDebitPaymentMethodOptions
  */
 au_becs_debit?: Schemas.checkout_au_becs_debit_payment_method_options
 /**
  * @title CheckoutBacsDebitPaymentMethodOptions
  */
 bacs_debit?: Schemas.checkout_bacs_debit_payment_method_options
 /**
  * @title CheckoutBancontactPaymentMethodOptions
  */
 bancontact?: Schemas.checkout_bancontact_payment_method_options
 /**
  * @title CheckoutBoletoPaymentMethodOptions
  */
 boleto?: Schemas.checkout_boleto_payment_method_options
 /**
  * @title CheckoutCardPaymentMethodOptions
  */
 card?: Schemas.checkout_card_payment_method_options
 /**
  * @title CheckoutCashappPaymentMethodOptions
  */
 cashapp?: Schemas.checkout_cashapp_payment_method_options
 /**
  * @title CheckoutCustomerBalancePaymentMethodOptions
  */
 customer_balance?: Schemas.checkout_customer_balance_payment_method_options
 /**
  * @title CheckoutEpsPaymentMethodOptions
  */
 eps?: Schemas.checkout_eps_payment_method_options
 /**
  * @title CheckoutFpxPaymentMethodOptions
  */
 fpx?: Schemas.checkout_fpx_payment_method_options
 /**
  * @title CheckoutGiropayPaymentMethodOptions
  */
 giropay?: Schemas.checkout_giropay_payment_method_options
 /**
  * @title CheckoutGrabPayPaymentMethodOptions
  */
 grabpay?: Schemas.checkout_grab_pay_payment_method_options
 /**
  * @title CheckoutIdealPaymentMethodOptions
  */
 ideal?: Schemas.checkout_ideal_payment_method_options
 /**
  * @title CheckoutKakaoPayPaymentMethodOptions
  */
 kakao_pay?: Schemas.checkout_kakao_pay_payment_method_options
 /**
  * @title CheckoutKlarnaPaymentMethodOptions
  */
 klarna?: Schemas.checkout_klarna_payment_method_options
 /**
  * @title CheckoutKonbiniPaymentMethodOptions
  */
 konbini?: Schemas.checkout_konbini_payment_method_options
 /**
  * @title CheckoutKrCardPaymentMethodOptions
  */
 kr_card?: Schemas.checkout_kr_card_payment_method_options
 /**
  * @title CheckoutLinkPaymentMethodOptions
  */
 link?: Schemas.checkout_link_payment_method_options
 /**
  * @title CheckoutMobilepayPaymentMethodOptions
  */
 mobilepay?: Schemas.checkout_mobilepay_payment_method_options
 /**
  * @title CheckoutMultibancoPaymentMethodOptions
  */
 multibanco?: Schemas.checkout_multibanco_payment_method_options
 /**
  * @title CheckoutNaverPayPaymentMethodOptions
  */
 naver_pay?: Schemas.checkout_naver_pay_payment_method_options
 /**
  * @title CheckoutOxxoPaymentMethodOptions
  */
 oxxo?: Schemas.checkout_oxxo_payment_method_options
 /**
  * @title CheckoutP24PaymentMethodOptions
  */
 p24?: Schemas.checkout_p24_payment_method_options
 /**
  * @title CheckoutPaycoPaymentMethodOptions
  */
 payco?: Schemas.checkout_payco_payment_method_options
 /**
  * @title CheckoutPaynowPaymentMethodOptions
  */
 paynow?: Schemas.checkout_paynow_payment_method_options
 /**
  * @title CheckoutPaypalPaymentMethodOptions
  */
 paypal?: Schemas.checkout_paypal_payment_method_options
 /**
  * @title CheckoutPixPaymentMethodOptions
  */
 pix?: Schemas.checkout_pix_payment_method_options
 /**
  * @title CheckoutRevolutPayPaymentMethodOptions
  */
 revolut_pay?: Schemas.checkout_revolut_pay_payment_method_options
 /**
  * @title CheckoutSamsungPayPaymentMethodOptions
  */
 samsung_pay?: Schemas.checkout_samsung_pay_payment_method_options
 /**
  * @title CheckoutSepaDebitPaymentMethodOptions
  */
 sepa_debit?: Schemas.checkout_sepa_debit_payment_method_options
 /**
  * @title CheckoutSofortPaymentMethodOptions
  */
 sofort?: Schemas.checkout_sofort_payment_method_options
 /**
  * @title CheckoutSwishPaymentMethodOptions
  */
 swish?: Schemas.checkout_swish_payment_method_options
 /**
  * @title CheckoutUsBankAccountPaymentMethodOptions
  */
 us_bank_account?: Schemas.checkout_us_bank_account_payment_method_options
}

/**
 * @title CheckoutSessionWalletOptions
 */
export type checkout_session_wallet_options = {
 /**
  * @title CheckoutLinkWalletOptions
  */
 link?: Schemas.checkout_link_wallet_options
}

/**
 * @title CheckoutSofortPaymentMethodOptions
 */
export type checkout_sofort_payment_method_options = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title CheckoutSwishPaymentMethodOptions
 */
export type checkout_swish_payment_method_options = {
 /**
  * @description The order reference that will be displayed to customers in the Swish application. Defaults to the `id` of the Payment Intent.
  */
 reference?: string | null
}

/**
 * @title CheckoutUsBankAccountPaymentMethodOptions
 */
export type checkout_us_bank_account_payment_method_options = {
 /**
  * @title linked_account_options_common
  */
 financial_connections?: Schemas.linked_account_options_common
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session' | 'on_session')
 /**
  * @description Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
  */
 target_date?: string
 /**
  * @description Bank account verification method.
  */
 verification_method?: ('automatic' | 'instant')
}

/**
 * @title ClimateRemovalsOrders
 * @description Orders represent your intent to purchase a particular Climate product. When you create an order, the
 * payment is deducted from your merchant balance.
 */
export type climateorder = {
 /**
  * @description Total amount of [Frontier](https://frontierclimate.com/)'s service fees in the currency's smallest unit.
  */
 amount_fees: number
 /**
  * @description Total amount of the carbon removal in the currency's smallest unit.
  */
 amount_subtotal: number
 /**
  * @description Total amount of the order including fees in the currency's smallest unit.
  */
 amount_total: number
 /**
  * @title ClimateRemovalsBeneficiary
  */
 beneficiary?: Schemas.climate_removals_beneficiary
 /**
  * @description Time at which the order was canceled. Measured in seconds since the Unix epoch.
  */
 canceled_at?: number | null
 /**
  * @description Reason for the cancellation of this order.
  */
 cancellation_reason?: ('expired' | 'product_unavailable' | 'requested') | null
 /**
  * @description For delivered orders, a URL to a delivery certificate for the order.
  */
 certificate?: string | null
 /**
  * @description Time at which the order was confirmed. Measured in seconds since the Unix epoch.
  */
 confirmed_at?: number | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase, representing the currency for this order.
  */
 currency: string
 /**
  * @description Time at which the order's expected_delivery_year was delayed. Measured in seconds since the Unix epoch.
  */
 delayed_at?: number | null
 /**
  * @description Time at which the order was delivered. Measured in seconds since the Unix epoch.
  */
 delivered_at?: number | null
 /**
  * @description Details about the delivery of carbon removal for this order.
  */
 delivery_details: Schemas.climate_removals_order_deliveries[]
 /**
  * @description The year this order is expected to be delivered.
  */
 expected_delivery_year: number
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description Quantity of carbon removal that is included in this order.
  */
 metric_tons: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'climate.order'
 /**
  * @description Unique ID for the Climate `Product` this order is purchasing.
  */
 product: (string | Schemas.climateproduct)
 /**
  * @description Time at which the order's product was substituted for a different product. Measured in seconds since the Unix epoch.
  */
 product_substituted_at?: number | null
 /**
  * @description The current status of this order.
  */
 status: ('awaiting_funds' | 'canceled' | 'confirmed' | 'delivered' | 'open')
}

/**
 * @title ClimateRemovalsProducts
 * @description A Climate product represents a type of carbon removal unit available for reservation.
 * You can retrieve it to see the current price and availability.
 */
export type climateproduct = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Current prices for a metric ton of carbon removal in a currency's smallest unit.
  */
 current_prices_per_metric_ton: Record<string, Schemas.climate_removals_products_price>
 /**
  * @description The year in which the carbon removal is expected to be delivered.
  */
 delivery_year?: number | null
 /**
  * @description Unique identifier for the object. For convenience, Climate product IDs are human-readable strings
  * that start with `climsku_`. See [carbon removal inventory](https://stripe.com/docs/climate/orders/carbon-removal-inventory)
  * for a list of available carbon removal products.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description The quantity of metric tons available for reservation.
  */
 metric_tons_available: string
 /**
  * @description The Climate product's name.
  */
 name: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'climate.product'
 /**
  * @description The carbon removal suppliers that fulfill orders for this Climate product.
  */
 suppliers: Schemas.climatesupplier[]
}

/**
 * @title ClimateRemovalsSuppliers
 * @description A supplier of carbon removal.
 */
export type climatesupplier = {
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Link to a webpage to learn more about the supplier.
  */
 info_url: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description The locations in which this supplier operates.
  */
 locations: Schemas.climate_removals_location[]
 /**
  * @description Name of this carbon removal supplier.
  */
 name: string
 /**
  * @description String representing the object’s type. Objects of the same type share the same value.
  */
 object: 'climate.supplier'
 /**
  * @description The scientific pathway used for carbon removal.
  */
 removal_pathway: ('biomass_carbon_removal_and_storage' | 'direct_air_capture' | 'enhanced_weathering')
}

/**
 * @title ClimateRemovalsBeneficiary
 */
export type climate_removals_beneficiary = {
 /**
  * @description Publicly displayable name for the end beneficiary of carbon removal.
  */
 public_name: string
}

/**
 * @title ClimateRemovalsLocation
 */
export type climate_removals_location = {
 /**
  * @description The city where the supplier is located.
  */
 city?: string | null
 /**
  * @description Two-letter ISO code representing the country where the supplier is located.
  */
 country: string
 /**
  * @description The geographic latitude where the supplier is located.
  */
 latitude?: number | null
 /**
  * @description The geographic longitude where the supplier is located.
  */
 longitude?: number | null
 /**
  * @description The state/county/province/region where the supplier is located.
  */
 region?: string | null
}

/**
 * @title ClimateRemovalsOrderDeliveries
 * @description The delivery of a specified quantity of carbon for an order.
 */
export type climate_removals_order_deliveries = {
 /**
  * @description Time at which the delivery occurred. Measured in seconds since the Unix epoch.
  */
 delivered_at: number
 /**
  * @description Specific location of this delivery.
  */
 location?: Schemas.climate_removals_location | null
 /**
  * @description Quantity of carbon removal supplied by this delivery.
  */
 metric_tons: string
 /**
  * @description Once retired, a URL to the registry entry for the tons from this delivery.
  */
 registry_url?: string | null
 /**
  * @title ClimateRemovalsSuppliers
  * @description A supplier of carbon removal.
  */
 supplier: Schemas.climatesupplier
}

/**
 * @title ClimateRemovalsProductsPrice
 */
export type climate_removals_products_price = {
 /**
  * @description Fees for one metric ton of carbon removal in the currency's smallest unit.
  */
 amount_fees: number
 /**
  * @description Subtotal for one metric ton of carbon removal (excluding fees) in the currency's smallest unit.
  */
 amount_subtotal: number
 /**
  * @description Total for one metric ton of carbon removal (including fees) in the currency's smallest unit.
  */
 amount_total: number
}

/**
 * @title ConfirmationTokensResourceConfirmationToken
 * @description ConfirmationTokens help transport client side data collected by Stripe JS over
 * to your server for confirming a PaymentIntent or SetupIntent. If the confirmation
 * is successful, values present on the ConfirmationToken are written onto the Intent.
 * 
 * To learn more about how to use ConfirmationToken, visit the related guides:
 * - [Finalize payments on the server](https://stripe.com/docs/payments/finalize-payments-on-the-server)
 * - [Build two-step confirmation](https://stripe.com/docs/payments/build-a-two-step-confirmation).
 */
export type confirmation_token = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Time at which this ConfirmationToken expires and can no longer be used to confirm a PaymentIntent or SetupIntent.
  */
 expires_at?: number | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Data used for generating a Mandate.
  */
 mandate_data?: Schemas.confirmation_tokens_resource_mandate_data | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'confirmation_token'
 /**
  * @description ID of the PaymentIntent that this ConfirmationToken was used to confirm, or null if this ConfirmationToken has not yet been used.
  */
 payment_intent?: string | null
 /**
  * @description Payment-method-specific configuration for this ConfirmationToken.
  */
 payment_method_options?: Schemas.confirmation_tokens_resource_payment_method_options | null
 /**
  * @description Payment details collected by the Payment Element, used to create a PaymentMethod when a PaymentIntent or SetupIntent is confirmed with this ConfirmationToken.
  */
 payment_method_preview?: Schemas.confirmation_tokens_resource_payment_method_preview | null
 /**
  * @description Return URL used to confirm the Intent.
  */
 return_url?: string | null
 /**
  * @description Indicates that you intend to make future payments with this ConfirmationToken's payment method.
  * 
  * The presence of this property will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete.
  */
 setup_future_usage?: ('off_session' | 'on_session') | null
 /**
  * @description ID of the SetupIntent that this ConfirmationToken was used to confirm, or null if this ConfirmationToken has not yet been used.
  */
 setup_intent?: string | null
 /**
  * @description Shipping information collected on this ConfirmationToken.
  */
 shipping?: Schemas.confirmation_tokens_resource_shipping | null
 /**
  * @description Indicates whether the Stripe SDK is used to handle confirmation flow. Defaults to `true` on ConfirmationToken.
  */
 use_stripe_sdk: boolean
}

/**
 * @title ConfirmationTokensResourceMandateData
 * @description Data used for generating a Mandate.
 */
export type confirmation_tokens_resource_mandate_data = {
 /**
  * @title ConfirmationTokensResourceMandateDataResourceCustomerAcceptance
  * @description This hash contains details about the customer acceptance of the Mandate.
  */
 customer_acceptance: Schemas.confirmation_tokens_resource_mandate_data_resource_customer_acceptance
}

/**
 * @title ConfirmationTokensResourceMandateDataResourceCustomerAcceptance
 * @description This hash contains details about the customer acceptance of the Mandate.
 */
export type confirmation_tokens_resource_mandate_data_resource_customer_acceptance = {
 /**
  * @description If this is a Mandate accepted online, this hash contains details about the online acceptance.
  */
 online?: Schemas.confirmation_tokens_resource_mandate_data_resource_customer_acceptance_resource_online | null
 /**
  * @description The type of customer acceptance information included with the Mandate.
  */
 type: string
}

/**
 * @title ConfirmationTokensResourceMandateDataResourceCustomerAcceptanceResourceOnline
 * @description This hash contains details about the online acceptance.
 */
export type confirmation_tokens_resource_mandate_data_resource_customer_acceptance_resource_online = {
 /**
  * @description The IP address from which the Mandate was accepted by the customer.
  */
 ip_address?: string | null
 /**
  * @description The user agent of the browser from which the Mandate was accepted by the customer.
  */
 user_agent?: string | null
}

/**
 * @title ConfirmationTokensResourcePaymentMethodOptions
 * @description Payment-method-specific configuration
 */
export type confirmation_tokens_resource_payment_method_options = {
 /**
  * @description This hash contains the card payment method options.
  */
 card?: Schemas.confirmation_tokens_resource_payment_method_options_resource_card | null
}

/**
 * @title ConfirmationTokensResourcePaymentMethodOptionsResourceCard
 * @description This hash contains the card payment method options.
 */
export type confirmation_tokens_resource_payment_method_options_resource_card = {
 /**
  * @description The `cvc_update` Token collected from the Payment Element.
  */
 cvc_token?: string | null
 /**
  * @title ConfirmationTokensResourcePaymentMethodOptionsResourceCardResourceInstallment
  * @description Installment configuration for payments.
  */
 installments?: Schemas.confirmation_tokens_resource_payment_method_options_resource_card_resource_installment
}

/**
 * @title ConfirmationTokensResourcePaymentMethodOptionsResourceCardResourceInstallment
 * @description Installment configuration for payments.
 */
export type confirmation_tokens_resource_payment_method_options_resource_card_resource_installment = {
 /**
  * @title payment_method_details_card_installments_plan
  */
 plan?: Schemas.payment_method_details_card_installments_plan
}

/**
 * @title ConfirmationTokensResourcePaymentMethodPreview
 * @description Details of the PaymentMethod collected by Payment Element
 */
export type confirmation_tokens_resource_payment_method_preview = {
 /**
  * @title payment_method_acss_debit
  */
 acss_debit?: Schemas.payment_method_acss_debit
 /**
  * @title payment_method_affirm
  */
 affirm?: Schemas.payment_method_affirm
 /**
  * @title payment_method_afterpay_clearpay
  */
 afterpay_clearpay?: Schemas.payment_method_afterpay_clearpay
 /**
  * @title PaymentFlowsPrivatePaymentMethodsAlipay
  */
 alipay?: Schemas.payment_flows_private_payment_methods_alipay
 /**
  * @description This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”.
  */
 allow_redisplay?: ('always' | 'limited' | 'unspecified')
 /**
  * @title payment_method_alma
  */
 alma?: Schemas.payment_method_alma
 /**
  * @title payment_method_amazon_pay
  */
 amazon_pay?: Schemas.payment_method_amazon_pay
 /**
  * @title payment_method_au_becs_debit
  */
 au_becs_debit?: Schemas.payment_method_au_becs_debit
 /**
  * @title payment_method_bacs_debit
  */
 bacs_debit?: Schemas.payment_method_bacs_debit
 /**
  * @title payment_method_bancontact
  */
 bancontact?: Schemas.payment_method_bancontact
 /**
  * @title payment_method_billie
  */
 billie?: Schemas.payment_method_billie
 /**
  * @title billing_details
  */
 billing_details: Schemas.billing_details
 /**
  * @title payment_method_blik
  */
 blik?: Schemas.payment_method_blik
 /**
  * @title payment_method_boleto
  */
 boleto?: Schemas.payment_method_boleto
 /**
  * @title payment_method_card
  */
 card?: Schemas.payment_method_card
 /**
  * @title payment_method_card_present
  */
 card_present?: Schemas.payment_method_card_present
 /**
  * @title payment_method_cashapp
  */
 cashapp?: Schemas.payment_method_cashapp
 /**
  * @title payment_method_crypto
  */
 crypto?: Schemas.payment_method_crypto
 /**
  * @description The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.
  */
 customer?: (string | Schemas.customer) | null
 /**
  * @title payment_method_customer_balance
  */
 customer_balance?: Schemas.payment_method_customer_balance
 /**
  * @title payment_method_eps
  */
 eps?: Schemas.payment_method_eps
 /**
  * @title payment_method_fpx
  */
 fpx?: Schemas.payment_method_fpx
 /**
  * @title payment_method_giropay
  */
 giropay?: Schemas.payment_method_giropay
 /**
  * @title payment_method_grabpay
  */
 grabpay?: Schemas.payment_method_grabpay
 /**
  * @title payment_method_ideal
  */
 ideal?: Schemas.payment_method_ideal
 /**
  * @title payment_method_interac_present
  */
 interac_present?: Schemas.payment_method_interac_present
 /**
  * @title payment_method_kakao_pay
  */
 kakao_pay?: Schemas.payment_method_kakao_pay
 /**
  * @title payment_method_klarna
  */
 klarna?: Schemas.payment_method_klarna
 /**
  * @title payment_method_konbini
  */
 konbini?: Schemas.payment_method_konbini
 /**
  * @title payment_method_kr_card
  */
 kr_card?: Schemas.payment_method_kr_card
 /**
  * @title payment_method_link
  */
 link?: Schemas.payment_method_link
 /**
  * @title payment_method_mobilepay
  */
 mobilepay?: Schemas.payment_method_mobilepay
 /**
  * @title payment_method_multibanco
  */
 multibanco?: Schemas.payment_method_multibanco
 /**
  * @title payment_method_naver_pay
  */
 naver_pay?: Schemas.payment_method_naver_pay
 /**
  * @title payment_method_nz_bank_account
  */
 nz_bank_account?: Schemas.payment_method_nz_bank_account
 /**
  * @title payment_method_oxxo
  */
 oxxo?: Schemas.payment_method_oxxo
 /**
  * @title payment_method_p24
  */
 p24?: Schemas.payment_method_p24
 /**
  * @title payment_method_pay_by_bank
  */
 pay_by_bank?: Schemas.payment_method_pay_by_bank
 /**
  * @title payment_method_payco
  */
 payco?: Schemas.payment_method_payco
 /**
  * @title payment_method_paynow
  */
 paynow?: Schemas.payment_method_paynow
 /**
  * @title payment_method_paypal
  */
 paypal?: Schemas.payment_method_paypal
 /**
  * @title payment_method_pix
  */
 pix?: Schemas.payment_method_pix
 /**
  * @title payment_method_promptpay
  */
 promptpay?: Schemas.payment_method_promptpay
 /**
  * @title payment_method_revolut_pay
  */
 revolut_pay?: Schemas.payment_method_revolut_pay
 /**
  * @title payment_method_samsung_pay
  */
 samsung_pay?: Schemas.payment_method_samsung_pay
 /**
  * @title payment_method_satispay
  */
 satispay?: Schemas.payment_method_satispay
 /**
  * @title payment_method_sepa_debit
  */
 sepa_debit?: Schemas.payment_method_sepa_debit
 /**
  * @title payment_method_sofort
  */
 sofort?: Schemas.payment_method_sofort
 /**
  * @title payment_method_swish
  */
 swish?: Schemas.payment_method_swish
 /**
  * @title payment_method_twint
  */
 twint?: Schemas.payment_method_twint
 /**
  * @description The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
  */
 type: ('acss_debit' | 'affirm' | 'afterpay_clearpay' | 'alipay' | 'alma' | 'amazon_pay' | 'au_becs_debit' | 'bacs_debit' | 'bancontact' | 'billie' | 'blik' | 'boleto' | 'card' | 'card_present' | 'cashapp' | 'crypto' | 'customer_balance' | 'eps' | 'fpx' | 'giropay' | 'grabpay' | 'ideal' | 'interac_present' | 'kakao_pay' | 'klarna' | 'konbini' | 'kr_card' | 'link' | 'mobilepay' | 'multibanco' | 'naver_pay' | 'nz_bank_account' | 'oxxo' | 'p24' | 'pay_by_bank' | 'payco' | 'paynow' | 'paypal' | 'pix' | 'promptpay' | 'revolut_pay' | 'samsung_pay' | 'satispay' | 'sepa_debit' | 'sofort' | 'swish' | 'twint' | 'us_bank_account' | 'wechat_pay' | 'zip')
 /**
  * @title payment_method_us_bank_account
  */
 us_bank_account?: Schemas.payment_method_us_bank_account
 /**
  * @title payment_method_wechat_pay
  */
 wechat_pay?: Schemas.payment_method_wechat_pay
 /**
  * @title payment_method_zip
  */
 zip?: Schemas.payment_method_zip
}

/**
 * @title ConfirmationTokensResourceShipping
 */
export type confirmation_tokens_resource_shipping = {
 /**
  * @title Address
  */
 address: Schemas.address
 /**
  * @description Recipient name.
  */
 name: string
 /**
  * @description Recipient phone (including extension).
  */
 phone?: string | null
}

/**
 * @title ConnectAccountReference
 */
export type connect_account_reference = {
 /**
  * @description The connected account being referenced when `type` is `account`.
  */
 account?: (string | Schemas.account)
 /**
  * @description Type of the account referenced.
  */
 type: ('account' | 'self')
}

/**
 * @title ConnectCollectionTransfer
 */
export type connect_collection_transfer = {
 /**
  * @description Amount transferred, in cents (or local equivalent).
  */
 amount: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description ID of the account that funds are being collected for.
  */
 destination: (string | Schemas.account)
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'connect_collection_transfer'
}

/**
 * @title ConnectEmbeddedAccountConfigClaim
 */
export type connect_embedded_account_config_claim = {
 /**
  * @description Whether the embedded component is enabled.
  */
 enabled: boolean
 /**
  * @title ConnectEmbeddedAccountFeaturesClaim
  */
 features: Schemas.connect_embedded_account_features_claim
}

/**
 * @title ConnectEmbeddedAccountFeaturesClaim
 */
export type connect_embedded_account_features_claim = {
 /**
  * @description Whether Stripe user authentication is disabled. This value can only be `true` for accounts where `controller.requirement_collection` is `application` for the account. The default value is the opposite of the `external_account_collection` value. For example, if you don't set `external_account_collection`, it defaults to `true` and `disable_stripe_user_authentication` defaults to `false`.
  */
 disable_stripe_user_authentication: boolean
 /**
  * @description Whether external account collection is enabled. This feature can only be `false` for accounts where you’re responsible for collecting updated information when requirements are due or change, like Custom accounts. The default value for this feature is `true`.
  */
 external_account_collection: boolean
}

/**
 * @title ConnectEmbeddedAccountSessionCreateComponents
 */
export type connect_embedded_account_session_create_components = {
 /**
  * @title ConnectEmbeddedAccountConfigClaim
  */
 account_management: Schemas.connect_embedded_account_config_claim
 /**
  * @title ConnectEmbeddedAccountConfigClaim
  */
 account_onboarding: Schemas.connect_embedded_account_config_claim
 /**
  * @title ConnectEmbeddedBaseConfigClaim
  */
 balance_report: Schemas.connect_embedded_base_config_claim
 /**
  * @title ConnectEmbeddedPayoutsConfig
  */
 balances: Schemas.connect_embedded_payouts_config
 /**
  * @title ConnectEmbeddedDisputesListConfig
  */
 disputes_list: Schemas.connect_embedded_disputes_list_config
 /**
  * @title ConnectEmbeddedBaseConfigClaim
  */
 documents: Schemas.connect_embedded_base_config_claim
 /**
  * @title ConnectEmbeddedFinancialAccountConfigClaim
  */
 financial_account: Schemas.connect_embedded_financial_account_config_claim
 /**
  * @title ConnectEmbeddedFinancialAccountTransactionsConfigClaim
  */
 financial_account_transactions: Schemas.connect_embedded_financial_account_transactions_config_claim
 /**
  * @title ConnectEmbeddedInstantPayoutsPromotionConfig
  */
 instant_payouts_promotion: Schemas.connect_embedded_instant_payouts_promotion_config
 /**
  * @title ConnectEmbeddedIssuingCardConfigClaim
  */
 issuing_card: Schemas.connect_embedded_issuing_card_config_claim
 /**
  * @title ConnectEmbeddedIssuingCardsListConfigClaim
  */
 issuing_cards_list: Schemas.connect_embedded_issuing_cards_list_config_claim
 /**
  * @title ConnectEmbeddedAccountConfigClaim
  */
 notification_banner: Schemas.connect_embedded_account_config_claim
 /**
  * @title ConnectEmbeddedPaymentsConfigClaim
  */
 payment_details: Schemas.connect_embedded_payments_config_claim
 /**
  * @title ConnectEmbeddedPaymentDisputesConfig
  */
 payment_disputes: Schemas.connect_embedded_payment_disputes_config
 /**
  * @title ConnectEmbeddedPaymentsConfigClaim
  */
 payments: Schemas.connect_embedded_payments_config_claim
 /**
  * @title ConnectEmbeddedBaseConfigClaim
  */
 payout_details: Schemas.connect_embedded_base_config_claim
 /**
  * @title ConnectEmbeddedBaseConfigClaim
  */
 payout_reconciliation_report: Schemas.connect_embedded_base_config_claim
 /**
  * @title ConnectEmbeddedPayoutsConfig
  */
 payouts: Schemas.connect_embedded_payouts_config
 /**
  * @title ConnectEmbeddedBaseConfigClaim
  */
 payouts_list: Schemas.connect_embedded_base_config_claim
 /**
  * @title ConnectEmbeddedBaseConfigClaim
  */
 tax_registrations: Schemas.connect_embedded_base_config_claim
 /**
  * @title ConnectEmbeddedBaseConfigClaim
  */
 tax_settings: Schemas.connect_embedded_base_config_claim
}

/**
 * @title ConnectEmbeddedBaseConfigClaim
 */
export type connect_embedded_base_config_claim = {
 /**
  * @description Whether the embedded component is enabled.
  */
 enabled: boolean
 /**
  * @title ConnectEmbeddedBaseFeatures
  */
 features: Schemas.connect_embedded_base_features
}

/**
 * @title ConnectEmbeddedBaseFeatures
 */
export type connect_embedded_base_features = unknown

/**
 * @title ConnectEmbeddedDisputesListConfig
 */
export type connect_embedded_disputes_list_config = {
 /**
  * @description Whether the embedded component is enabled.
  */
 enabled: boolean
 /**
  * @title ConnectEmbeddedDisputesListFeatures
  */
 features: Schemas.connect_embedded_disputes_list_features
}

/**
 * @title ConnectEmbeddedDisputesListFeatures
 */
export type connect_embedded_disputes_list_features = {
 /**
  * @description Whether to allow capturing and cancelling payment intents. This is `true` by default.
  */
 capture_payments: boolean
 /**
  * @description Whether connected accounts can manage destination charges that are created on behalf of them. This is `false` by default.
  */
 destination_on_behalf_of_charge_management: boolean
 /**
  * @description Whether responding to disputes is enabled, including submitting evidence and accepting disputes. This is `true` by default.
  */
 dispute_management: boolean
 /**
  * @description Whether sending refunds is enabled. This is `true` by default.
  */
 refund_management: boolean
}

/**
 * @title ConnectEmbeddedFinancialAccountConfigClaim
 */
export type connect_embedded_financial_account_config_claim = {
 /**
  * @description Whether the embedded component is enabled.
  */
 enabled: boolean
 /**
  * @title ConnectEmbeddedFinancialAccountFeatures
  */
 features: Schemas.connect_embedded_financial_account_features
}

/**
 * @title ConnectEmbeddedFinancialAccountFeatures
 */
export type connect_embedded_financial_account_features = {
 /**
  * @description Whether Stripe user authentication is disabled. This value can only be `true` for accounts where `controller.requirement_collection` is `application` for the account. The default value is the opposite of the `external_account_collection` value. For example, if you don't set `external_account_collection`, it defaults to `true` and `disable_stripe_user_authentication` defaults to `false`.
  */
 disable_stripe_user_authentication: boolean
 /**
  * @description Whether external account collection is enabled. This feature can only be `false` for accounts where you’re responsible for collecting updated information when requirements are due or change, like Custom accounts. The default value for this feature is `true`.
  */
 external_account_collection: boolean
 /**
  * @description Whether to allow sending money.
  */
 send_money: boolean
 /**
  * @description Whether to allow transferring balance.
  */
 transfer_balance: boolean
}

/**
 * @title ConnectEmbeddedFinancialAccountTransactionsConfigClaim
 */
export type connect_embedded_financial_account_transactions_config_claim = {
 /**
  * @description Whether the embedded component is enabled.
  */
 enabled: boolean
 /**
  * @title ConnectEmbeddedFinancialAccountTransactionsFeatures
  */
 features: Schemas.connect_embedded_financial_account_transactions_features
}

/**
 * @title ConnectEmbeddedFinancialAccountTransactionsFeatures
 */
export type connect_embedded_financial_account_transactions_features = {
 /**
  * @description Whether to allow card spend dispute management features.
  */
 card_spend_dispute_management: boolean
}

/**
 * @title ConnectEmbeddedInstantPayoutsPromotionConfig
 */
export type connect_embedded_instant_payouts_promotion_config = {
 /**
  * @description Whether the embedded component is enabled.
  */
 enabled: boolean
 /**
  * @title ConnectEmbeddedInstantPayoutsPromotionFeatures
  */
 features: Schemas.connect_embedded_instant_payouts_promotion_features
}

/**
 * @title ConnectEmbeddedInstantPayoutsPromotionFeatures
 */
export type connect_embedded_instant_payouts_promotion_features = {
 /**
  * @description Whether Stripe user authentication is disabled. This value can only be `true` for accounts where `controller.requirement_collection` is `application` for the account. The default value is the opposite of the `external_account_collection` value. For example, if you don't set `external_account_collection`, it defaults to `true` and `disable_stripe_user_authentication` defaults to `false`.
  */
 disable_stripe_user_authentication: boolean
 /**
  * @description Whether external account collection is enabled. This feature can only be `false` for accounts where you’re responsible for collecting updated information when requirements are due or change, like Custom accounts. The default value for this feature is `true`.
  */
 external_account_collection: boolean
 /**
  * @description Whether to allow creation of instant payouts. Defaults to `true` when `controller.losses.payments` is set to `stripe` for the account, otherwise `false`.
  */
 instant_payouts: boolean
}

/**
 * @title ConnectEmbeddedIssuingCardConfigClaim
 */
export type connect_embedded_issuing_card_config_claim = {
 /**
  * @description Whether the embedded component is enabled.
  */
 enabled: boolean
 /**
  * @title ConnectEmbeddedIssuingCardFeatures
  */
 features: Schemas.connect_embedded_issuing_card_features
}

/**
 * @title ConnectEmbeddedIssuingCardFeatures
 */
export type connect_embedded_issuing_card_features = {
 /**
  * @description Whether to allow card management features.
  */
 card_management: boolean
 /**
  * @description Whether to allow card spend dispute management features.
  */
 card_spend_dispute_management: boolean
 /**
  * @description Whether to allow cardholder management features.
  */
 cardholder_management: boolean
 /**
  * @description Whether to allow spend control management features.
  */
 spend_control_management: boolean
}

/**
 * @title ConnectEmbeddedIssuingCardsListConfigClaim
 */
export type connect_embedded_issuing_cards_list_config_claim = {
 /**
  * @description Whether the embedded component is enabled.
  */
 enabled: boolean
 /**
  * @title ConnectEmbeddedIssuingCardsListFeatures
  */
 features: Schemas.connect_embedded_issuing_cards_list_features
}

/**
 * @title ConnectEmbeddedIssuingCardsListFeatures
 */
export type connect_embedded_issuing_cards_list_features = {
 /**
  * @description Whether to allow card management features.
  */
 card_management: boolean
 /**
  * @description Whether to allow card spend dispute management features.
  */
 card_spend_dispute_management: boolean
 /**
  * @description Whether to allow cardholder management features.
  */
 cardholder_management: boolean
 /**
  * @description Whether Stripe user authentication is disabled. This value can only be `true` for accounts where `controller.requirement_collection` is `application` for the account. The default value is the opposite of the `external_account_collection` value. For example, if you don't set `external_account_collection`, it defaults to `true` and `disable_stripe_user_authentication` defaults to `false`.
  */
 disable_stripe_user_authentication: boolean
 /**
  * @description Whether to allow spend control management features.
  */
 spend_control_management: boolean
}

/**
 * @title ConnectEmbeddedPaymentDisputesConfig
 */
export type connect_embedded_payment_disputes_config = {
 /**
  * @description Whether the embedded component is enabled.
  */
 enabled: boolean
 /**
  * @title ConnectEmbeddedPaymentDisputesFeatures
  */
 features: Schemas.connect_embedded_payment_disputes_features
}

/**
 * @title ConnectEmbeddedPaymentDisputesFeatures
 */
export type connect_embedded_payment_disputes_features = {
 /**
  * @description Whether connected accounts can manage destination charges that are created on behalf of them. This is `false` by default.
  */
 destination_on_behalf_of_charge_management: boolean
 /**
  * @description Whether responding to disputes is enabled, including submitting evidence and accepting disputes. This is `true` by default.
  */
 dispute_management: boolean
 /**
  * @description Whether sending refunds is enabled. This is `true` by default.
  */
 refund_management: boolean
}

/**
 * @title ConnectEmbeddedPaymentsConfigClaim
 */
export type connect_embedded_payments_config_claim = {
 /**
  * @description Whether the embedded component is enabled.
  */
 enabled: boolean
 /**
  * @title ConnectEmbeddedPaymentsFeatures
  */
 features: Schemas.connect_embedded_payments_features
}

/**
 * @title ConnectEmbeddedPaymentsFeatures
 */
export type connect_embedded_payments_features = {
 /**
  * @description Whether to allow capturing and cancelling payment intents. This is `true` by default.
  */
 capture_payments: boolean
 /**
  * @description Whether connected accounts can manage destination charges that are created on behalf of them. This is `false` by default.
  */
 destination_on_behalf_of_charge_management: boolean
 /**
  * @description Whether responding to disputes is enabled, including submitting evidence and accepting disputes. This is `true` by default.
  */
 dispute_management: boolean
 /**
  * @description Whether sending refunds is enabled. This is `true` by default.
  */
 refund_management: boolean
}

/**
 * @title ConnectEmbeddedPayoutsConfig
 */
export type connect_embedded_payouts_config = {
 /**
  * @description Whether the embedded component is enabled.
  */
 enabled: boolean
 /**
  * @title ConnectEmbeddedPayoutsFeatures
  */
 features: Schemas.connect_embedded_payouts_features
}

/**
 * @title ConnectEmbeddedPayoutsFeatures
 */
export type connect_embedded_payouts_features = {
 /**
  * @description Whether Stripe user authentication is disabled. This value can only be `true` for accounts where `controller.requirement_collection` is `application` for the account. The default value is the opposite of the `external_account_collection` value. For example, if you don't set `external_account_collection`, it defaults to `true` and `disable_stripe_user_authentication` defaults to `false`.
  */
 disable_stripe_user_authentication: boolean
 /**
  * @description Whether to allow payout schedule to be changed. Defaults to `true` when `controller.losses.payments` is set to `stripe` for the account, otherwise `false`.
  */
 edit_payout_schedule: boolean
 /**
  * @description Whether external account collection is enabled. This feature can only be `false` for accounts where you’re responsible for collecting updated information when requirements are due or change, like Custom accounts. The default value for this feature is `true`.
  */
 external_account_collection: boolean
 /**
  * @description Whether to allow creation of instant payouts. Defaults to `true` when `controller.losses.payments` is set to `stripe` for the account, otherwise `false`.
  */
 instant_payouts: boolean
 /**
  * @description Whether to allow creation of standard payouts. Defaults to `true` when `controller.losses.payments` is set to `stripe` for the account, otherwise `false`.
  */
 standard_payouts: boolean
}

/**
 * @title CountrySpec
 * @description Stripe needs to collect certain pieces of information about each account
 * created. These requirements can differ depending on the account's country. The
 * Country Specs API makes these rules available to your integration.
 * 
 * You can also view the information from this API call as [an online
 * guide](/docs/connect/required-verification-information).
 */
export type country_spec = {
 /**
  * @description The default currency for this country. This applies to both payment methods and bank accounts.
  */
 default_currency: string
 /**
  * @description Unique identifier for the object. Represented as the ISO country code for this country.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'country_spec'
 /**
  * @description Currencies that can be accepted in the specific country (for transfers).
  */
 supported_bank_account_currencies: Record<string, string[]>
 /**
  * @description Currencies that can be accepted in the specified country (for payments).
  */
 supported_payment_currencies: string[]
 /**
  * @description Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges).
  */
 supported_payment_methods: string[]
 /**
  * @description Countries that can accept transfers from the specified country.
  */
 supported_transfer_countries: string[]
 /**
  * @title CountrySpecVerificationFields
  */
 verification_fields: Schemas.country_spec_verification_fields
}

/**
 * @title CountrySpecVerificationFieldDetails
 */
export type country_spec_verification_field_details = {
 /**
  * @description Additional fields which are only required for some users.
  */
 additional: string[]
 /**
  * @description Fields which every account must eventually provide.
  */
 minimum: string[]
}

/**
 * @title CountrySpecVerificationFields
 */
export type country_spec_verification_fields = {
 /**
  * @title CountrySpecVerificationFieldDetails
  */
 company: Schemas.country_spec_verification_field_details
 /**
  * @title CountrySpecVerificationFieldDetails
  */
 individual: Schemas.country_spec_verification_field_details
}

/**
 * @title Coupon
 * @description A coupon contains information about a percent-off or amount-off discount you
 * might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),
 * [checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
 */
export type coupon = {
 /**
  * @description Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
  */
 amount_off?: number | null
 /**
  * @title CouponAppliesTo
  */
 applies_to?: Schemas.coupon_applies_to
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off.
  */
 currency?: string | null
 /**
  * @description Coupons defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
  */
 currency_options?: Record<string, Schemas.coupon_currency_option>
 /**
  * @description One of `forever`, `once`, or `repeating`. Describes how long a customer who applies this coupon will get the discount.
  */
 duration: ('forever' | 'once' | 'repeating')
 /**
  * @description If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.
  */
 duration_in_months?: number | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
  */
 max_redemptions?: number | null
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description Name of the coupon displayed to customers on for instance invoices or receipts.
  */
 name?: string | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'coupon'
 /**
  * @description Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a $ (or local equivalent)100 invoice $ (or local equivalent)50 instead.
  */
 percent_off?: number | null
 /**
  * @description Date after which the coupon can no longer be redeemed.
  */
 redeem_by?: number | null
 /**
  * @description Number of times this coupon has been applied to a customer.
  */
 times_redeemed: number
 /**
  * @description Taking account of the above properties, whether this coupon can still be applied to a customer.
  */
 valid: boolean
}

/**
 * @title CouponAppliesTo
 */
export type coupon_applies_to = {
 /**
  * @description A list of product IDs this coupon applies to
  */
 products: string[]
}

/**
 * @title CouponCurrencyOption
 */
export type coupon_currency_option = {
 /**
  * @description Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
  */
 amount_off: number
}

/**
 * @title CreditBalance
 */
export type credit_balance = {
 /**
  * @title BillingCreditGrantsResourceAmount
  */
 available_balance: Schemas.billing_credit_grants_resource_amount
 /**
  * @title BillingCreditGrantsResourceAmount
  */
 ledger_balance: Schemas.billing_credit_grants_resource_amount
}

/**
 * @title CreditNote
 * @description Issue a credit note to adjust an invoice's amount after the invoice is finalized.
 * 
 * Related guide: [Credit notes](https://stripe.com/docs/billing/invoices/credit-notes)
 */
export type credit_note = {
 /**
  * @description The integer amount in cents (or local equivalent) representing the total amount of the credit note, including tax.
  */
 amount: number
 /**
  * @description This is the sum of all the shipping amounts.
  */
 amount_shipping: number
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description ID of the customer.
  */
 customer: (string | Schemas.customer | Schemas.deleted_customer)
 /**
  * @description Customer balance transaction related to this credit note.
  */
 customer_balance_transaction?: (string | Schemas.customer_balance_transaction) | null
 /**
  * @description The integer amount in cents (or local equivalent) representing the total amount of discount that was credited.
  */
 discount_amount: number
 /**
  * @description The aggregate amounts calculated per discount for all line items.
  */
 discount_amounts: Schemas.discounts_resource_discount_amount[]
 /**
  * @description The date when this credit note is in effect. Same as `created` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the credit note PDF.
  */
 effective_at?: number | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description ID of the invoice.
  */
 invoice: (string | Schemas.invoice)
 /**
  * @title CreditNoteLinesList
  * @description Line items that make up the credit note
  */
 lines: {
  /**
   * @description Details about each object.
   */
  data: Schemas.credit_note_line_item[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 }
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Customer-facing text that appears on the credit note PDF.
  */
 memo?: string | null
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.
  */
 number: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'credit_note'
 /**
  * @description Amount that was credited outside of Stripe.
  */
 out_of_band_amount?: number | null
 /**
  * @description The link to download the PDF of the credit note.
  */
 pdf: string
 /**
  * @description The amount of the credit note that was refunded to the customer, credited to the customer's balance, credited outside of Stripe, or any combination thereof.
  */
 post_payment_amount: number
 /**
  * @description The amount of the credit note by which the invoice's `amount_remaining` and `amount_due` were reduced.
  */
 pre_payment_amount: number
 /**
  * @description The pretax credit amounts (ex: discount, credit grants, etc) for all line items.
  */
 pretax_credit_amounts: Schemas.credit_notes_pretax_credit_amount[]
 /**
  * @description Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
  */
 reason?: ('duplicate' | 'fraudulent' | 'order_change' | 'product_unsatisfactory') | null
 /**
  * @description Refunds related to this credit note.
  */
 refunds: Schemas.credit_note_refund[]
 /**
  * @description The details of the cost of shipping, including the ShippingRate applied to the invoice.
  */
 shipping_cost?: Schemas.invoices_resource_shipping_cost | null
 /**
  * @description Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).
  */
 status: ('issued' | 'void')
 /**
  * @description The integer amount in cents (or local equivalent) representing the amount of the credit note, excluding exclusive tax and invoice level discounts.
  */
 subtotal: number
 /**
  * @description The integer amount in cents (or local equivalent) representing the amount of the credit note, excluding all tax and invoice level discounts.
  */
 subtotal_excluding_tax?: number | null
 /**
  * @description The integer amount in cents (or local equivalent) representing the total amount of the credit note, including tax and all discount.
  */
 total: number
 /**
  * @description The integer amount in cents (or local equivalent) representing the total amount of the credit note, excluding tax, but including discounts.
  */
 total_excluding_tax?: number | null
 /**
  * @description The aggregate tax information for all line items.
  */
 total_taxes?: Schemas.billing_bill_resource_invoicing_taxes_tax[] | null
 /**
  * @description Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid.
  */
 type: ('mixed' | 'post_payment' | 'pre_payment')
 /**
  * @description The time that the credit note was voided.
  */
 voided_at?: number | null
}

/**
 * @title CreditNoteLineItem
 * @description The credit note line item object
 */
export type credit_note_line_item = {
 /**
  * @description The integer amount in cents (or local equivalent) representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts.
  */
 amount: number
 /**
  * @description Description of the item being credited.
  */
 description?: string | null
 /**
  * @description The integer amount in cents (or local equivalent) representing the discount being credited for this line item.
  */
 discount_amount: number
 /**
  * @description The amount of discount calculated per discount for this line item
  */
 discount_amounts: Schemas.discounts_resource_discount_amount[]
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description ID of the invoice line item being credited
  */
 invoice_line_item?: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'credit_note_line_item'
 /**
  * @description The pretax credit amounts (ex: discount, credit grants, etc) for this line item.
  */
 pretax_credit_amounts: Schemas.credit_notes_pretax_credit_amount[]
 /**
  * @description The number of units of product being credited.
  */
 quantity?: number | null
 /**
  * @description The tax rates which apply to the line item.
  */
 tax_rates: Schemas.tax_rate[]
 /**
  * @description The tax information of the line item.
  */
 taxes?: Schemas.billing_bill_resource_invoicing_taxes_tax[] | null
 /**
  * @description The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice.
  */
 type: ('custom_line_item' | 'invoice_line_item')
 /**
  * @description The cost of each unit of product being credited.
  */
 unit_amount?: number | null
 /**
  * @description Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
  */
 unit_amount_decimal?: string | null
}

/**
 * @title CreditNoteRefund
 */
export type credit_note_refund = {
 /**
  * @description Amount of the refund that applies to this credit note, in cents (or local equivalent).
  */
 amount_refunded: number
 /**
  * @description ID of the refund.
  */
 refund: (string | Schemas.refund)
}

/**
 * @title CreditNotesPretaxCreditAmount
 */
export type credit_notes_pretax_credit_amount = {
 /**
  * @description The amount, in cents (or local equivalent), of the pretax credit amount.
  */
 amount: number
 /**
  * @description The credit balance transaction that was applied to get this pretax credit amount.
  */
 credit_balance_transaction?: (string | Schemas.billingcredit_balance_transaction)
 /**
  * @description The discount that was applied to get this pretax credit amount.
  */
 discount?: (string | Schemas.discount | Schemas.deleted_discount)
 /**
  * @description Type of the pretax credit amount referenced.
  */
 type: ('credit_balance_transaction' | 'discount')
}

/**
 * @title CurrencyOption
 */
export type currency_option = {
 /**
  * @description When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
  */
 custom_unit_amount?: Schemas.custom_unit_amount | null
 /**
  * @description Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
  */
 tax_behavior?: ('exclusive' | 'inclusive' | 'unspecified') | null
 /**
  * @description Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
  */
 tiers?: Schemas.price_tier[]
 /**
  * @description The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
  */
 unit_amount?: number | null
 /**
  * @description The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
  */
 unit_amount_decimal?: string | null
}

/**
 * @title CustomUnitAmount
 */
export type custom_unit_amount = {
 /**
  * @description The maximum unit amount the customer can specify for this item.
  */
 maximum?: number | null
 /**
  * @description The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
  */
 minimum?: number | null
 /**
  * @description The starting unit amount which can be updated by the customer.
  */
 preset?: number | null
}

/**
 * @title Customer
 * @description This object represents a customer of your business. Use it to [create recurring charges](https://stripe.com/docs/invoicing/customer), [save payment](https://stripe.com/docs/payments/save-during-payment) and contact information,
 * and track payments that belong to the same customer.
 */
export type customer = {
 /**
  * @description The customer's address.
  */
 address?: Schemas.address | null
 /**
  * @description The current balance, if any, that's stored on the customer in their default currency. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that's added to their next invoice. The balance only considers amounts that Stripe hasn't successfully applied to any invoice. It doesn't reflect unpaid invoices. This balance is only taken into account after invoices finalize. For multi-currency balances, see [invoice_credit_balance](https://stripe.com/docs/api/customers/object#customer_object-invoice_credit_balance).
  */
 balance?: number
 /**
  * @description The current funds being held by Stripe on behalf of the customer. You can apply these funds towards payment intents when the source is "cash_balance". The `settings[reconciliation_mode]` field describes if these funds apply to these payment intents manually or automatically.
  */
 cash_balance?: Schemas.cash_balance | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.
  */
 currency?: string | null
 /**
  * @description ID of the default payment source for the customer.
  * 
  * If you use payment methods created through the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
  */
 default_source?: (string | Schemas.bank_account | Schemas.card | Schemas.source) | null
 /**
  * @description Tracks the most recent state change on any invoice belonging to the customer. Paying an invoice or marking it uncollectible via the API will set this field to false. An automatic payment failure or passing the `invoice.due_date` will set this field to `true`.
  * 
  * If an invoice becomes uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't reset to `false`.
  * 
  * If you care whether the customer has paid their most recent subscription invoice, use `subscription.status` instead. Paying or marking uncollectible any customer invoice regardless of whether it is the latest invoice for a subscription will always set this field to `false`.
  */
 delinquent?: boolean | null
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description?: string | null
 /**
  * @description Describes the current discount active on the customer, if there is one.
  */
 discount?: Schemas.discount | null
 /**
  * @description The customer's email address.
  */
 email?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The current multi-currency balances, if any, that's stored on the customer. If positive in a currency, the customer has a credit to apply to their next invoice denominated in that currency. If negative, the customer has an amount owed that's added to their next invoice denominated in that currency. These balances don't apply to unpaid invoices. They solely track amounts that Stripe hasn't successfully applied to any invoice. Stripe only applies a balance in a specific currency to an invoice after that invoice (which is in the same currency) finalizes.
  */
 invoice_credit_balance?: Record<string, number>
 /**
  * @description The prefix for the customer used to generate unique invoice numbers.
  */
 invoice_prefix?: string | null
 /**
  * @title InvoiceSettingCustomerSetting
  */
 invoice_settings?: Schemas.invoice_setting_customer_setting
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string>
 /**
  * @description The customer's full name or business name.
  */
 name?: string | null
 /**
  * @description The suffix of the customer's next invoice number (for example, 0001). When the account uses account level sequencing, this parameter is ignored in API requests and the field omitted in API responses.
  */
 next_invoice_sequence?: number
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'customer'
 /**
  * @description The customer's phone number.
  */
 phone?: string | null
 /**
  * @description The customer's preferred locales (languages), ordered by preference.
  */
 preferred_locales?: string[] | null
 /**
  * @description Mailing and shipping address for the customer. Appears on invoices emailed to this customer.
  */
 shipping?: Schemas.shipping | null
 /**
  * @title ApmsSourcesSourceList
  * @description The customer's payment sources, if any.
  */
 sources?: {
  /**
   * @description Details about each object.
   */
  data: (Schemas.bank_account | Schemas.card | Schemas.source)[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 }
 /**
  * @title SubscriptionList
  * @description The customer's current subscriptions, if any.
  */
 subscriptions?: {
  /**
   * @description Details about each object.
   */
  data: Schemas.subscription[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 }
 /**
  * @title CustomerTax
  */
 tax?: Schemas.customer_tax
 /**
  * @description Describes the customer's tax exemption status, which is `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the following text: **"Reverse charge"**.
  */
 tax_exempt?: ('exempt' | 'none' | 'reverse') | null
 /**
  * @title TaxIDsList
  * @description The customer's tax IDs.
  */
 tax_ids?: {
  /**
   * @description Details about each object.
   */
  data: Schemas.tax_id[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 }
 /**
  * @description ID of the test clock that this customer belongs to.
  */
 test_clock?: (string | Schemas.test_helperstest_clock) | null
}

/**
 * @title customer_acceptance
 */
export type customer_acceptance = {
 /**
  * @description The time that the customer accepts the mandate.
  */
 accepted_at?: number | null
 /**
  * @title offline_acceptance
  */
 offline?: Schemas.offline_acceptance
 /**
  * @title online_acceptance
  */
 online?: Schemas.online_acceptance
 /**
  * @description The mandate includes the type of customer acceptance information, such as: `online` or `offline`.
  */
 type: ('offline' | 'online')
}

/**
 * @title CustomerBalanceCustomerBalanceSettings
 */
export type customer_balance_customer_balance_settings = {
 /**
  * @description The configuration for how funds that land in the customer cash balance are reconciled.
  */
 reconciliation_mode: ('automatic' | 'manual')
 /**
  * @description A flag to indicate if reconciliation mode returned is the user's default or is specific to this customer cash balance
  */
 using_merchant_default: boolean
}

/**
 * @title CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft
 */
export type customer_balance_resource_cash_balance_transaction_resource_adjusted_for_overdraft = {
 /**
  * @description The [Balance Transaction](https://stripe.com/docs/api/balance_transactions/object) that corresponds to funds taken out of your Stripe balance.
  */
 balance_transaction: (string | Schemas.balance_transaction)
 /**
  * @description The [Cash Balance Transaction](https://stripe.com/docs/api/cash_balance_transactions/object) that brought the customer balance negative, triggering the clawback of funds.
  */
 linked_transaction: (string | Schemas.customer_cash_balance_transaction)
}

/**
 * @title CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction
 */
export type customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction = {
 /**
  * @description The [Payment Intent](https://stripe.com/docs/api/payment_intents/object) that funds were applied to.
  */
 payment_intent: (string | Schemas.payment_intent)
}

/**
 * @title CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction
 */
export type customer_balance_resource_cash_balance_transaction_resource_funded_transaction = {
 /**
  * @title CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer
  */
 bank_transfer: Schemas.customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer
}

/**
 * @title CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer
 */
export type customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer = {
 /**
  * @title CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer
  */
 eu_bank_transfer?: Schemas.customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_eu_bank_transfer
 /**
  * @title CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer
  */
 gb_bank_transfer?: Schemas.customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_gb_bank_transfer
 /**
  * @title CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer
  */
 jp_bank_transfer?: Schemas.customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_jp_bank_transfer
 /**
  * @description The user-supplied reference field on the bank transfer.
  */
 reference?: string | null
 /**
  * @description The funding method type used to fund the customer balance. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
  */
 type: ('eu_bank_transfer' | 'gb_bank_transfer' | 'jp_bank_transfer' | 'mx_bank_transfer' | 'us_bank_transfer')
 /**
  * @title CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer
  */
 us_bank_transfer?: Schemas.customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_us_bank_transfer
}

/**
 * @title CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer
 */
export type customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_eu_bank_transfer = {
 /**
  * @description The BIC of the bank of the sender of the funding.
  */
 bic?: string | null
 /**
  * @description The last 4 digits of the IBAN of the sender of the funding.
  */
 iban_last4?: string | null
 /**
  * @description The full name of the sender, as supplied by the sending bank.
  */
 sender_name?: string | null
}

/**
 * @title CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer
 */
export type customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_gb_bank_transfer = {
 /**
  * @description The last 4 digits of the account number of the sender of the funding.
  */
 account_number_last4?: string | null
 /**
  * @description The full name of the sender, as supplied by the sending bank.
  */
 sender_name?: string | null
 /**
  * @description The sort code of the bank of the sender of the funding
  */
 sort_code?: string | null
}

/**
 * @title CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer
 */
export type customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_jp_bank_transfer = {
 /**
  * @description The name of the bank of the sender of the funding.
  */
 sender_bank?: string | null
 /**
  * @description The name of the bank branch of the sender of the funding.
  */
 sender_branch?: string | null
 /**
  * @description The full name of the sender, as supplied by the sending bank.
  */
 sender_name?: string | null
}

/**
 * @title CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer
 */
export type customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_us_bank_transfer = {
 /**
  * @description The banking network used for this funding.
  */
 network?: ('ach' | 'domestic_wire_us' | 'swift')
 /**
  * @description The full name of the sender, as supplied by the sending bank.
  */
 sender_name?: string | null
}

/**
 * @title CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction
 */
export type customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction = {
 /**
  * @description The [Refund](https://stripe.com/docs/api/refunds/object) that moved these funds into the customer's cash balance.
  */
 refund: (string | Schemas.refund)
}

/**
 * @title CustomerBalanceResourceCashBalanceTransactionResourceTransferredToBalance
 */
export type customer_balance_resource_cash_balance_transaction_resource_transferred_to_balance = {
 /**
  * @description The [Balance Transaction](https://stripe.com/docs/api/balance_transactions/object) that corresponds to funds transferred to your Stripe balance.
  */
 balance_transaction: (string | Schemas.balance_transaction)
}

/**
 * @title CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction
 */
export type customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction = {
 /**
  * @description The [Payment Intent](https://stripe.com/docs/api/payment_intents/object) that funds were unapplied from.
  */
 payment_intent: (string | Schemas.payment_intent)
}

/**
 * @title CustomerBalanceTransaction
 * @description Each customer has a [Balance](https://stripe.com/docs/api/customers/object#customer_object-balance) value,
 * which denotes a debit or credit that's automatically applied to their next invoice upon finalization.
 * You may modify the value directly by using the [update customer API](https://stripe.com/docs/api/customers/update),
 * or by creating a Customer Balance Transaction, which increments or decrements the customer's `balance` by the specified `amount`.
 * 
 * Related guide: [Customer balance](https://stripe.com/docs/billing/customer/balance)
 */
export type customer_balance_transaction = {
 /**
  * @description The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's `balance`.
  */
 amount: number
 /**
  * @description The ID of the checkout session (if any) that created the transaction.
  */
 checkout_session?: (string | Schemas.checkoutsession) | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description The ID of the credit note (if any) related to the transaction.
  */
 credit_note?: (string | Schemas.credit_note) | null
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description The ID of the customer the transaction belongs to.
  */
 customer: (string | Schemas.customer)
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description?: string | null
 /**
  * @description The customer's `balance` after the transaction was applied. A negative value decreases the amount due on the customer's next invoice. A positive value increases the amount due on the customer's next invoice.
  */
 ending_balance: number
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The ID of the invoice (if any) related to the transaction.
  */
 invoice?: (string | Schemas.invoice) | null
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'customer_balance_transaction'
 /**
  * @description Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_overpaid`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, `unapplied_from_invoice`, `checkout_session_subscription_payment`, or `checkout_session_subscription_payment_canceled`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types.
  */
 type: ('adjustment' | 'applied_to_invoice' | 'checkout_session_subscription_payment' | 'checkout_session_subscription_payment_canceled' | 'credit_note' | 'initial' | 'invoice_overpaid' | 'invoice_too_large' | 'invoice_too_small' | 'migration' | 'unapplied_from_invoice' | 'unspent_receiver_credit')
}

/**
 * @title CustomerCashBalanceTransaction
 * @description Customers with certain payments enabled have a cash balance, representing funds that were paid
 * by the customer to a merchant, but have not yet been allocated to a payment. Cash Balance Transactions
 * represent when funds are moved into or out of this balance. This includes funding by the customer, allocation
 * to payments, and refunds to the customer.
 */
export type customer_cash_balance_transaction = {
 /**
  * @title CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft
  */
 adjusted_for_overdraft?: Schemas.customer_balance_resource_cash_balance_transaction_resource_adjusted_for_overdraft
 /**
  * @title CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction
  */
 applied_to_payment?: Schemas.customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description The customer whose available cash balance changed as a result of this transaction.
  */
 customer: (string | Schemas.customer)
 /**
  * @description The total available cash balance for the specified currency after this transaction was applied. Represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 ending_balance: number
 /**
  * @title CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction
  */
 funded?: Schemas.customer_balance_resource_cash_balance_transaction_resource_funded_transaction
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description The amount by which the cash balance changed, represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). A positive value represents funds being added to the cash balance, a negative value represents funds being removed from the cash balance.
  */
 net_amount: number
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'customer_cash_balance_transaction'
 /**
  * @title CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction
  */
 refunded_from_payment?: Schemas.customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction
 /**
  * @title CustomerBalanceResourceCashBalanceTransactionResourceTransferredToBalance
  */
 transferred_to_balance?: Schemas.customer_balance_resource_cash_balance_transaction_resource_transferred_to_balance
 /**
  * @description The type of the cash balance transaction. New types may be added in future. See [Customer Balance](https://stripe.com/docs/payments/customer-balance#types) to learn more about these types.
  */
 type: ('adjusted_for_overdraft' | 'applied_to_payment' | 'funded' | 'funding_reversed' | 'refunded_from_payment' | 'return_canceled' | 'return_initiated' | 'transferred_to_balance' | 'unapplied_from_payment')
 /**
  * @title CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction
  */
 unapplied_from_payment?: Schemas.customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction
}

/**
 * @title CustomerSessionResourceCustomerSession
 * @description A Customer Session allows you to grant Stripe's frontend SDKs (like Stripe.js) client-side access
 * control over a Customer.
 * 
 * Related guides: [Customer Session with the Payment Element](/payments/accept-a-payment-deferred?platform=web&type=payment#save-payment-methods),
 * [Customer Session with the Pricing Table](/payments/checkout/pricing-table#customer-session),
 * [Customer Session with the Buy Button](/payment-links/buy-button#pass-an-existing-customer).
 */
export type customer_session = {
 /**
  * @description The client secret of this Customer Session. Used on the client to set up secure access to the given `customer`.
  * 
  * The client secret can be used to provide access to `customer` from your frontend. It should not be stored, logged, or exposed to anyone other than the relevant customer. Make sure that you have TLS enabled on any page that includes the client secret.
  */
 client_secret: string
 /**
  * @title CustomerSessionResourceComponents
  * @description Configuration for the components supported by this Customer Session.
  */
 components?: Schemas.customer_session_resource_components
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description The Customer the Customer Session was created for.
  */
 customer: (string | Schemas.customer)
 /**
  * @description The timestamp at which this Customer Session will expire.
  */
 expires_at: number
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'customer_session'
}

/**
 * @title CustomerSessionResourceComponents
 * @description Configuration for the components supported by this Customer Session.
 */
export type customer_session_resource_components = {
 /**
  * @title CustomerSessionResourceComponentsResourceBuyButton
  * @description This hash contains whether the buy button is enabled.
  */
 buy_button: Schemas.customer_session_resource_components_resource_buy_button
 /**
  * @title CustomerSessionResourceComponentsResourcePaymentElement
  * @description This hash contains whether the Payment Element is enabled and the features it supports.
  */
 payment_element: Schemas.customer_session_resource_components_resource_payment_element
 /**
  * @title CustomerSessionResourceComponentsResourcePricingTable
  * @description This hash contains whether the pricing table is enabled.
  */
 pricing_table: Schemas.customer_session_resource_components_resource_pricing_table
}

/**
 * @title CustomerSessionResourceComponentsResourceBuyButton
 * @description This hash contains whether the buy button is enabled.
 */
export type customer_session_resource_components_resource_buy_button = {
 /**
  * @description Whether the buy button is enabled.
  */
 enabled: boolean
}

/**
 * @title CustomerSessionResourceComponentsResourcePaymentElement
 * @description This hash contains whether the Payment Element is enabled and the features it supports.
 */
export type customer_session_resource_components_resource_payment_element = {
 /**
  * @description Whether the Payment Element is enabled.
  */
 enabled: boolean
 /**
  * @description This hash defines whether the Payment Element supports certain features.
  */
 features?: Schemas.customer_session_resource_components_resource_payment_element_resource_features | null
}

/**
 * @title CustomerSessionResourceComponentsResourcePaymentElementResourceFeatures
 * @description This hash contains the features the Payment Element supports.
 */
export type customer_session_resource_components_resource_payment_element_resource_features = {
 /**
  * @description A list of [`allow_redisplay`](https://docs.stripe.com/api/payment_methods/object#payment_method_object-allow_redisplay) values that controls which saved payment methods the Payment Element displays by filtering to only show payment methods with an `allow_redisplay` value that is present in this list.
  * 
  * If not specified, defaults to ["always"]. In order to display all saved payment methods, specify ["always", "limited", "unspecified"].
  */
 payment_method_allow_redisplay_filters: ('always' | 'limited' | 'unspecified')[]
 /**
  * @description Controls whether or not the Payment Element shows saved payment methods. This parameter defaults to `disabled`.
  */
 payment_method_redisplay: ('disabled' | 'enabled')
 /**
  * @description Determines the max number of saved payment methods for the Payment Element to display. This parameter defaults to `3`. The maximum redisplay limit is `10`.
  */
 payment_method_redisplay_limit?: number | null
 /**
  * @description Controls whether the Payment Element displays the option to remove a saved payment method. This parameter defaults to `disabled`.
  * 
  * Allowing buyers to remove their saved payment methods impacts subscriptions that depend on that payment method. Removing the payment method detaches the [`customer` object](https://docs.stripe.com/api/payment_methods/object#payment_method_object-customer) from that [PaymentMethod](https://docs.stripe.com/api/payment_methods).
  */
 payment_method_remove: ('disabled' | 'enabled')
 /**
  * @description Controls whether the Payment Element displays a checkbox offering to save a new payment method. This parameter defaults to `disabled`.
  * 
  * If a customer checks the box, the [`allow_redisplay`](https://docs.stripe.com/api/payment_methods/object#payment_method_object-allow_redisplay) value on the PaymentMethod is set to `'always'` at confirmation time. For PaymentIntents, the [`setup_future_usage`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-setup_future_usage) value is also set to the value defined in `payment_method_save_usage`.
  */
 payment_method_save: ('disabled' | 'enabled')
 /**
  * @description When using PaymentIntents and the customer checks the save checkbox, this field determines the [`setup_future_usage`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-setup_future_usage) value used to confirm the PaymentIntent.
  * 
  * When using SetupIntents, directly configure the [`usage`](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-usage) value on SetupIntent creation.
  */
 payment_method_save_usage?: ('off_session' | 'on_session') | null
}

/**
 * @title CustomerSessionResourceComponentsResourcePricingTable
 * @description This hash contains whether the pricing table is enabled.
 */
export type customer_session_resource_components_resource_pricing_table = {
 /**
  * @description Whether the pricing table is enabled.
  */
 enabled: boolean
}

/**
 * @title CustomerTax
 */
export type customer_tax = {
 /**
  * @description Surfaces if automatic tax computation is possible given the current customer location information.
  */
 automatic_tax: ('failed' | 'not_collecting' | 'supported' | 'unrecognized_location')
 /**
  * @description A recent IP address of the customer used for tax reporting and tax location inference.
  */
 ip_address?: string | null
 /**
  * @description The identified tax location of the customer.
  */
 location?: Schemas.customer_tax_location | null
}

/**
 * @title CustomerTaxLocation
 */
export type customer_tax_location = {
 /**
  * @description The identified tax country of the customer.
  */
 country: string
 /**
  * @description The data source used to infer the customer's location.
  */
 source: ('billing_address' | 'ip_address' | 'payment_method' | 'shipping_destination')
 /**
  * @description The identified tax state, county, province, or region of the customer.
  */
 state?: string | null
}

/**
 * @title DeletedAccount
 */
export type deleted_account = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'account'
}

/**
 * @title DeletedApplePayDomain
 */
export type deleted_apple_pay_domain = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'apple_pay_domain'
}

/**
 * @title DeletedApplication
 */
export type deleted_application = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The name of the application.
  */
 name?: string | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'application'
}

/**
 * @title DeletedBankAccount
 */
export type deleted_bank_account = {
 /**
  * @description Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  */
 currency?: string | null
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'bank_account'
}

/**
 * @title DeletedCard
 */
export type deleted_card = {
 /**
  * @description Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  */
 currency?: string | null
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'card'
}

/**
 * @title DeletedCoupon
 */
export type deleted_coupon = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'coupon'
}

/**
 * @title DeletedCustomer
 */
export type deleted_customer = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'customer'
}

/**
 * @title DeletedDiscount
 */
export type deleted_discount = {
 /**
  * @description The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.
  */
 checkout_session?: string | null
 /**
  * @title Coupon
  * @description A coupon contains information about a percent-off or amount-off discount you
  * might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),
  * [checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
  */
 coupon: Schemas.coupon
 /**
  * @description The ID of the customer associated with this discount.
  */
 customer?: (string | Schemas.customer | Schemas.deleted_customer) | null
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.
  */
 id: string
 /**
  * @description The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice.
  */
 invoice?: string | null
 /**
  * @description The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item.
  */
 invoice_item?: string | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'discount'
 /**
  * @description The promotion code applied to create this discount.
  */
 promotion_code?: (string | Schemas.promotion_code) | null
 /**
  * @description Date that the coupon was applied.
  */
 start: number
 /**
  * @description The subscription that this coupon is applied to, if it is applied to a particular subscription.
  */
 subscription?: string | null
 /**
  * @description The subscription item that this coupon is applied to, if it is applied to a particular subscription item.
  */
 subscription_item?: string | null
}

/**
 * @title Polymorphic
 */
export type deleted_external_account = (Schemas.deleted_bank_account | Schemas.deleted_card)

/**
 * @title DeletedInvoice
 */
export type deleted_invoice = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'invoice'
}

/**
 * @title DeletedInvoiceItem
 */
export type deleted_invoiceitem = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'invoiceitem'
}

/**
 * @title Polymorphic
 */
export type deleted_payment_source = (Schemas.deleted_bank_account | Schemas.deleted_card)

/**
 * @title DeletedPerson
 */
export type deleted_person = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'person'
}

/**
 * @title DeletedPlan
 */
export type deleted_plan = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'plan'
}

/**
 * @title DeletedPrice
 */
export type deleted_price = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'price'
}

/**
 * @title DeletedProduct
 */
export type deleted_product = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'product'
}

/**
 * @title DeletedProductFeature
 */
export type deleted_product_feature = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'product_feature'
}

/**
 * @title RadarListDeletedList
 */
export type deleted_radarvalue_list = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'radar.value_list'
}

/**
 * @title RadarListDeletedListItem
 */
export type deleted_radarvalue_list_item = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'radar.value_list_item'
}

/**
 * @title DeletedSubscriptionItem
 */
export type deleted_subscription_item = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'subscription_item'
}

/**
 * @title deleted_tax_id
 */
export type deleted_tax_id = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'tax_id'
}

/**
 * @title TerminalConfigurationDeletedConfiguration
 */
export type deleted_terminalconfiguration = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'terminal.configuration'
}

/**
 * @title TerminalLocationDeletedLocation
 */
export type deleted_terminallocation = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'terminal.location'
}

/**
 * @title TerminalReaderDeletedReader
 */
export type deleted_terminalreader = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'terminal.reader'
}

/**
 * @title DeletedTestClock
 */
export type deleted_test_helperstest_clock = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'test_helpers.test_clock'
}

/**
 * @title NotificationWebhookEndpointDeleted
 */
export type deleted_webhook_endpoint = {
 /**
  * @description Always true for a deleted object
  */
 deleted: true
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'webhook_endpoint'
}

/**
 * @title destination_details_unimplemented
 */
export type destination_details_unimplemented = unknown

/**
 * @title Discount
 * @description A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).
 * It contains information about when the discount began, when it will end, and what it is applied to.
 * 
 * Related guide: [Applying discounts to subscriptions](https://stripe.com/docs/billing/subscriptions/discounts)
 */
export type discount = {
 /**
  * @description The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.
  */
 checkout_session?: string | null
 /**
  * @title Coupon
  * @description A coupon contains information about a percent-off or amount-off discount you
  * might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),
  * [checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
  */
 coupon: Schemas.coupon
 /**
  * @description The ID of the customer associated with this discount.
  */
 customer?: (string | Schemas.customer | Schemas.deleted_customer) | null
 /**
  * @description If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null.
  */
 end?: number | null
 /**
  * @description The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.
  */
 id: string
 /**
  * @description The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice.
  */
 invoice?: string | null
 /**
  * @description The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item.
  */
 invoice_item?: string | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'discount'
 /**
  * @description The promotion code applied to create this discount.
  */
 promotion_code?: (string | Schemas.promotion_code) | null
 /**
  * @description Date that the coupon was applied.
  */
 start: number
 /**
  * @description The subscription that this coupon is applied to, if it is applied to a particular subscription.
  */
 subscription?: string | null
 /**
  * @description The subscription item that this coupon is applied to, if it is applied to a particular subscription item.
  */
 subscription_item?: string | null
}

/**
 * @title DiscountsResourceDiscountAmount
 */
export type discounts_resource_discount_amount = {
 /**
  * @description The amount, in cents (or local equivalent), of the discount.
  */
 amount: number
 /**
  * @description The discount that was applied to get this discount amount.
  */
 discount: (string | Schemas.discount | Schemas.deleted_discount)
}

/**
 * @title DiscountsResourceStackableDiscount
 */
export type discounts_resource_stackable_discount = {
 /**
  * @description ID of the coupon to create a new discount for.
  */
 coupon?: (string | Schemas.coupon) | null
 /**
  * @description ID of an existing discount on the object (or one of its ancestors) to reuse.
  */
 discount?: (string | Schemas.discount) | null
 /**
  * @description ID of the promotion code to create a new discount for.
  */
 promotion_code?: (string | Schemas.promotion_code) | null
}

/**
 * @title Dispute
 * @description A dispute occurs when a customer questions your charge with their card issuer.
 * When this happens, you have the opportunity to respond to the dispute with
 * evidence that shows that the charge is legitimate.
 * 
 * Related guide: [Disputes and fraud](https://stripe.com/docs/disputes)
 */
export type dispute = {
 /**
  * @description Disputed amount. Usually the amount of the charge, but it can differ (usually because of currency fluctuation or because only part of the order is disputed).
  */
 amount: number
 /**
  * @description List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute.
  */
 balance_transactions: Schemas.balance_transaction[]
 /**
  * @description ID of the charge that's disputed.
  */
 charge: (string | Schemas.charge)
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description List of eligibility types that are included in `enhanced_evidence`.
  */
 enhanced_eligibility_types: ('visa_compelling_evidence_3' | 'visa_compliance')[]
 /**
  * @title DisputeEvidence
  */
 evidence: Schemas.dispute_evidence
 /**
  * @title DisputeEvidenceDetails
  */
 evidence_details: Schemas.dispute_evidence_details
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description If true, it's still possible to refund the disputed payment. After the payment has been fully refunded, no further funds are withdrawn from your Stripe account as a result of this dispute.
  */
 is_charge_refundable: boolean
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'dispute'
 /**
  * @description ID of the PaymentIntent that's disputed.
  */
 payment_intent?: (string | Schemas.payment_intent) | null
 /**
  * @title DisputePaymentMethodDetails
  */
 payment_method_details?: Schemas.dispute_payment_method_details
 /**
  * @description Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `noncompliant`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Learn more about [dispute reasons](https://stripe.com/docs/disputes/categories).
  */
 reason: string
 /**
  * @description The current status of a dispute. Possible values include:`warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `won`, `lost`, or `prevented`.
  */
 status: ('lost' | 'needs_response' | 'under_review' | 'warning_closed' | 'warning_needs_response' | 'warning_under_review' | 'won')
}

/**
 * @title DisputeEnhancedEligibility
 */
export type dispute_enhanced_eligibility = {
 /**
  * @title DisputeEnhancedEligibilityVisaCompellingEvidence3
  */
 visa_compelling_evidence_3?: Schemas.dispute_enhanced_eligibility_visa_compelling_evidence3
 /**
  * @title DisputeEnhancedEligibilityVisaCompliance
  */
 visa_compliance?: Schemas.dispute_enhanced_eligibility_visa_compliance
}

/**
 * @title DisputeEnhancedEligibilityVisaCompellingEvidence3
 */
export type dispute_enhanced_eligibility_visa_compelling_evidence3 = {
 /**
  * @description List of actions required to qualify dispute for Visa Compelling Evidence 3.0 evidence submission.
  */
 required_actions: ('missing_customer_identifiers' | 'missing_disputed_transaction_description' | 'missing_merchandise_or_services' | 'missing_prior_undisputed_transaction_description' | 'missing_prior_undisputed_transactions')[]
 /**
  * @description Visa Compelling Evidence 3.0 eligibility status.
  */
 status: ('not_qualified' | 'qualified' | 'requires_action')
}

/**
 * @title DisputeEnhancedEligibilityVisaCompliance
 */
export type dispute_enhanced_eligibility_visa_compliance = {
 /**
  * @description Visa compliance eligibility status.
  */
 status: ('fee_acknowledged' | 'requires_fee_acknowledgement')
}

/**
 * @title DisputeEnhancedEvidence
 */
export type dispute_enhanced_evidence = {
 /**
  * @title DisputeEnhancedEvidenceVisaCompellingEvidence3
  */
 visa_compelling_evidence_3?: Schemas.dispute_enhanced_evidence_visa_compelling_evidence3
 /**
  * @title DisputeEnhancedEvidenceVisaCompliance
  */
 visa_compliance?: Schemas.dispute_enhanced_evidence_visa_compliance
}

/**
 * @title DisputeEnhancedEvidenceVisaCompellingEvidence3
 */
export type dispute_enhanced_evidence_visa_compelling_evidence3 = {
 /**
  * @description Disputed transaction details for Visa Compelling Evidence 3.0 evidence submission.
  */
 disputed_transaction?: Schemas.dispute_visa_compelling_evidence3_disputed_transaction | null
 /**
  * @description List of exactly two prior undisputed transaction objects for Visa Compelling Evidence 3.0 evidence submission.
  */
 prior_undisputed_transactions: Schemas.dispute_visa_compelling_evidence3_prior_undisputed_transaction[]
}

/**
 * @title DisputeEnhancedEvidenceVisaCompliance
 */
export type dispute_enhanced_evidence_visa_compliance = {
 /**
  * @description A field acknowledging the fee incurred when countering a Visa compliance dispute. If this field is set to true, evidence can be submitted for the compliance dispute. Stripe collects a 500 USD (or local equivalent) amount to cover the network costs associated with resolving compliance disputes. Stripe refunds the 500 USD network fee if you win the dispute.
  */
 fee_acknowledged: boolean
}

/**
 * @title DisputeEvidence
 */
export type dispute_evidence = {
 /**
  * @description Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity.
  */
 access_activity_log?: string | null
 /**
  * @description The billing address provided by the customer.
  */
 billing_address?: string | null
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer.
  */
 cancellation_policy?: (string | Schemas.file) | null
 /**
  * @description An explanation of how and when the customer was shown your refund policy prior to purchase.
  */
 cancellation_policy_disclosure?: string | null
 /**
  * @description A justification for why the customer's subscription was not canceled.
  */
 cancellation_rebuttal?: string | null
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service.
  */
 customer_communication?: (string | Schemas.file) | null
 /**
  * @description The email address of the customer.
  */
 customer_email_address?: string | null
 /**
  * @description The name of the customer.
  */
 customer_name?: string | null
 /**
  * @description The IP address that the customer used when making the purchase.
  */
 customer_purchase_ip?: string | null
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature.
  */
 customer_signature?: (string | Schemas.file) | null
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate.
  */
 duplicate_charge_documentation?: (string | Schemas.file) | null
 /**
  * @description An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate.
  */
 duplicate_charge_explanation?: string | null
 /**
  * @description The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge.
  */
 duplicate_charge_id?: string | null
 /**
  * @title DisputeEnhancedEvidence
  */
 enhanced_evidence: Schemas.dispute_enhanced_evidence
 /**
  * @description A description of the product or service that was sold.
  */
 product_description?: string | null
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge.
  */
 receipt?: (string | Schemas.file) | null
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer.
  */
 refund_policy?: (string | Schemas.file) | null
 /**
  * @description Documentation demonstrating that the customer was shown your refund policy prior to purchase.
  */
 refund_policy_disclosure?: string | null
 /**
  * @description A justification for why the customer is not entitled to a refund.
  */
 refund_refusal_explanation?: string | null
 /**
  * @description The date on which the customer received or began receiving the purchased service, in a clear human-readable format.
  */
 service_date?: string | null
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement.
  */
 service_documentation?: (string | Schemas.file) | null
 /**
  * @description The address to which a physical product was shipped. You should try to include as complete address information as possible.
  */
 shipping_address?: string | null
 /**
  * @description The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas.
  */
 shipping_carrier?: string | null
 /**
  * @description The date on which a physical product began its route to the shipping address, in a clear human-readable format.
  */
 shipping_date?: string | null
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible.
  */
 shipping_documentation?: (string | Schemas.file) | null
 /**
  * @description The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
  */
 shipping_tracking_number?: string | null
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements.
  */
 uncategorized_file?: (string | Schemas.file) | null
 /**
  * @description Any additional evidence or statements.
  */
 uncategorized_text?: string | null
}

/**
 * @title DisputeEvidenceDetails
 */
export type dispute_evidence_details = {
 /**
  * @description Date by which evidence must be submitted in order to successfully challenge dispute. Will be 0 if the customer's bank or credit card company doesn't allow a response for this particular dispute.
  */
 due_by?: number | null
 /**
  * @title DisputeEnhancedEligibility
  */
 enhanced_eligibility: Schemas.dispute_enhanced_eligibility
 /**
  * @description Whether evidence has been staged for this dispute.
  */
 has_evidence: boolean
 /**
  * @description Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed.
  */
 past_due: boolean
 /**
  * @description The number of times evidence has been submitted. Typically, you may only submit evidence once.
  */
 submission_count: number
}

/**
 * @title DisputePaymentMethodDetails
 */
export type dispute_payment_method_details = {
 /**
  * @title DisputePaymentMethodDetailsAmazonPay
  */
 amazon_pay?: Schemas.dispute_payment_method_details_amazon_pay
 /**
  * @title DisputePaymentMethodDetailsCard
  */
 card?: Schemas.dispute_payment_method_details_card
 /**
  * @title DisputePaymentMethodDetailsKlarna
  */
 klarna?: Schemas.dispute_payment_method_details_klarna
 /**
  * @title DisputePaymentMethodDetailsPaypal
  */
 paypal?: Schemas.dispute_payment_method_details_paypal
 /**
  * @description Payment method type.
  */
 type: ('amazon_pay' | 'card' | 'klarna' | 'paypal')
}

/**
 * @title DisputePaymentMethodDetailsAmazonPay
 */
export type dispute_payment_method_details_amazon_pay = {
 /**
  * @description The AmazonPay dispute type, chargeback or claim
  */
 dispute_type?: ('chargeback' | 'claim') | null
}

/**
 * @title DisputePaymentMethodDetailsCard
 */
export type dispute_payment_method_details_card = {
 /**
  * @description Card brand. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa` or `unknown`.
  */
 brand: string
 /**
  * @description The type of dispute opened. Different case types may have varying fees and financial impact.
  */
 case_type: ('block' | 'chargeback' | 'compliance' | 'inquiry' | 'resolution')
 /**
  * @description The card network's specific dispute reason code, which maps to one of Stripe's primary dispute categories to simplify response guidance. The [Network code map](https://stripe.com/docs/disputes/categories#network-code-map) lists all available dispute reason codes by network.
  */
 network_reason_code?: string | null
}

/**
 * @title DisputePaymentMethodDetailsKlarna
 */
export type dispute_payment_method_details_klarna = {
 /**
  * @description The reason for the dispute as defined by Klarna
  */
 reason_code?: string | null
}

/**
 * @title DisputePaymentMethodDetailsPaypal
 */
export type dispute_payment_method_details_paypal = {
 /**
  * @description The ID of the dispute in PayPal.
  */
 case_id?: string | null
 /**
  * @description The reason for the dispute as defined by PayPal
  */
 reason_code?: string | null
}

/**
 * @title DisputeTransactionShippingAddress
 */
export type dispute_transaction_shipping_address = {
 /**
  * @description City, district, suburb, town, or village.
  */
 city?: string | null
 /**
  * @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  */
 country?: string | null
 /**
  * @description Address line 1 (e.g., street, PO Box, or company name).
  */
 line1?: string | null
 /**
  * @description Address line 2 (e.g., apartment, suite, unit, or building).
  */
 line2?: string | null
 /**
  * @description ZIP or postal code.
  */
 postal_code?: string | null
 /**
  * @description State, county, province, or region.
  */
 state?: string | null
}

/**
 * @title DisputeVisaCompellingEvidence3DisputedTransaction
 */
export type dispute_visa_compelling_evidence3_disputed_transaction = {
 /**
  * @description User Account ID used to log into business platform. Must be recognizable by the user.
  */
 customer_account_id?: string | null
 /**
  * @description Unique identifier of the cardholder’s device derived from a combination of at least two hardware and software attributes. Must be at least 20 characters.
  */
 customer_device_fingerprint?: string | null
 /**
  * @description Unique identifier of the cardholder’s device such as a device serial number (e.g., International Mobile Equipment Identity [IMEI]). Must be at least 15 characters.
  */
 customer_device_id?: string | null
 /**
  * @description The email address of the customer.
  */
 customer_email_address?: string | null
 /**
  * @description The IP address that the customer used when making the purchase.
  */
 customer_purchase_ip?: string | null
 /**
  * @description Categorization of disputed payment.
  */
 merchandise_or_services?: ('merchandise' | 'services') | null
 /**
  * @description A description of the product or service that was sold.
  */
 product_description?: string | null
 /**
  * @description The address to which a physical product was shipped. All fields are required for Visa Compelling Evidence 3.0 evidence submission.
  */
 shipping_address?: Schemas.dispute_transaction_shipping_address | null
}

/**
 * @title DisputeVisaCompellingEvidence3PriorUndisputedTransaction
 */
export type dispute_visa_compelling_evidence3_prior_undisputed_transaction = {
 /**
  * @description Stripe charge ID for the Visa Compelling Evidence 3.0 eligible prior charge.
  */
 charge: string
 /**
  * @description User Account ID used to log into business platform. Must be recognizable by the user.
  */
 customer_account_id?: string | null
 /**
  * @description Unique identifier of the cardholder’s device derived from a combination of at least two hardware and software attributes. Must be at least 20 characters.
  */
 customer_device_fingerprint?: string | null
 /**
  * @description Unique identifier of the cardholder’s device such as a device serial number (e.g., International Mobile Equipment Identity [IMEI]). Must be at least 15 characters.
  */
 customer_device_id?: string | null
 /**
  * @description The email address of the customer.
  */
 customer_email_address?: string | null
 /**
  * @description The IP address that the customer used when making the purchase.
  */
 customer_purchase_ip?: string | null
 /**
  * @description A description of the product or service that was sold.
  */
 product_description?: string | null
 /**
  * @description The address to which a physical product was shipped. All fields are required for Visa Compelling Evidence 3.0 evidence submission.
  */
 shipping_address?: Schemas.dispute_transaction_shipping_address | null
}

/**
 * @title EmailSent
 */
export type email_sent = {
 /**
  * @description The timestamp when the email was sent.
  */
 email_sent_at: number
 /**
  * @description The recipient's email address.
  */
 email_sent_to: string
}

/**
 * @title ActiveEntitlement
 * @description An active entitlement describes access to a feature for a customer.
 */
export type entitlementsactive_entitlement = {
 /**
  * @description The [Feature](https://stripe.com/docs/api/entitlements/feature) that the customer is entitled to.
  */
 feature: (string | Schemas.entitlementsfeature)
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description A unique key you provide as your own system identifier. This may be up to 80 characters.
  */
 lookup_key: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'entitlements.active_entitlement'
}

/**
 * @title Feature
 * @description A feature represents a monetizable ability or functionality in your system.
 * Features can be assigned to products, and when those products are purchased, Stripe will create an entitlement to the feature for the purchasing customer.
 */
export type entitlementsfeature = {
 /**
  * @description Inactive features cannot be attached to new products and will not be returned from the features list endpoint.
  */
 active: boolean
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description A unique key you provide as your own system identifier. This may be up to 80 characters.
  */
 lookup_key: string
 /**
  * @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description The feature's name, for your own purpose, not meant to be displayable to the customer.
  */
 name: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'entitlements.feature'
}

/**
 * @title EphemeralKey
 */
export type ephemeral_key = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Time at which the key will expire. Measured in seconds since the Unix epoch.
  */
 expires: number
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'ephemeral_key'
 /**
  * @description The key's secret. You can use this value to make authorized requests to the Stripe API.
  */
 secret?: string
}

/**
 * @description An error response from the Stripe API
 */
export type error = {
 /**
  * @title APIErrors
  */
 error: Schemas.api_errors
}

/**
 * @title NotificationEvent
 * @description Snapshot events allow you to track and react to activity in your Stripe integration. When
 * the state of another API resource changes, Stripe creates an `Event` object that contains
 * all the relevant information associated with that action, including the affected API
 * resource. For example, a successful payment triggers a `charge.succeeded` event, which
 * contains the `Charge` in the event's data property. Some actions trigger multiple events.
 * For example, if you create a new subscription for a customer, it triggers both a
 * `customer.subscription.created` event and a `charge.succeeded` event.
 * 
 * Configure an event destination in your account to listen for events that represent actions
 * your integration needs to respond to. Additionally, you can retrieve an individual event or
 * a list of events from the API.
 * 
 * [Connect](https://docs.stripe.com/connect) platforms can also receive event notifications
 * that occur in their connected accounts. These events include an account attribute that
 * identifies the relevant connected account.
 * 
 * You can access events through the [Retrieve Event API](https://docs.stripe.com/api/events#retrieve_event)
 * for 30 days.
 */
export type event = {
 /**
  * @description The connected account that originates the event.
  */
 account?: string
 /**
  * @description The Stripe API version used to render `data` when the event was created. The contents of `data` never change, so this value remains static regardless of the API version currently in use. This property is populated only for events created on or after October 31, 2014.
  */
 api_version?: string | null
 /**
  * @description Authentication context needed to fetch the event or related object.
  */
 context?: string
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @title NotificationEventData
  */
 data: Schemas.notification_event_data
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'event'
 /**
  * @description Number of webhooks that haven't been successfully delivered (for example, to return a 20x response) to the URLs you specify.
  */
 pending_webhooks: number
 /**
  * @description Information on the API request that triggers the event.
  */
 request?: Schemas.notification_event_request | null
 /**
  * @description Description of the event (for example, `invoice.created` or `charge.refunded`).
  */
 type: string
}

/**
 * @title ExchangeRate
 * @description `ExchangeRate` objects allow you to determine the rates that Stripe is currently
 * using to convert from one currency to another. Since this number is variable
 * throughout the day, there are various reasons why you might want to know the current
 * rate (for example, to dynamically price an item for a user with a default
 * payment in a foreign currency).
 * 
 * Please refer to our [Exchange Rates API](https://stripe.com/docs/fx-rates) guide for more details.
 * 
 * *[Note: this integration path is supported but no longer recommended]* Additionally,
 * you can guarantee that a charge is made with an exchange rate that you expect is
 * current. To do so, you must pass in the exchange_rate to charges endpoints. If the
 * value is no longer up to date, the charge won't go through. Please refer to our
 * [Using with charges](https://stripe.com/docs/exchange-rates) guide for more details.
 * 
 * -----
 * 
 * &nbsp;
 * 
 * *This Exchange Rates API is a Beta Service and is subject to Stripe's terms of service. You may use the API solely for the purpose of transacting on Stripe. For example, the API may be queried in order to:*
 * 
 * - *localize prices for processing payments on Stripe*
 * - *reconcile Stripe transactions*
 * - *determine how much money to send to a connected account*
 * - *determine app fees to charge a connected account*
 * 
 * *Using this Exchange Rates API beta for any purpose other than to transact on Stripe is strictly prohibited and constitutes a violation of Stripe's terms of service.*
 */
export type exchange_rate = {
 /**
  * @description Unique identifier for the object. Represented as the three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) in lowercase.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'exchange_rate'
 /**
  * @description Hash where the keys are supported currencies and the values are the exchange rate at which the base id currency converts to the key currency.
  */
 rates: Record<string, number>
}

/**
 * @title Polymorphic
 */
export type external_account = (Schemas.bank_account | Schemas.card)

/**
 * @title ExternalAccountRequirements
 */
export type external_account_requirements = {
 /**
  * @description Fields that need to be collected to keep the external account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
  */
 currently_due?: string[] | null
 /**
  * @description Fields that are `currently_due` and need to be collected again because validation or verification failed.
  */
 errors?: Schemas.account_requirements_error[] | null
 /**
  * @description Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the external account.
  */
 past_due?: string[] | null
 /**
  * @description Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending.
  */
 pending_verification?: string[] | null
}

/**
 * @title Fee
 */
export type fee = {
 /**
  * @description Amount of the fee, in cents.
  */
 amount: number
 /**
  * @description ID of the Connect application that earned the fee.
  */
 application?: string | null
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description?: string | null
 /**
  * @description Type of the fee, one of: `application_fee`, `payment_method_passthrough_fee`, `stripe_fee` or `tax`.
  */
 type: string
}

/**
 * @title FeeRefund
 * @description `Application Fee Refund` objects allow you to refund an application fee that
 * has previously been created but not yet refunded. Funds will be refunded to
 * the Stripe account from which the fee was originally collected.
 * 
 * Related guide: [Refunding application fees](https://stripe.com/docs/connect/destination-charges#refunding-app-fee)
 */
export type fee_refund = {
 /**
  * @description Amount, in cents (or local equivalent).
  */
 amount: number
 /**
  * @description Balance transaction that describes the impact on your account balance.
  */
 balance_transaction?: (string | Schemas.balance_transaction) | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description ID of the application fee that was refunded.
  */
 fee: (string | Schemas.application_fee)
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'fee_refund'
}

/**
 * @title File
 * @description This object represents files hosted on Stripe's servers. You can upload
 * files with the [create file](https://stripe.com/docs/api#create_file) request
 * (for example, when uploading dispute evidence). Stripe also
 * creates files independently (for example, the results of a [Sigma scheduled
 * query](#scheduled_queries)).
 * 
 * Related guide: [File upload guide](https://stripe.com/docs/file-upload)
 */
export type file = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description The file expires and isn't available at this time in epoch seconds.
  */
 expires_at?: number | null
 /**
  * @description The suitable name for saving the file to a filesystem.
  */
 filename?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @title FileResourceFileLinkList
  * @description A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
  */
 links?: {
  /**
   * @description Details about each object.
   */
  data: Schemas.file_link[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 } | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'file'
 /**
  * @description The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
  */
 purpose: ('account_requirement' | 'additional_verification' | 'business_icon' | 'business_logo' | 'customer_signature' | 'dispute_evidence' | 'document_provider_identity_document' | 'finance_report_run' | 'financial_account_statement' | 'identity_document' | 'identity_document_downloadable' | 'issuing_regulatory_reporting' | 'pci_document' | 'selfie' | 'sigma_scheduled_query' | 'tax_document_user_upload' | 'terminal_android_apk' | 'terminal_reader_splashscreen')
 /**
  * @description The size of the file object in bytes.
  */
 size: number
 /**
  * @description A suitable title for the document.
  */
 title?: string | null
 /**
  * @description The returned file type (for example, `csv`, `pdf`, `jpg`, or `png`).
  */
 type?: string | null
 /**
  * @description Use your live secret API key to download the file from this URL.
  */
 url?: string | null
}

/**
 * @title FileLink
 * @description To share the contents of a `File` object with non-Stripe users, you can
 * create a `FileLink`. `FileLink`s contain a URL that you can use to
 * retrieve the contents of the file without authentication.
 */
export type file_link = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Returns if the link is already expired.
  */
 expired: boolean
 /**
  * @description Time that the link expires.
  */
 expires_at?: number | null
 /**
  * @description The file object this link points to.
  */
 file: (string | Schemas.file)
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'file_link'
 /**
  * @description The publicly accessible URL to download the file.
  */
 url?: string | null
}

/**
 * @title BankConnectionsResourceLinkedAccount
 * @description A Financial Connections Account represents an account that exists outside of Stripe, to which you have been granted some degree of access.
 */
export type financial_connectionsaccount = {
 /**
  * @description The account holder that this account belongs to.
  */
 account_holder?: Schemas.bank_connections_resource_accountholder | null
 /**
  * @description The most recent information about the account's balance.
  */
 balance?: Schemas.bank_connections_resource_balance | null
 /**
  * @description The state of the most recent attempt to refresh the account balance.
  */
 balance_refresh?: Schemas.bank_connections_resource_balance_refresh | null
 /**
  * @description The type of the account. Account category is further divided in `subcategory`.
  */
 category: ('cash' | 'credit' | 'investment' | 'other')
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description A human-readable name that has been assigned to this account, either by the account holder or by the institution.
  */
 display_name?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The name of the institution that holds this account.
  */
 institution_name: string
 /**
  * @description The last 4 digits of the account number. If present, this will be 4 numeric characters.
  */
 last4?: string | null
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'financial_connections.account'
 /**
  * @description The most recent information about the account's owners.
  */
 ownership?: (string | Schemas.financial_connectionsaccount_ownership) | null
 /**
  * @description The state of the most recent attempt to refresh the account owners.
  */
 ownership_refresh?: Schemas.bank_connections_resource_ownership_refresh | null
 /**
  * @description The list of permissions granted by this account.
  */
 permissions?: ('balances' | 'ownership' | 'payment_method' | 'transactions')[] | null
 /**
  * @description The status of the link to the account.
  */
 status: ('active' | 'disconnected' | 'inactive')
 /**
  * @description If `category` is `cash`, one of:
  * 
  *  - `checking`
  *  - `savings`
  *  - `other`
  * 
  * If `category` is `credit`, one of:
  * 
  *  - `mortgage`
  *  - `line_of_credit`
  *  - `credit_card`
  *  - `other`
  * 
  * If `category` is `investment` or `other`, this will be `other`.
  */
 subcategory: ('checking' | 'credit_card' | 'line_of_credit' | 'mortgage' | 'other' | 'savings')
 /**
  * @description The list of data refresh subscriptions requested on this account.
  */
 subscriptions?: 'transactions'[] | null
 /**
  * @description The [PaymentMethod type](https://stripe.com/docs/api/payment_methods/object#payment_method_object-type)(s) that can be created from this account.
  */
 supported_payment_method_types: ('link' | 'us_bank_account')[]
 /**
  * @description The state of the most recent attempt to refresh the account transactions.
  */
 transaction_refresh?: Schemas.bank_connections_resource_transaction_refresh | null
}

/**
 * @title BankConnectionsResourceOwner
 * @description Describes an owner of an account.
 */
export type financial_connectionsaccount_owner = {
 /**
  * @description The email address of the owner.
  */
 email?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The full name of the owner.
  */
 name: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'financial_connections.account_owner'
 /**
  * @description The ownership object that this owner belongs to.
  */
 ownership: string
 /**
  * @description The raw phone number of the owner.
  */
 phone?: string | null
 /**
  * @description The raw physical address of the owner.
  */
 raw_address?: string | null
 /**
  * @description The timestamp of the refresh that updated this owner.
  */
 refreshed_at?: number | null
}

/**
 * @title BankConnectionsResourceOwnership
 * @description Describes a snapshot of the owners of an account at a particular point in time.
 */
export type financial_connectionsaccount_ownership = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'financial_connections.account_ownership'
 /**
  * @title BankConnectionsResourceOwnerList
  * @description A paginated list of owners for this account.
  */
 owners: {
  /**
   * @description Details about each object.
   */
  data: Schemas.financial_connectionsaccount_owner[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 }
}

/**
 * @title BankConnectionsResourceLinkAccountSession
 * @description A Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.
 */
export type financial_connectionssession = {
 /**
  * @description The account holder for whom accounts are collected in this session.
  */
 account_holder?: Schemas.bank_connections_resource_accountholder | null
 /**
  * @title BankConnectionsResourceLinkedAccountList
  * @description The accounts that were collected as part of this Session.
  */
 accounts: {
  /**
   * @description Details about each object.
   */
  data: Schemas.financial_connectionsaccount[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 }
 /**
  * @description A value that will be passed to the client to launch the authentication flow.
  */
 client_secret: string
 /**
  * @title BankConnectionsResourceLinkAccountSessionFilters
  */
 filters?: Schemas.bank_connections_resource_link_account_session_filters
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'financial_connections.session'
 /**
  * @description Permissions requested for accounts collected during this session.
  */
 permissions: ('balances' | 'ownership' | 'payment_method' | 'transactions')[]
 /**
  * @description Data features requested to be retrieved upon account creation.
  */
 prefetch?: ('balances' | 'ownership' | 'transactions')[] | null
 /**
  * @description For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.
  */
 return_url?: string
}

/**
 * @title BankConnectionsResourceTransaction
 * @description A Transaction represents a real transaction that affects a Financial Connections Account balance.
 */
export type financial_connectionstransaction = {
 /**
  * @description The ID of the Financial Connections Account this transaction belongs to.
  */
 account: string
 /**
  * @description The amount of this transaction, in cents (or local equivalent).
  */
 amount: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description The description of this transaction.
  */
 description: string
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'financial_connections.transaction'
 /**
  * @description The status of the transaction.
  */
 status: ('pending' | 'posted' | 'void')
 /**
  * @title BankConnectionsResourceTransactionResourceStatusTransitions
  */
 status_transitions: Schemas.bank_connections_resource_transaction_resource_status_transitions
 /**
  * @description Time at which the transaction was transacted. Measured in seconds since the Unix epoch.
  */
 transacted_at: number
 /**
  * @description The token of the transaction refresh that last updated or created this transaction.
  */
 transaction_refresh: string
 /**
  * @description Time at which the object was last updated. Measured in seconds since the Unix epoch.
  */
 updated: number
}

/**
 * @title FinancialReportingFinanceReportRunRunParameters
 */
export type financial_reporting_finance_report_run_run_parameters = {
 /**
  * @description The set of output columns requested for inclusion in the report run.
  */
 columns?: string[]
 /**
  * @description Connected account ID by which to filter the report run.
  */
 connected_account?: string
 /**
  * @description Currency of objects to be included in the report run.
  */
 currency?: string
 /**
  * @description Ending timestamp of data to be included in the report run. Can be any UTC timestamp between 1 second after the user specified `interval_start` and 1 second before this report's last `data_available_end` value.
  */
 interval_end?: number
 /**
  * @description Starting timestamp of data to be included in the report run. Can be any UTC timestamp between 1 second after this report's `data_available_start` and 1 second before the user specified `interval_end` value.
  */
 interval_start?: number
 /**
  * @description Payout ID by which to filter the report run.
  */
 payout?: string
 /**
  * @description Category of balance transactions to be included in the report run.
  */
 reporting_category?: string
 /**
  * @description Defaults to `Etc/UTC`. The output timezone for all timestamps in the report. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). Has no effect on `interval_start` or `interval_end`.
  */
 timezone?: string
}

/**
 * @title ForwardedRequestContext
 * @description Metadata about the forwarded request.
 */
export type forwarded_request_context = {
 /**
  * @description The time it took in milliseconds for the destination endpoint to respond.
  */
 destination_duration: number
 /**
  * @description The IP address of the destination.
  */
 destination_ip_address: string
}

/**
 * @title ForwardedRequestDetails
 * @description Details about the request forwarded to the destination endpoint.
 */
export type forwarded_request_details = {
 /**
  * @description The body payload to send to the destination endpoint.
  */
 body: string
 /**
  * @description The headers to include in the forwarded request. Can be omitted if no additional headers (excluding Stripe-generated ones such as the Content-Type header) should be included.
  */
 headers: Schemas.forwarded_request_header[]
 /**
  * @description The HTTP method used to call the destination endpoint.
  */
 http_method: 'POST'
}

/**
 * @title ForwardedRequestHeader
 * @description Header data.
 */
export type forwarded_request_header = {
 /**
  * @description The header name.
  */
 name: string
 /**
  * @description The header value.
  */
 value: string
}

/**
 * @title ForwardedResponseDetails
 * @description Details about the response from the destination endpoint.
 */
export type forwarded_response_details = {
 /**
  * @description The response body from the destination endpoint to Stripe.
  */
 body: string
 /**
  * @description HTTP headers that the destination endpoint returned.
  */
 headers: Schemas.forwarded_request_header[]
 /**
  * @description The HTTP status code that the destination endpoint returned.
  */
 status: number
}

/**
 * @title ForwardingRequest
 * @description Instructs Stripe to make a request on your behalf using the destination URL. The destination URL
 * is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials
 * provided during onboarding, and injects card details from the payment_method into the request.
 * 
 * Stripe redacts all sensitive fields and headers, including authentication credentials and card numbers,
 * before storing the request and response data in the forwarding Request object, which are subject to a
 * 30-day retention period.
 * 
 * You can provide a Stripe idempotency key to make sure that requests with the same key result in only one
 * outbound request. The Stripe idempotency key provided should be unique and different from any idempotency
 * keys provided on the underlying third-party request.
 * 
 * Forwarding Requests are synchronous requests that return a response or time out according to
 * Stripe’s limits.
 * 
 * Related guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).
 */
export type forwardingrequest = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'forwarding.request'
 /**
  * @description The PaymentMethod to insert into the forwarded request. Forwarding previously consumed PaymentMethods is allowed.
  */
 payment_method: string
 /**
  * @description The field kinds to be replaced in the forwarded request.
  */
 replacements: ('card_cvc' | 'card_expiry' | 'card_number' | 'cardholder_name' | 'request_signature')[]
 /**
  * @description Context about the request from Stripe's servers to the destination endpoint.
  */
 request_context?: Schemas.forwarded_request_context | null
 /**
  * @description The request that was sent to the destination endpoint. We redact any sensitive fields.
  */
 request_details?: Schemas.forwarded_request_details | null
 /**
  * @description The response that the destination endpoint returned to us. We redact any sensitive fields.
  */
 response_details?: Schemas.forwarded_response_details | null
 /**
  * @description The destination URL for the forwarded request. Must be supported by the config.
  */
 url?: string | null
}

/**
 * @title CustomerBalanceFundingInstructionsCustomerBalanceFundingInstructions
 * @description Each customer has a [`balance`](https://stripe.com/docs/api/customers/object#customer_object-balance) that is
 * automatically applied to future invoices and payments using the `customer_balance` payment method.
 * Customers can fund this balance by initiating a bank transfer to any account in the
 * `financial_addresses` field.
 * Related guide: [Customer balance funding instructions](https://stripe.com/docs/payments/customer-balance/funding-instructions)
 */
export type funding_instructions = {
 /**
  * @title FundingInstructionsBankTransfer
  */
 bank_transfer: Schemas.funding_instructions_bank_transfer
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description The `funding_type` of the returned instructions
  */
 funding_type: 'bank_transfer'
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'funding_instructions'
}

/**
 * @title FundingInstructionsBankTransfer
 */
export type funding_instructions_bank_transfer = {
 /**
  * @description The country of the bank account to fund
  */
 country: string
 /**
  * @description A list of financial addresses that can be used to fund a particular balance
  */
 financial_addresses: Schemas.funding_instructions_bank_transfer_financial_address[]
 /**
  * @description The bank_transfer type
  */
 type: ('eu_bank_transfer' | 'jp_bank_transfer')
}

/**
 * @title FundingInstructionsBankTransferABARecord
 * @description ABA Records contain U.S. bank account details per the ABA format.
 */
export type funding_instructions_bank_transfer_aba_record = {
 /**
  * @title Address
  */
 account_holder_address: Schemas.address
 /**
  * @description The account holder name
  */
 account_holder_name: string
 /**
  * @description The ABA account number
  */
 account_number: string
 /**
  * @description The account type
  */
 account_type: string
 /**
  * @title Address
  */
 bank_address: Schemas.address
 /**
  * @description The bank name
  */
 bank_name: string
 /**
  * @description The ABA routing number
  */
 routing_number: string
}

/**
 * @title FundingInstructionsBankTransferFinancialAddress
 * @description FinancialAddresses contain identifying information that resolves to a FinancialAccount.
 */
export type funding_instructions_bank_transfer_financial_address = {
 /**
  * @title FundingInstructionsBankTransferABARecord
  * @description ABA Records contain U.S. bank account details per the ABA format.
  */
 aba?: Schemas.funding_instructions_bank_transfer_aba_record
 /**
  * @title FundingInstructionsBankTransferIbanRecord
  * @description Iban Records contain E.U. bank account details per the SEPA format.
  */
 iban?: Schemas.funding_instructions_bank_transfer_iban_record
 /**
  * @title FundingInstructionsBankTransferSortCodeRecord
  * @description Sort Code Records contain U.K. bank account details per the sort code format.
  */
 sort_code?: Schemas.funding_instructions_bank_transfer_sort_code_record
 /**
  * @title FundingInstructionsBankTransferSpeiRecord
  * @description SPEI Records contain Mexico bank account details per the SPEI format.
  */
 spei?: Schemas.funding_instructions_bank_transfer_spei_record
 /**
  * @description The payment networks supported by this FinancialAddress
  */
 supported_networks?: ('ach' | 'bacs' | 'domestic_wire_us' | 'fps' | 'sepa' | 'spei' | 'swift' | 'zengin')[]
 /**
  * @title FundingInstructionsBankTransferSwiftRecord
  * @description SWIFT Records contain U.S. bank account details per the SWIFT format.
  */
 swift?: Schemas.funding_instructions_bank_transfer_swift_record
 /**
  * @description The type of financial address
  */
 type: ('aba' | 'iban' | 'sort_code' | 'spei' | 'swift' | 'zengin')
 /**
  * @title FundingInstructionsBankTransferZenginRecord
  * @description Zengin Records contain Japan bank account details per the Zengin format.
  */
 zengin?: Schemas.funding_instructions_bank_transfer_zengin_record
}

/**
 * @title FundingInstructionsBankTransferIbanRecord
 * @description Iban Records contain E.U. bank account details per the SEPA format.
 */
export type funding_instructions_bank_transfer_iban_record = {
 /**
  * @title Address
  */
 account_holder_address: Schemas.address
 /**
  * @description The name of the person or business that owns the bank account
  */
 account_holder_name: string
 /**
  * @title Address
  */
 bank_address: Schemas.address
 /**
  * @description The BIC/SWIFT code of the account.
  */
 bic: string
 /**
  * @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  */
 country: string
 /**
  * @description The IBAN of the account.
  */
 iban: string
}

/**
 * @title FundingInstructionsBankTransferSortCodeRecord
 * @description Sort Code Records contain U.K. bank account details per the sort code format.
 */
export type funding_instructions_bank_transfer_sort_code_record = {
 /**
  * @title Address
  */
 account_holder_address: Schemas.address
 /**
  * @description The name of the person or business that owns the bank account
  */
 account_holder_name: string
 /**
  * @description The account number
  */
 account_number: string
 /**
  * @title Address
  */
 bank_address: Schemas.address
 /**
  * @description The six-digit sort code
  */
 sort_code: string
}

/**
 * @title FundingInstructionsBankTransferSpeiRecord
 * @description SPEI Records contain Mexico bank account details per the SPEI format.
 */
export type funding_instructions_bank_transfer_spei_record = {
 /**
  * @title Address
  */
 account_holder_address: Schemas.address
 /**
  * @description The account holder name
  */
 account_holder_name: string
 /**
  * @title Address
  */
 bank_address: Schemas.address
 /**
  * @description The three-digit bank code
  */
 bank_code: string
 /**
  * @description The short banking institution name
  */
 bank_name: string
 /**
  * @description The CLABE number
  */
 clabe: string
}

/**
 * @title FundingInstructionsBankTransferSwiftRecord
 * @description SWIFT Records contain U.S. bank account details per the SWIFT format.
 */
export type funding_instructions_bank_transfer_swift_record = {
 /**
  * @title Address
  */
 account_holder_address: Schemas.address
 /**
  * @description The account holder name
  */
 account_holder_name: string
 /**
  * @description The account number
  */
 account_number: string
 /**
  * @description The account type
  */
 account_type: string
 /**
  * @title Address
  */
 bank_address: Schemas.address
 /**
  * @description The bank name
  */
 bank_name: string
 /**
  * @description The SWIFT code
  */
 swift_code: string
}

/**
 * @title FundingInstructionsBankTransferZenginRecord
 * @description Zengin Records contain Japan bank account details per the Zengin format.
 */
export type funding_instructions_bank_transfer_zengin_record = {
 /**
  * @title Address
  */
 account_holder_address: Schemas.address
 /**
  * @description The account holder name
  */
 account_holder_name?: string | null
 /**
  * @description The account number
  */
 account_number?: string | null
 /**
  * @description The bank account type. In Japan, this can only be `futsu` or `toza`.
  */
 account_type?: string | null
 /**
  * @title Address
  */
 bank_address: Schemas.address
 /**
  * @description The bank code of the account
  */
 bank_code?: string | null
 /**
  * @description The bank name of the account
  */
 bank_name?: string | null
 /**
  * @description The branch code of the account
  */
 branch_code?: string | null
 /**
  * @description The branch name of the account
  */
 branch_name?: string | null
}

/**
 * @title GelatoDataDocumentReportDateOfBirth
 * @description Point in Time
 */
export type gelato_data_document_report_date_of_birth = {
 /**
  * @description Numerical day between 1 and 31.
  */
 day?: number | null
 /**
  * @description Numerical month between 1 and 12.
  */
 month?: number | null
 /**
  * @description The four-digit year.
  */
 year?: number | null
}

/**
 * @title GelatoDataDocumentReportExpirationDate
 * @description Point in Time
 */
export type gelato_data_document_report_expiration_date = {
 /**
  * @description Numerical day between 1 and 31.
  */
 day?: number | null
 /**
  * @description Numerical month between 1 and 12.
  */
 month?: number | null
 /**
  * @description The four-digit year.
  */
 year?: number | null
}

/**
 * @title GelatoDataDocumentReportIssuedDate
 * @description Point in Time
 */
export type gelato_data_document_report_issued_date = {
 /**
  * @description Numerical day between 1 and 31.
  */
 day?: number | null
 /**
  * @description Numerical month between 1 and 12.
  */
 month?: number | null
 /**
  * @description The four-digit year.
  */
 year?: number | null
}

/**
 * @title GelatoDataIdNumberReportDate
 * @description Point in Time
 */
export type gelato_data_id_number_report_date = {
 /**
  * @description Numerical day between 1 and 31.
  */
 day?: number | null
 /**
  * @description Numerical month between 1 and 12.
  */
 month?: number | null
 /**
  * @description The four-digit year.
  */
 year?: number | null
}

/**
 * @title GelatoDataVerifiedOutputsDate
 * @description Point in Time
 */
export type gelato_data_verified_outputs_date = {
 /**
  * @description Numerical day between 1 and 31.
  */
 day?: number | null
 /**
  * @description Numerical month between 1 and 12.
  */
 month?: number | null
 /**
  * @description The four-digit year.
  */
 year?: number | null
}

/**
 * @title GelatoDocumentReport
 * @description Result from a document check
 */
export type gelato_document_report = {
 /**
  * @description Address as it appears in the document.
  */
 address?: Schemas.address | null
 /**
  * @description Date of birth as it appears in the document.
  */
 dob?: Schemas.gelato_data_document_report_date_of_birth | null
 /**
  * @description Details on the verification error. Present when status is `unverified`.
  */
 error?: Schemas.gelato_document_report_error | null
 /**
  * @description Expiration date of the document.
  */
 expiration_date?: Schemas.gelato_data_document_report_expiration_date | null
 /**
  * @description Array of [File](https://stripe.com/docs/api/files) ids containing images for this document.
  */
 files?: string[] | null
 /**
  * @description First name as it appears in the document.
  */
 first_name?: string | null
 /**
  * @description Issued date of the document.
  */
 issued_date?: Schemas.gelato_data_document_report_issued_date | null
 /**
  * @description Issuing country of the document.
  */
 issuing_country?: string | null
 /**
  * @description Last name as it appears in the document.
  */
 last_name?: string | null
 /**
  * @description Document ID number.
  */
 number?: string | null
 /**
  * @description Sex of the person in the document.
  */
 sex?: ('[redacted]' | 'female' | 'male' | 'unknown') | null
 /**
  * @description Status of this `document` check.
  */
 status: ('unverified' | 'verified')
 /**
  * @description Type of the document.
  */
 type?: ('driving_license' | 'id_card' | 'passport') | null
 /**
  * @description Place of birth as it appears in the document.
  */
 unparsed_place_of_birth?: string | null
 /**
  * @description Sex as it appears in the document.
  */
 unparsed_sex?: string | null
}

/**
 * @title GelatoDocumentReportError
 */
export type gelato_document_report_error = {
 /**
  * @description A short machine-readable string giving the reason for the verification failure.
  */
 code?: ('document_expired' | 'document_type_not_supported' | 'document_unverified_other') | null
 /**
  * @description A human-readable message giving the reason for the failure. These messages can be shown to your users.
  */
 reason?: string | null
}

/**
 * @title GelatoEmailReport
 * @description Result from a email check
 */
export type gelato_email_report = {
 /**
  * @description Email to be verified.
  */
 email?: string | null
 /**
  * @description Details on the verification error. Present when status is `unverified`.
  */
 error?: Schemas.gelato_email_report_error | null
 /**
  * @description Status of this `email` check.
  */
 status: ('unverified' | 'verified')
}

/**
 * @title GelatoEmailReportError
 */
export type gelato_email_report_error = {
 /**
  * @description A short machine-readable string giving the reason for the verification failure.
  */
 code?: ('email_unverified_other' | 'email_verification_declined') | null
 /**
  * @description A human-readable message giving the reason for the failure. These messages can be shown to your users.
  */
 reason?: string | null
}

/**
 * @title GelatoIdNumberReport
 * @description Result from an id_number check
 */
export type gelato_id_number_report = {
 /**
  * @description Date of birth.
  */
 dob?: Schemas.gelato_data_id_number_report_date | null
 /**
  * @description Details on the verification error. Present when status is `unverified`.
  */
 error?: Schemas.gelato_id_number_report_error | null
 /**
  * @description First name.
  */
 first_name?: string | null
 /**
  * @description ID number. When `id_number_type` is `us_ssn`, only the last 4 digits are present.
  */
 id_number?: string | null
 /**
  * @description Type of ID number.
  */
 id_number_type?: ('br_cpf' | 'sg_nric' | 'us_ssn') | null
 /**
  * @description Last name.
  */
 last_name?: string | null
 /**
  * @description Status of this `id_number` check.
  */
 status: ('unverified' | 'verified')
}

/**
 * @title GelatoIdNumberReportError
 */
export type gelato_id_number_report_error = {
 /**
  * @description A short machine-readable string giving the reason for the verification failure.
  */
 code?: ('id_number_insufficient_document_data' | 'id_number_mismatch' | 'id_number_unverified_other') | null
 /**
  * @description A human-readable message giving the reason for the failure. These messages can be shown to your users.
  */
 reason?: string | null
}

/**
 * @title GelatoPhoneReport
 * @description Result from a phone check
 */
export type gelato_phone_report = {
 /**
  * @description Details on the verification error. Present when status is `unverified`.
  */
 error?: Schemas.gelato_phone_report_error | null
 /**
  * @description Phone to be verified.
  */
 phone?: string | null
 /**
  * @description Status of this `phone` check.
  */
 status: ('unverified' | 'verified')
}

/**
 * @title GelatoPhoneReportError
 */
export type gelato_phone_report_error = {
 /**
  * @description A short machine-readable string giving the reason for the verification failure.
  */
 code?: ('phone_unverified_other' | 'phone_verification_declined') | null
 /**
  * @description A human-readable message giving the reason for the failure. These messages can be shown to your users.
  */
 reason?: string | null
}

/**
 * @title GelatoProvidedDetails
 */
export type gelato_provided_details = {
 /**
  * @description Email of user being verified
  */
 email?: string
 /**
  * @description Phone number of user being verified
  */
 phone?: string
}

/**
 * @title GelatoRelatedPerson
 */
export type gelato_related_person = {
 /**
  * @description Token referencing the associated Account of the related Person resource.
  */
 account: string
 /**
  * @description Token referencing the related Person resource.
  */
 person: string
}

/**
 * @title GelatoReportDocumentOptions
 */
export type gelato_report_document_options = {
 /**
  * @description Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code.
  */
 allowed_types?: ('driving_license' | 'id_card' | 'passport')[]
 /**
  * @description Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth.
  */
 require_id_number?: boolean
 /**
  * @description Disable image uploads, identity document images have to be captured using the device’s camera.
  */
 require_live_capture?: boolean
 /**
  * @description Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie).
  */
 require_matching_selfie?: boolean
}

/**
 * @title GelatoReportIdNumberOptions
 */
export type gelato_report_id_number_options = unknown

/**
 * @title GelatoSelfieReport
 * @description Result from a selfie check
 */
export type gelato_selfie_report = {
 /**
  * @description ID of the [File](https://stripe.com/docs/api/files) holding the image of the identity document used in this check.
  */
 document?: string | null
 /**
  * @description Details on the verification error. Present when status is `unverified`.
  */
 error?: Schemas.gelato_selfie_report_error | null
 /**
  * @description ID of the [File](https://stripe.com/docs/api/files) holding the image of the selfie used in this check.
  */
 selfie?: string | null
 /**
  * @description Status of this `selfie` check.
  */
 status: ('unverified' | 'verified')
}

/**
 * @title GelatoSelfieReportError
 */
export type gelato_selfie_report_error = {
 /**
  * @description A short machine-readable string giving the reason for the verification failure.
  */
 code?: ('selfie_document_missing_photo' | 'selfie_face_mismatch' | 'selfie_manipulated' | 'selfie_unverified_other') | null
 /**
  * @description A human-readable message giving the reason for the failure. These messages can be shown to your users.
  */
 reason?: string | null
}

/**
 * @title GelatoSessionDocumentOptions
 */
export type gelato_session_document_options = {
 /**
  * @description Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code.
  */
 allowed_types?: ('driving_license' | 'id_card' | 'passport')[]
 /**
  * @description Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth.
  */
 require_id_number?: boolean
 /**
  * @description Disable image uploads, identity document images have to be captured using the device’s camera.
  */
 require_live_capture?: boolean
 /**
  * @description Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie).
  */
 require_matching_selfie?: boolean
}

/**
 * @title GelatoSessionEmailOptions
 */
export type gelato_session_email_options = {
 /**
  * @description Request one time password verification of `provided_details.email`.
  */
 require_verification?: boolean
}

/**
 * @title GelatoSessionIdNumberOptions
 */
export type gelato_session_id_number_options = unknown

/**
 * @title GelatoSessionLastError
 * @description Shows last VerificationSession error
 */
export type gelato_session_last_error = {
 /**
  * @description A short machine-readable string giving the reason for the verification or user-session failure.
  */
 code?: ('abandoned' | 'consent_declined' | 'country_not_supported' | 'device_not_supported' | 'document_expired' | 'document_type_not_supported' | 'document_unverified_other' | 'email_unverified_other' | 'email_verification_declined' | 'id_number_insufficient_document_data' | 'id_number_mismatch' | 'id_number_unverified_other' | 'phone_unverified_other' | 'phone_verification_declined' | 'selfie_document_missing_photo' | 'selfie_face_mismatch' | 'selfie_manipulated' | 'selfie_unverified_other' | 'under_supported_age') | null
 /**
  * @description A message that explains the reason for verification or user-session failure.
  */
 reason?: string | null
}

/**
 * @title GelatoSessionMatchingOptions
 */
export type gelato_session_matching_options = {
 /**
  * @description Strictness of the DOB matching policy to apply.
  */
 dob?: ('none' | 'similar')
 /**
  * @description Strictness of the name matching policy to apply.
  */
 name?: ('none' | 'similar')
}

/**
 * @title GelatoSessionPhoneOptions
 */
export type gelato_session_phone_options = {
 /**
  * @description Request one time password verification of `provided_details.phone`.
  */
 require_verification?: boolean
}

/**
 * @title GelatoVerificationReportOptions
 */
export type gelato_verification_report_options = {
 /**
  * @title GelatoReportDocumentOptions
  */
 document?: Schemas.gelato_report_document_options
 /**
  * @title GelatoReportIdNumberOptions
  */
 id_number?: Schemas.gelato_report_id_number_options
}

/**
 * @title GelatoVerificationSessionOptions
 */
export type gelato_verification_session_options = {
 /**
  * @title GelatoSessionDocumentOptions
  */
 document?: Schemas.gelato_session_document_options
 /**
  * @title GelatoSessionEmailOptions
  */
 email?: Schemas.gelato_session_email_options
 /**
  * @title GelatoSessionIdNumberOptions
  */
 id_number?: Schemas.gelato_session_id_number_options
 /**
  * @title GelatoSessionMatchingOptions
  */
 matching?: Schemas.gelato_session_matching_options
 /**
  * @title GelatoSessionPhoneOptions
  */
 phone?: Schemas.gelato_session_phone_options
}

/**
 * @title GelatoVerifiedOutputs
 */
export type gelato_verified_outputs = {
 /**
  * @description The user's verified address.
  */
 address?: Schemas.address | null
 /**
  * @description The user’s verified date of birth.
  */
 dob?: Schemas.gelato_data_verified_outputs_date | null
 /**
  * @description The user's verified email address
  */
 email?: string | null
 /**
  * @description The user's verified first name.
  */
 first_name?: string | null
 /**
  * @description The user's verified id number.
  */
 id_number?: string | null
 /**
  * @description The user's verified id number type.
  */
 id_number_type?: ('br_cpf' | 'sg_nric' | 'us_ssn') | null
 /**
  * @description The user's verified last name.
  */
 last_name?: string | null
 /**
  * @description The user's verified phone number
  */
 phone?: string | null
 /**
  * @description The user's verified sex.
  */
 sex?: ('[redacted]' | 'female' | 'male' | 'unknown') | null
 /**
  * @description The user's verified place of birth as it appears in the document.
  */
 unparsed_place_of_birth?: string | null
 /**
  * @description The user's verified sex as it appears in the document.
  */
 unparsed_sex?: string | null
}

/**
 * @title GelatoVerificationReport
 * @description A VerificationReport is the result of an attempt to collect and verify data from a user.
 * The collection of verification checks performed is determined from the `type` and `options`
 * parameters used. You can find the result of each verification check performed in the
 * appropriate sub-resource: `document`, `id_number`, `selfie`.
 * 
 * Each VerificationReport contains a copy of any data collected by the user as well as
 * reference IDs which can be used to access collected images through the [FileUpload](https://stripe.com/docs/api/files)
 * API. To configure and create VerificationReports, use the
 * [VerificationSession](https://stripe.com/docs/api/identity/verification_sessions) API.
 * 
 * Related guide: [Accessing verification results](https://stripe.com/docs/identity/verification-sessions#results).
 */
export type identityverification_report = {
 /**
  * @description A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
  */
 client_reference_id?: string | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @title GelatoDocumentReport
  * @description Result from a document check
  */
 document?: Schemas.gelato_document_report
 /**
  * @title GelatoEmailReport
  * @description Result from a email check
  */
 email?: Schemas.gelato_email_report
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @title GelatoIdNumberReport
  * @description Result from an id_number check
  */
 id_number?: Schemas.gelato_id_number_report
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'identity.verification_report'
 /**
  * @title GelatoVerificationReportOptions
  */
 options?: Schemas.gelato_verification_report_options
 /**
  * @title GelatoPhoneReport
  * @description Result from a phone check
  */
 phone?: Schemas.gelato_phone_report
 /**
  * @title GelatoSelfieReport
  * @description Result from a selfie check
  */
 selfie?: Schemas.gelato_selfie_report
 /**
  * @description Type of report.
  */
 type: ('document' | 'id_number' | 'verification_flow')
 /**
  * @description The configuration token of a verification flow from the dashboard.
  */
 verification_flow?: string
 /**
  * @description ID of the VerificationSession that created this report.
  */
 verification_session?: string | null
}

/**
 * @title GelatoVerificationSession
 * @description A VerificationSession guides you through the process of collecting and verifying the identities
 * of your users. It contains details about the type of verification, such as what [verification
 * check](/docs/identity/verification-checks) to perform. Only create one VerificationSession for
 * each verification in your system.
 * 
 * A VerificationSession transitions through [multiple
 * statuses](/docs/identity/how-sessions-work) throughout its lifetime as it progresses through
 * the verification flow. The VerificationSession contains the user's verified data after
 * verification checks are complete.
 * 
 * Related guide: [The Verification Sessions API](https://stripe.com/docs/identity/verification-sessions)
 */
export type identityverification_session = {
 /**
  * @description A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
  */
 client_reference_id?: string | null
 /**
  * @description The short-lived client secret used by Stripe.js to [show a verification modal](https://stripe.com/docs/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://stripe.com/docs/identity/verification-sessions#client-secret) to learn more.
  */
 client_secret?: string | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description If present, this property tells you the last error encountered when processing the verification.
  */
 last_error?: Schemas.gelato_session_last_error | null
 /**
  * @description ID of the most recent VerificationReport. [Learn more about accessing detailed verification results.](https://stripe.com/docs/identity/verification-sessions#results)
  */
 last_verification_report?: (string | Schemas.identityverification_report) | null
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'identity.verification_session'
 /**
  * @description A set of options for the session’s verification checks.
  */
 options?: Schemas.gelato_verification_session_options | null
 /**
  * @description Details provided about the user being verified. These details may be shown to the user.
  */
 provided_details?: Schemas.gelato_provided_details | null
 /**
  * @description Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null.
  */
 redaction?: Schemas.verification_session_redaction | null
 /**
  * @description Customer ID
  */
 related_customer?: string | null
 /**
  * @title GelatoRelatedPerson
  */
 related_person?: Schemas.gelato_related_person
 /**
  * @description Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).
  */
 status: ('canceled' | 'processing' | 'requires_input' | 'verified')
 /**
  * @description The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
  */
 type: ('document' | 'id_number' | 'verification_flow')
 /**
  * @description The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 48 hours and can only be used once. Don’t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://stripe.com/docs/identity/verify-identity-documents?platform=web&type=redirect) to learn how to redirect users to Stripe.
  */
 url?: string | null
 /**
  * @description The configuration token of a verification flow from the dashboard.
  */
 verification_flow?: string
 /**
  * @description The user’s verified data.
  */
 verified_outputs?: Schemas.gelato_verified_outputs | null
}

/**
 * @title InboundTransfers
 */
export type inbound_transfers = {
 /**
  * @title TreasurySharedResourceBillingDetails
  */
 billing_details: Schemas.treasury_shared_resource_billing_details
 /**
  * @description The type of the payment method used in the InboundTransfer.
  */
 type: 'us_bank_account'
 /**
  * @title inbound_transfers_payment_method_details_us_bank_account
  */
 us_bank_account?: Schemas.inbound_transfers_payment_method_details_us_bank_account
}

/**
 * @title inbound_transfers_payment_method_details_us_bank_account
 */
export type inbound_transfers_payment_method_details_us_bank_account = {
 /**
  * @description Account holder type: individual or company.
  */
 account_holder_type?: ('company' | 'individual') | null
 /**
  * @description Account type: checkings or savings. Defaults to checking if omitted.
  */
 account_type?: ('checking' | 'savings') | null
 /**
  * @description Name of the bank associated with the bank account.
  */
 bank_name?: string | null
 /**
  * @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  */
 fingerprint?: string | null
 /**
  * @description Last four digits of the bank account number.
  */
 last4?: string | null
 /**
  * @description ID of the mandate used to make this payment.
  */
 mandate?: (string | Schemas.mandate)
 /**
  * @description The network rails used. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
  */
 network: 'ach'
 /**
  * @description Routing number of the bank account.
  */
 routing_number?: string | null
}

/**
 * @title internal_card
 */
export type internal_card = {
 /**
  * @description Brand of the card used in the transaction
  */
 brand?: string | null
 /**
  * @description Two-letter ISO code representing the country of the card
  */
 country?: string | null
 /**
  * @description Two digit number representing the card's expiration month
  */
 exp_month?: number | null
 /**
  * @description Two digit number representing the card's expiration year
  */
 exp_year?: number | null
 /**
  * @description The last 4 digits of the card
  */
 last4?: string | null
}

/**
 * @title Invoice
 * @description Invoices are statements of amounts owed by a customer, and are either
 * generated one-off, or generated periodically from a subscription.
 * 
 * They contain [invoice items](https://stripe.com/docs/api#invoiceitems), and proration adjustments
 * that may be caused by subscription upgrades/downgrades (if necessary).
 * 
 * If your invoice is configured to be billed through automatic charges,
 * Stripe automatically finalizes your invoice and attempts payment. Note
 * that finalizing the invoice,
 * [when automatic](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection), does
 * not happen immediately as the invoice is created. Stripe waits
 * until one hour after the last webhook was successfully sent (or the last
 * webhook timed out after failing). If you (and the platforms you may have
 * connected to) have no webhooks configured, Stripe waits one hour after
 * creation to finalize the invoice.
 * 
 * If your invoice is configured to be billed by sending an email, then based on your
 * [email settings](https://dashboard.stripe.com/account/billing/automatic),
 * Stripe will email the invoice to your customer and await payment. These
 * emails can contain a link to a hosted page to pay the invoice.
 * 
 * Stripe applies any customer credit on the account before determining the
 * amount due for the invoice (i.e., the amount that will be actually
 * charged). If the amount due for the invoice is less than Stripe's [minimum allowed charge
 * per currency](/docs/currencies#minimum-and-maximum-charge-amounts), the
 * invoice is automatically marked paid, and we add the amount due to the
 * customer's credit balance which is applied to the next invoice.
 * 
 * More details on the customer's credit balance are
 * [here](https://stripe.com/docs/billing/customer/balance).
 * 
 * Related guide: [Send invoices to customers](https://stripe.com/docs/billing/invoices/sending)
 */
export type invoice = {
 /**
  * @description The country of the business associated with this invoice, most often the business creating the invoice.
  */
 account_country?: string | null
 /**
  * @description The public name of the business associated with this invoice, most often the business creating the invoice.
  */
 account_name?: string | null
 /**
  * @description The account tax IDs associated with the invoice. Only editable when the invoice is a draft.
  */
 account_tax_ids?: (string | Schemas.tax_id | Schemas.deleted_tax_id)[] | null
 /**
  * @description Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
  */
 amount_due: number
 /**
  * @description Amount that was overpaid on the invoice. The amount overpaid is credited to the customer's credit balance.
  */
 amount_overpaid: number
 /**
  * @description The amount, in cents (or local equivalent), that was paid.
  */
 amount_paid: number
 /**
  * @description The difference between amount_due and amount_paid, in cents (or local equivalent).
  */
 amount_remaining: number
 /**
  * @description This is the sum of all the shipping amounts.
  */
 amount_shipping: number
 /**
  * @description ID of the Connect Application that created the invoice.
  */
 application?: (string | Schemas.application | Schemas.deleted_application) | null
 /**
  * @description Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule. If a failure is returned with a non-retryable return code, the invoice can no longer be retried unless a new payment method is obtained. Retries will continue to be scheduled, and attempt_count will continue to increment, but retries will only be executed if a new payment method is obtained.
  */
 attempt_count: number
 /**
  * @description Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.
  */
 attempted: boolean
 /**
  * @description Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action.
  */
 auto_advance: boolean
 /**
  * @title AutomaticTax
  */
 automatic_tax: Schemas.automatic_tax
 /**
  * @description The time when this invoice is currently scheduled to be automatically finalized. The field will be `null` if the invoice is not scheduled to finalize in the future. If the invoice is not in the draft state, this field will always be `null` - see `finalized_at` for the time when an already-finalized invoice was finalized.
  */
 automatically_finalizes_at?: number | null
 /**
  * @description Indicates the reason why the invoice was created.
  * 
  * * `manual`: Unrelated to a subscription, for example, created via the invoice editor.
  * * `subscription`: No longer in use. Applies to subscriptions from before May 2018 where no distinction was made between updates, cycles, and thresholds.
  * * `subscription_create`: A new subscription was created.
  * * `subscription_cycle`: A subscription advanced into a new period.
  * * `subscription_threshold`: A subscription reached a billing threshold.
  * * `subscription_update`: A subscription was updated.
  * * `upcoming`: Reserved for simulated invoices, per the upcoming invoice endpoint.
  */
 billing_reason?: ('automatic_pending_invoice_item_invoice' | 'manual' | 'quote_accept' | 'subscription' | 'subscription_create' | 'subscription_cycle' | 'subscription_threshold' | 'subscription_update' | 'upcoming') | null
 /**
  * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
  */
 collection_method: ('charge_automatically' | 'send_invoice')
 /**
  * @description The confirmation secret associated with this invoice. Currently, this contains the client_secret of the PaymentIntent that Stripe creates during invoice finalization.
  */
 confirmation_secret?: Schemas.invoices_resource_confirmation_secret | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description Custom fields displayed on the invoice.
  */
 custom_fields?: Schemas.invoice_setting_custom_field[] | null
 /**
  * @description The ID of the customer who will be billed.
  */
 customer: (string | Schemas.customer | Schemas.deleted_customer)
 /**
  * @description The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated.
  */
 customer_address?: Schemas.address | null
 /**
  * @description The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated.
  */
 customer_email?: string | null
 /**
  * @description The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated.
  */
 customer_name?: string | null
 /**
  * @description The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated.
  */
 customer_phone?: string | null
 /**
  * @description The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated.
  */
 customer_shipping?: Schemas.shipping | null
 /**
  * @description The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated.
  */
 customer_tax_exempt?: ('exempt' | 'none' | 'reverse') | null
 /**
  * @description The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated.
  */
 customer_tax_ids?: Schemas.invoices_resource_invoice_tax_id[] | null
 /**
  * @description ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.
  */
 default_payment_method?: (string | Schemas.payment_method) | null
 /**
  * @description ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.
  */
 default_source?: (string | Schemas.bank_account | Schemas.card | Schemas.source) | null
 /**
  * @description The tax rates applied to this invoice, if any.
  */
 default_tax_rates: Schemas.tax_rate[]
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
  */
 description?: string | null
 /**
  * @description The discounts applied to the invoice. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
  */
 discounts: (string | Schemas.discount | Schemas.deleted_discount)[]
 /**
  * @description The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`.
  */
 due_date?: number | null
 /**
  * @description The date when this invoice is in effect. Same as `finalized_at` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the invoice PDF and receipt.
  */
 effective_at?: number | null
 /**
  * @description Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null.
  */
 ending_balance?: number | null
 /**
  * @description Footer displayed on the invoice.
  */
 footer?: string | null
 /**
  * @description Details of the invoice that was cloned. See the [revision documentation](https://stripe.com/docs/invoicing/invoice-revisions) for more details.
  */
 from_invoice?: Schemas.invoices_resource_from_invoice | null
 /**
  * @description The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.
  */
 hosted_invoice_url?: string | null
 /**
  * @description Unique identifier for the object. For preview invoices created using the [create preview](https://stripe.com/docs/api/invoices/create_preview) endpoint, this id will be prefixed with `upcoming_in`.
  */
 id: string
 /**
  * @description The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null.
  */
 invoice_pdf?: string | null
 /**
  * @title ConnectAccountReference
  */
 issuer: Schemas.connect_account_reference
 /**
  * @description The error encountered during the previous attempt to finalize the invoice. This field is cleared when the invoice is successfully finalized.
  */
 last_finalization_error?: Schemas.api_errors | null
 /**
  * @description The ID of the most recent non-draft revision of this invoice
  */
 latest_revision?: (string | Schemas.invoice) | null
 /**
  * @title InvoiceLinesList
  * @description The individual line items that make up the invoice. `lines` is sorted as follows: (1) pending invoice items (including prorations) in reverse chronological order, (2) subscription items in reverse chronological order, and (3) invoice items added after invoice creation in chronological order.
  */
 lines: {
  /**
   * @description Details about each object.
   */
  data: Schemas.line_item[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 }
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`.
  */
 next_payment_attempt?: number | null
 /**
  * @description A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified.
  */
 number?: string | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'invoice'
 /**
  * @description The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.
  */
 on_behalf_of?: (string | Schemas.account) | null
 /**
  * @description The parent that generated this invoice
  */
 parent?: Schemas.billing_bill_resource_invoicing_parents_invoice_parent | null
 /**
  * @title InvoicesPaymentSettings
  */
 payment_settings: Schemas.invoices_payment_settings
 /**
  * @title InvoicesPaymentsListInvoicePayments
  * @description Payments for this invoice
  */
 payments?: {
  /**
   * @description Details about each object.
   */
  data: Schemas.invoice_payment[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 }
 /**
  * @description End of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.
  */
 period_end: number
 /**
  * @description Start of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.
  */
 period_start: number
 /**
  * @description Total amount of all post-payment credit notes issued for this invoice.
  */
 post_payment_credit_notes_amount: number
 /**
  * @description Total amount of all pre-payment credit notes issued for this invoice.
  */
 pre_payment_credit_notes_amount: number
 /**
  * @description This is the transaction number that appears on email receipts sent for this invoice.
  */
 receipt_number?: string | null
 /**
  * @description The rendering-related settings that control how the invoice is displayed on customer-facing surfaces such as PDF and Hosted Invoice Page.
  */
 rendering?: Schemas.invoices_resource_invoice_rendering | null
 /**
  * @description The details of the cost of shipping, including the ShippingRate applied on the invoice.
  */
 shipping_cost?: Schemas.invoices_resource_shipping_cost | null
 /**
  * @description Shipping details for the invoice. The Invoice PDF will use the `shipping_details` value if it is set, otherwise the PDF will render the shipping address from the customer.
  */
 shipping_details?: Schemas.shipping | null
 /**
  * @description Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance. For revision invoices, this also includes any customer balance that was applied to the original invoice.
  */
 starting_balance: number
 /**
  * @description Extra information about an invoice for the customer's credit card statement.
  */
 statement_descriptor?: string | null
 /**
  * @description The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
  */
 status?: ('draft' | 'open' | 'paid' | 'uncollectible' | 'void') | null
 /**
  * @title InvoicesResourceStatusTransitions
  */
 status_transitions: Schemas.invoices_resource_status_transitions
 /**
  * @description Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or exclusive tax is applied. Item discounts are already incorporated
  */
 subtotal: number
 /**
  * @description The integer amount in cents (or local equivalent) representing the subtotal of the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated
  */
 subtotal_excluding_tax?: number | null
 /**
  * @description ID of the test clock this invoice belongs to.
  */
 test_clock?: (string | Schemas.test_helperstest_clock) | null
 /**
  * @title InvoiceThresholdReason
  */
 threshold_reason?: Schemas.invoice_threshold_reason
 /**
  * @description Total after discounts and taxes.
  */
 total: number
 /**
  * @description The aggregate amounts calculated per discount across all line items.
  */
 total_discount_amounts?: Schemas.discounts_resource_discount_amount[] | null
 /**
  * @description The integer amount in cents (or local equivalent) representing the total amount of the invoice including all discounts but excluding all tax.
  */
 total_excluding_tax?: number | null
 /**
  * @description Contains pretax credit amounts (ex: discount, credit grants, etc) that apply to this invoice. This is a combined list of total_pretax_credit_amounts across all invoice line items.
  */
 total_pretax_credit_amounts?: Schemas.invoices_resource_pretax_credit_amount[] | null
 /**
  * @description The aggregate tax information of all line items.
  */
 total_taxes?: Schemas.billing_bill_resource_invoicing_taxes_tax[] | null
 /**
  * @description Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created.
  */
 webhooks_delivered_at?: number | null
}

/**
 * @title invoice_installments_card
 */
export type invoice_installments_card = {
 /**
  * @description Whether Installments are enabled for this Invoice.
  */
 enabled?: boolean | null
}

/**
 * @title InvoiceItemThresholdReason
 */
export type invoice_item_threshold_reason = {
 /**
  * @description The IDs of the line items that triggered the threshold invoice.
  */
 line_item_ids: string[]
 /**
  * @description The quantity threshold boundary that applied to the given line item.
  */
 usage_gte: number
}

/**
 * @title InvoiceLineItemPeriod
 */
export type invoice_line_item_period = {
 /**
  * @description The end of the period, which must be greater than or equal to the start. This value is inclusive.
  */
 end: number
 /**
  * @description The start of the period. This value is inclusive.
  */
 start: number
}

/**
 * @title invoice_mandate_options_card
 */
export type invoice_mandate_options_card = {
 /**
  * @description Amount to be charged for future payments.
  */
 amount?: number | null
 /**
  * @description One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
  */
 amount_type?: ('fixed' | 'maximum') | null
 /**
  * @description A description of the mandate or subscription that is meant to be displayed to the customer.
  */
 description?: string | null
}

/**
 * @title InvoicesInvoicePayment
 * @description Invoice Payments represent payments made against invoices. Invoice Payments can
 * be accessed in two ways:
 * 1. By expanding the `payments` field on the [Invoice](https://stripe.com/docs/api#invoice) resource.
 * 2. By using the Invoice Payment retrieve and list endpoints.
 * 
 * Invoice Payments include the mapping between payment objects, such as Payment Intent, and Invoices.
 * This resource and its endpoints allows you to easily track if a payment is associated with a specific invoice and
 * monitor the allocation details of the payments.
 */
export type invoice_payment = {
 /**
  * @description Amount that was actually paid for this invoice, in cents (or local equivalent). This field is null until the payment is `paid`. This amount can be less than the `amount_requested` if the PaymentIntent’s `amount_received` is not sufficient to pay all of the invoices that it is attached to.
  */
 amount_paid?: number | null
 /**
  * @description Amount intended to be paid toward this invoice, in cents (or local equivalent)
  */
 amount_requested: number
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The invoice that was paid.
  */
 invoice: (string | Schemas.invoice | Schemas.deleted_invoice)
 /**
  * @description Stripe automatically creates a default InvoicePayment when the invoice is finalized, and keeps it synchronized with the invoice’s `amount_remaining`. The PaymentIntent associated with the default payment can’t be edited or canceled directly.
  */
 is_default: boolean
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'invoice_payment'
 /**
  * @title InvoicesPaymentsInvoicePaymentAssociatedPayment
  */
 payment: Schemas.invoices_payments_invoice_payment_associated_payment
 /**
  * @description The status of the payment, one of `open`, `paid`, or `canceled`.
  */
 status: string
 /**
  * @title InvoicesPaymentsInvoicePaymentStatusTransitions
  */
 status_transitions: Schemas.invoices_payments_invoice_payment_status_transitions
}

/**
 * @title invoice_payment_method_options_acss_debit
 */
export type invoice_payment_method_options_acss_debit = {
 /**
  * @title invoice_payment_method_options_acss_debit_mandate_options
  */
 mandate_options?: Schemas.invoice_payment_method_options_acss_debit_mandate_options
 /**
  * @description Bank account verification method.
  */
 verification_method?: ('automatic' | 'instant' | 'microdeposits')
}

/**
 * @title invoice_payment_method_options_acss_debit_mandate_options
 */
export type invoice_payment_method_options_acss_debit_mandate_options = {
 /**
  * @description Transaction type of the mandate.
  */
 transaction_type?: ('business' | 'personal') | null
}

/**
 * @title invoice_payment_method_options_bancontact
 */
export type invoice_payment_method_options_bancontact = {
 /**
  * @description Preferred language of the Bancontact authorization page that the customer is redirected to.
  */
 preferred_language: ('de' | 'en' | 'fr' | 'nl')
}

/**
 * @title invoice_payment_method_options_card
 */
export type invoice_payment_method_options_card = {
 /**
  * @title invoice_installments_card
  */
 installments?: Schemas.invoice_installments_card
 /**
  * @description We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  */
 request_three_d_secure?: ('any' | 'automatic' | 'challenge') | null
}

/**
 * @title invoice_payment_method_options_customer_balance
 */
export type invoice_payment_method_options_customer_balance = {
 /**
  * @title invoice_payment_method_options_customer_balance_bank_transfer
  */
 bank_transfer?: Schemas.invoice_payment_method_options_customer_balance_bank_transfer
 /**
  * @description The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
  */
 funding_type?: 'bank_transfer' | null
}

/**
 * @title invoice_payment_method_options_customer_balance_bank_transfer
 */
export type invoice_payment_method_options_customer_balance_bank_transfer = {
 /**
  * @title invoice_payment_method_options_customer_balance_bank_transfer_eu_bank_transfer
  */
 eu_bank_transfer?: Schemas.invoice_payment_method_options_customer_balance_bank_transfer_eu_bank_transfer
 /**
  * @description The bank transfer type that can be used for funding. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
  */
 type?: string | null
}

/**
 * @title invoice_payment_method_options_customer_balance_bank_transfer_eu_bank_transfer
 */
export type invoice_payment_method_options_customer_balance_bank_transfer_eu_bank_transfer = {
 /**
  * @description The desired country code of the bank account information. Permitted values include: `BE`, `DE`, `ES`, `FR`, `IE`, or `NL`.
  */
 country: ('BE' | 'DE' | 'ES' | 'FR' | 'IE' | 'NL')
}

/**
 * @title invoice_payment_method_options_konbini
 */
export type invoice_payment_method_options_konbini = unknown

/**
 * @title invoice_payment_method_options_sepa_debit
 */
export type invoice_payment_method_options_sepa_debit = unknown

/**
 * @title invoice_payment_method_options_us_bank_account
 */
export type invoice_payment_method_options_us_bank_account = {
 /**
  * @title invoice_payment_method_options_us_bank_account_linked_account_options
  */
 financial_connections?: Schemas.invoice_payment_method_options_us_bank_account_linked_account_options
 /**
  * @description Bank account verification method.
  */
 verification_method?: ('automatic' | 'instant' | 'microdeposits')
}

/**
 * @title invoice_payment_method_options_us_bank_account_linked_account_options
 */
export type invoice_payment_method_options_us_bank_account_linked_account_options = {
 /**
  * @title invoice_payment_method_options_us_bank_account_linked_account_options_filters
  */
 filters?: Schemas.invoice_payment_method_options_us_bank_account_linked_account_options_filters
 /**
  * @description The list of permissions to request. The `payment_method` permission must be included.
  */
 permissions?: ('balances' | 'ownership' | 'payment_method' | 'transactions')[]
 /**
  * @description Data features requested to be retrieved upon account creation.
  */
 prefetch?: ('balances' | 'ownership' | 'transactions')[] | null
}

/**
 * @title invoice_payment_method_options_us_bank_account_linked_account_options_filters
 */
export type invoice_payment_method_options_us_bank_account_linked_account_options_filters = {
 /**
  * @description The account subcategories to use to filter for possible accounts to link. Valid subcategories are `checking` and `savings`.
  */
 account_subcategories?: ('checking' | 'savings')[]
}

/**
 * @title InvoiceRenderingPdf
 */
export type invoice_rendering_pdf = {
 /**
  * @description Page size of invoice pdf. Options include a4, letter, and auto. If set to auto, page size will be switched to a4 or letter based on customer locale.
  */
 page_size?: ('a4' | 'auto' | 'letter') | null
}

/**
 * @title InvoiceRenderingTemplate
 * @description Invoice Rendering Templates are used to configure how invoices are rendered on surfaces like the PDF. Invoice Rendering Templates
 * can be created from within the Dashboard, and they can be used over the API when creating invoices.
 */
export type invoice_rendering_template = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description A brief description of the template, hidden from customers
  */
 nickname?: string | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'invoice_rendering_template'
 /**
  * @description The status of the template, one of `active` or `archived`.
  */
 status: ('active' | 'archived')
 /**
  * @description Version of this template; version increases by one when an update on the template changes any field that controls invoice rendering
  */
 version: number
}

/**
 * @title invoice_setting_checkout_rendering_options
 */
export type invoice_setting_checkout_rendering_options = {
 /**
  * @description How line-item prices and amounts will be displayed with respect to tax on invoice PDFs.
  */
 amount_tax_display?: string | null
 /**
  * @description ID of the invoice rendering template to be used for the generated invoice.
  */
 template?: string | null
}

/**
 * @title InvoiceSettingCustomField
 */
export type invoice_setting_custom_field = {
 /**
  * @description The name of the custom field.
  */
 name: string
 /**
  * @description The value of the custom field.
  */
 value: string
}

/**
 * @title InvoiceSettingCustomerRenderingOptions
 */
export type invoice_setting_customer_rendering_options = {
 /**
  * @description How line-item prices and amounts will be displayed with respect to tax on invoice PDFs.
  */
 amount_tax_display?: string | null
 /**
  * @description ID of the invoice rendering template to be used for this customer's invoices. If set, the template will be used on all invoices for this customer unless a template is set directly on the invoice.
  */
 template?: string | null
}

/**
 * @title InvoiceSettingCustomerSetting
 */
export type invoice_setting_customer_setting = {
 /**
  * @description Default custom fields to be displayed on invoices for this customer.
  */
 custom_fields?: Schemas.invoice_setting_custom_field[] | null
 /**
  * @description ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices.
  */
 default_payment_method?: (string | Schemas.payment_method) | null
 /**
  * @description Default footer to be displayed on invoices for this customer.
  */
 footer?: string | null
 /**
  * @description Default options for invoice PDF rendering for this customer.
  */
 rendering_options?: Schemas.invoice_setting_customer_rendering_options | null
}

/**
 * @title InvoiceSettingQuoteSetting
 */
export type invoice_setting_quote_setting = {
 /**
  * @description Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`.
  */
 days_until_due?: number | null
 /**
  * @title ConnectAccountReference
  */
 issuer: Schemas.connect_account_reference
}

/**
 * @title InvoiceSettingSubscriptionSchedulePhaseSetting
 */
export type invoice_setting_subscription_schedule_phase_setting = {
 /**
  * @description The account tax IDs associated with this phase of the subscription schedule. Will be set on invoices generated by this phase of the subscription schedule.
  */
 account_tax_ids?: (string | Schemas.tax_id | Schemas.deleted_tax_id)[] | null
 /**
  * @description Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
  */
 days_until_due?: number | null
 /**
  * @description The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
  */
 issuer?: Schemas.connect_account_reference | null
}

/**
 * @title InvoiceSettingSubscriptionScheduleSetting
 */
export type invoice_setting_subscription_schedule_setting = {
 /**
  * @description The account tax IDs associated with the subscription schedule. Will be set on invoices generated by the subscription schedule.
  */
 account_tax_ids?: (string | Schemas.tax_id | Schemas.deleted_tax_id)[] | null
 /**
  * @description Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
  */
 days_until_due?: number | null
 /**
  * @title ConnectAccountReference
  */
 issuer: Schemas.connect_account_reference
}

/**
 * @title InvoiceThresholdReason
 */
export type invoice_threshold_reason = {
 /**
  * @description The total invoice amount threshold boundary if it triggered the threshold invoice.
  */
 amount_gte?: number | null
 /**
  * @description Indicates which line items triggered a threshold invoice.
  */
 item_reasons: Schemas.invoice_item_threshold_reason[]
}

/**
 * @title InvoiceItem
 * @description Invoice Items represent the component lines of an [invoice](https://stripe.com/docs/api/invoices). When you create an invoice item with an `invoice` field, it is attached to the specified invoice and included as [an invoice line item](https://stripe.com/docs/api/invoices/line_item) within [invoice.lines](https://stripe.com/docs/api/invoices/object#invoice_object-lines).
 * 
 * Invoice Items can be created before you are ready to actually send the invoice. This can be particularly useful when combined
 * with a [subscription](https://stripe.com/docs/api/subscriptions). Sometimes you want to add a charge or credit to a customer, but actually charge
 * or credit the customer's card only at the end of a regular billing cycle. This is useful for combining several charges
 * (to minimize per-transaction fees), or for having Stripe tabulate your usage-based billing totals.
 * 
 * Related guides: [Integrate with the Invoicing API](https://stripe.com/docs/invoicing/integration), [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).
 */
export type invoiceitem = {
 /**
  * @description Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.
  */
 amount: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description The ID of the customer who will be billed when this invoice item is billed.
  */
 customer: (string | Schemas.customer | Schemas.deleted_customer)
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 date: number
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description?: string | null
 /**
  * @description If true, discounts will apply to this invoice item. Always false for prorations.
  */
 discountable: boolean
 /**
  * @description The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
  */
 discounts?: (string | Schemas.discount)[] | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The ID of the invoice this invoice item belongs to.
  */
 invoice?: (string | Schemas.invoice) | null
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'invoiceitem'
 /**
  * @description The parent that generated this invoice item.
  */
 parent?: Schemas.billing_bill_resource_invoice_item_parents_invoice_item_parent | null
 /**
  * @title InvoiceLineItemPeriod
  */
 period: Schemas.invoice_line_item_period
 /**
  * @description The pricing information of the invoice item.
  */
 pricing?: Schemas.billing_bill_resource_invoicing_pricing_pricing | null
 /**
  * @description Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.
  */
 proration: boolean
 /**
  * @description Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.
  */
 quantity: number
 /**
  * @description The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item.
  */
 tax_rates?: Schemas.tax_rate[] | null
 /**
  * @description ID of the test clock this invoice item belongs to.
  */
 test_clock?: (string | Schemas.test_helperstest_clock) | null
}

/**
 * @title InvoicesPaymentMethodOptions
 */
export type invoices_payment_method_options = {
 /**
  * @description If paying by `acss_debit`, this sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to the invoice’s PaymentIntent.
  */
 acss_debit?: Schemas.invoice_payment_method_options_acss_debit | null
 /**
  * @description If paying by `bancontact`, this sub-hash contains details about the Bancontact payment method options to pass to the invoice’s PaymentIntent.
  */
 bancontact?: Schemas.invoice_payment_method_options_bancontact | null
 /**
  * @description If paying by `card`, this sub-hash contains details about the Card payment method options to pass to the invoice’s PaymentIntent.
  */
 card?: Schemas.invoice_payment_method_options_card | null
 /**
  * @description If paying by `customer_balance`, this sub-hash contains details about the Bank transfer payment method options to pass to the invoice’s PaymentIntent.
  */
 customer_balance?: Schemas.invoice_payment_method_options_customer_balance | null
 /**
  * @description If paying by `konbini`, this sub-hash contains details about the Konbini payment method options to pass to the invoice’s PaymentIntent.
  */
 konbini?: Schemas.invoice_payment_method_options_konbini | null
 /**
  * @description If paying by `sepa_debit`, this sub-hash contains details about the SEPA Direct Debit payment method options to pass to the invoice’s PaymentIntent.
  */
 sepa_debit?: Schemas.invoice_payment_method_options_sepa_debit | null
 /**
  * @description If paying by `us_bank_account`, this sub-hash contains details about the ACH direct debit payment method options to pass to the invoice’s PaymentIntent.
  */
 us_bank_account?: Schemas.invoice_payment_method_options_us_bank_account | null
}

/**
 * @title InvoicesPaymentSettings
 */
export type invoices_payment_settings = {
 /**
  * @description ID of the mandate to be used for this invoice. It must correspond to the payment method used to pay the invoice, including the invoice's default_payment_method or default_source, if set.
  */
 default_mandate?: string | null
 /**
  * @description Payment-method-specific configuration to provide to the invoice’s PaymentIntent.
  */
 payment_method_options?: Schemas.invoices_payment_method_options | null
 /**
  * @description The list of payment method types (e.g. card) to provide to the invoice’s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
  */
 payment_method_types?: ('ach_credit_transfer' | 'ach_debit' | 'acss_debit' | 'affirm' | 'amazon_pay' | 'au_becs_debit' | 'bacs_debit' | 'bancontact' | 'boleto' | 'card' | 'cashapp' | 'crypto' | 'customer_balance' | 'eps' | 'fpx' | 'giropay' | 'grabpay' | 'ideal' | 'jp_credit_transfer' | 'kakao_pay' | 'klarna' | 'konbini' | 'kr_card' | 'link' | 'multibanco' | 'naver_pay' | 'nz_bank_account' | 'p24' | 'payco' | 'paynow' | 'paypal' | 'promptpay' | 'revolut_pay' | 'sepa_credit_transfer' | 'sepa_debit' | 'sofort' | 'swish' | 'us_bank_account' | 'wechat_pay')[] | null
}

/**
 * @title InvoicesPaymentsInvoicePaymentAssociatedPayment
 */
export type invoices_payments_invoice_payment_associated_payment = {
 /**
  * @description ID of the successful charge for this payment when `type` is `charge`.Note: charge is only surfaced if the charge object is not associated with a payment intent. If the charge object does have a payment intent, the Invoice Payment surfaces the payment intent instead.
  */
 charge?: (string | Schemas.charge)
 /**
  * @description ID of the PaymentIntent associated with this payment when `type` is `payment_intent`. Note: This property is only populated for invoices finalized on or after March 15th, 2019.
  */
 payment_intent?: (string | Schemas.payment_intent)
 /**
  * @description Type of payment object associated with this invoice payment.
  */
 type: ('charge' | 'payment_intent')
}

/**
 * @title InvoicesPaymentsInvoicePaymentStatusTransitions
 */
export type invoices_payments_invoice_payment_status_transitions = {
 /**
  * @description The time that the payment was canceled.
  */
 canceled_at?: number | null
 /**
  * @description The time that the payment succeeded.
  */
 paid_at?: number | null
}

/**
 * @title InvoicesResourceConfirmationSecret
 */
export type invoices_resource_confirmation_secret = {
 /**
  * @description The client_secret of the payment that Stripe creates for the invoice after finalization.
  */
 client_secret: string
 /**
  * @description The type of client_secret. Currently this is always payment_intent, referencing the default payment_intent that Stripe creates during invoice finalization
  */
 type: string
}

/**
 * @title InvoicesResourceFromInvoice
 */
export type invoices_resource_from_invoice = {
 /**
  * @description The relation between this invoice and the cloned invoice
  */
 action: string
 /**
  * @description The invoice that was cloned.
  */
 invoice: (string | Schemas.invoice)
}

/**
 * @title InvoicesResourceInvoiceRendering
 */
export type invoices_resource_invoice_rendering = {
 /**
  * @description How line-item prices and amounts will be displayed with respect to tax on invoice PDFs.
  */
 amount_tax_display?: string | null
 /**
  * @description Invoice pdf rendering options
  */
 pdf?: Schemas.invoice_rendering_pdf | null
 /**
  * @description ID of the rendering template that the invoice is formatted by.
  */
 template?: string | null
 /**
  * @description Version of the rendering template that the invoice is using.
  */
 template_version?: number | null
}

/**
 * @title InvoicesResourceInvoiceTaxID
 */
export type invoices_resource_invoice_tax_id = {
 /**
  * @description The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `hr_oib`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `no_voec`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `li_vat`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, `al_tin`, `bh_vat`, `kz_bin`, `ng_tin`, `om_vat`, `de_stn`, `ch_uid`, `tz_vat`, `uz_vat`, `uz_tin`, `md_vat`, `ma_vat`, `by_tin`, `ao_tin`, `bs_tin`, `bb_tin`, `cd_nif`, `mr_nif`, `me_pib`, `zw_tin`, `ba_tin`, `gn_nif`, `mk_vat`, `sr_fin`, `sn_ninea`, `am_tin`, `np_pan`, `tj_tin`, `ug_tin`, `zm_tin`, `kh_tin`, `aw_tin`, `az_tin`, `bd_bin`, `bj_ifu`, `et_tin`, `kg_tin`, `la_tin`, `cm_niu`, `cv_nif`, `bf_ifu`, or `unknown`
  */
 type: ('ad_nrt' | 'ae_trn' | 'al_tin' | 'am_tin' | 'ao_tin' | 'ar_cuit' | 'au_abn' | 'au_arn' | 'aw_tin' | 'az_tin' | 'ba_tin' | 'bb_tin' | 'bd_bin' | 'bf_ifu' | 'bg_uic' | 'bh_vat' | 'bj_ifu' | 'bo_tin' | 'br_cnpj' | 'br_cpf' | 'bs_tin' | 'by_tin' | 'ca_bn' | 'ca_gst_hst' | 'ca_pst_bc' | 'ca_pst_mb' | 'ca_pst_sk' | 'ca_qst' | 'cd_nif' | 'ch_uid' | 'ch_vat' | 'cl_tin' | 'cm_niu' | 'cn_tin' | 'co_nit' | 'cr_tin' | 'cv_nif' | 'de_stn' | 'do_rcn' | 'ec_ruc' | 'eg_tin' | 'es_cif' | 'et_tin' | 'eu_oss_vat' | 'eu_vat' | 'gb_vat' | 'ge_vat' | 'gn_nif' | 'hk_br' | 'hr_oib' | 'hu_tin' | 'id_npwp' | 'il_vat' | 'in_gst' | 'is_vat' | 'jp_cn' | 'jp_rn' | 'jp_trn' | 'ke_pin' | 'kg_tin' | 'kh_tin' | 'kr_brn' | 'kz_bin' | 'la_tin' | 'li_uid' | 'li_vat' | 'ma_vat' | 'md_vat' | 'me_pib' | 'mk_vat' | 'mr_nif' | 'mx_rfc' | 'my_frp' | 'my_itn' | 'my_sst' | 'ng_tin' | 'no_vat' | 'no_voec' | 'np_pan' | 'nz_gst' | 'om_vat' | 'pe_ruc' | 'ph_tin' | 'ro_tin' | 'rs_pib' | 'ru_inn' | 'ru_kpp' | 'sa_vat' | 'sg_gst' | 'sg_uen' | 'si_tin' | 'sn_ninea' | 'sr_fin' | 'sv_nit' | 'th_vat' | 'tj_tin' | 'tr_tin' | 'tw_vat' | 'tz_vat' | 'ua_vat' | 'ug_tin' | 'unknown' | 'us_ein' | 'uy_ruc' | 'uz_tin' | 'uz_vat' | 've_rif' | 'vn_tin' | 'za_vat' | 'zm_tin' | 'zw_tin')
 /**
  * @description The value of the tax ID.
  */
 value?: string | null
}

/**
 * @title InvoicesResourcePretaxCreditAmount
 */
export type invoices_resource_pretax_credit_amount = {
 /**
  * @description The amount, in cents (or local equivalent), of the pretax credit amount.
  */
 amount: number
 /**
  * @description The credit balance transaction that was applied to get this pretax credit amount.
  */
 credit_balance_transaction?: (string | Schemas.billingcredit_balance_transaction) | null
 /**
  * @description The discount that was applied to get this pretax credit amount.
  */
 discount?: (string | Schemas.discount | Schemas.deleted_discount)
 /**
  * @description Type of the pretax credit amount referenced.
  */
 type: ('credit_balance_transaction' | 'discount')
}

/**
 * @title InvoicesResourceShippingCost
 */
export type invoices_resource_shipping_cost = {
 /**
  * @description Total shipping cost before any taxes are applied.
  */
 amount_subtotal: number
 /**
  * @description Total tax amount applied due to shipping costs. If no tax was applied, defaults to 0.
  */
 amount_tax: number
 /**
  * @description Total shipping cost after taxes are applied.
  */
 amount_total: number
 /**
  * @description The ID of the ShippingRate for this invoice.
  */
 shipping_rate?: (string | Schemas.shipping_rate) | null
 /**
  * @description The taxes applied to the shipping rate.
  */
 taxes?: Schemas.line_items_tax_amount[]
}

/**
 * @title InvoicesResourceStatusTransitions
 */
export type invoices_resource_status_transitions = {
 /**
  * @description The time that the invoice draft was finalized.
  */
 finalized_at?: number | null
 /**
  * @description The time that the invoice was marked uncollectible.
  */
 marked_uncollectible_at?: number | null
 /**
  * @description The time that the invoice was paid.
  */
 paid_at?: number | null
 /**
  * @description The time that the invoice was voided.
  */
 voided_at?: number | null
}

/**
 * @title IssuingAuthorization
 * @description When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`
 * object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the
 * purchase to be completed successfully.
 * 
 * Related guide: [Issued card authorizations](https://stripe.com/docs/issuing/purchases/authorizations)
 */
export type issuingauthorization = {
 /**
  * @description The total amount that was authorized or rejected. This amount is in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `amount` should be the same as `merchant_amount`, unless `currency` and `merchant_currency` are different.
  */
 amount: number
 /**
  * @description Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 amount_details?: Schemas.issuing_authorization_amount_details | null
 /**
  * @description Whether the authorization has been approved.
  */
 approved: boolean
 /**
  * @description How the card details were provided.
  */
 authorization_method: ('chip' | 'contactless' | 'keyed_in' | 'online' | 'swipe')
 /**
  * @description List of balance transactions associated with this authorization.
  */
 balance_transactions: Schemas.balance_transaction[]
 /**
  * @title IssuingCard
  * @description You can [create physical or virtual cards](https://stripe.com/docs/issuing) that are issued to cardholders.
  */
 card: Schemas.issuingcard
 /**
  * @description The cardholder to whom this authorization belongs.
  */
 cardholder?: (string | Schemas.issuingcardholder) | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description The currency of the cardholder. This currency can be different from the currency presented at authorization and the `merchant_currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description Fleet-specific information for authorizations using Fleet cards.
  */
 fleet?: Schemas.issuing_authorization_fleet_data | null
 /**
  * @description Fraud challenges sent to the cardholder, if this authorization was declined for fraud risk reasons.
  */
 fraud_challenges?: Schemas.issuing_authorization_fraud_challenge[] | null
 /**
  * @description Information about fuel that was purchased with this transaction. Typically this information is received from the merchant after the authorization has been approved and the fuel dispensed.
  */
 fuel?: Schemas.issuing_authorization_fuel_data | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `merchant_amount` should be the same as `amount`, unless `merchant_currency` and `currency` are different.
  */
 merchant_amount: number
 /**
  * @description The local currency that was presented to the cardholder for the authorization. This currency can be different from the cardholder currency and the `currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 merchant_currency: string
 /**
  * @title IssuingAuthorizationMerchantData
  */
 merchant_data: Schemas.issuing_authorization_merchant_data
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description Details about the authorization, such as identifiers, set by the card network.
  */
 network_data?: Schemas.issuing_authorization_network_data | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'issuing.authorization'
 /**
  * @description The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook.
  */
 pending_request?: Schemas.issuing_authorization_pending_request | null
 /**
  * @description History of every time a `pending_request` authorization was approved/declined, either by you directly or by Stripe (e.g. based on your spending_controls). If the merchant changes the authorization by performing an incremental authorization, you can look at this field to see the previous requests for the authorization. This field can be helpful in determining why a given authorization was approved/declined.
  */
 request_history: Schemas.issuing_authorization_request[]
 /**
  * @description The current status of the authorization in its lifecycle.
  */
 status: ('closed' | 'expired' | 'pending' | 'reversed')
 /**
  * @description [Token](https://stripe.com/docs/api/issuing/tokens/object) object used for this authorization. If a network token was not used for this authorization, this field will be null.
  */
 token?: (string | Schemas.issuingtoken) | null
 /**
  * @description List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.
  */
 transactions: Schemas.issuingtransaction[]
 /**
  * @description [Treasury](https://stripe.com/docs/api/treasury) details related to this authorization if it was created on a [FinancialAccount](https://stripe.com/docs/api/treasury/financial_accounts).
  */
 treasury?: Schemas.issuing_authorization_treasury | null
 /**
  * @title IssuingAuthorizationVerificationData
  */
 verification_data: Schemas.issuing_authorization_verification_data
 /**
  * @description Whether the authorization bypassed fraud risk checks because the cardholder has previously completed a fraud challenge on a similar high-risk authorization from the same merchant.
  */
 verified_by_fraud_challenge?: boolean | null
 /**
  * @description The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. Will populate as `null` when no digital wallet was utilized.
  */
 wallet?: string | null
}

/**
 * @title IssuingCard
 * @description You can [create physical or virtual cards](https://stripe.com/docs/issuing) that are issued to cardholders.
 */
export type issuingcard = {
 /**
  * @description The brand of the card.
  */
 brand: string
 /**
  * @description The reason why the card was canceled.
  */
 cancellation_reason?: ('design_rejected' | 'lost' | 'stolen') | null
 /**
  * @title IssuingCardholder
  * @description An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.
  * 
  * Related guide: [How to create a cardholder](https://stripe.com/docs/issuing/cards/virtual/issue-cards#create-cardholder)
  */
 cardholder: Schemas.issuingcardholder
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Supported currencies are `usd` in the US, `eur` in the EU, and `gbp` in the UK.
  */
 currency: string
 /**
  * @description The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.
  */
 cvc?: string
 /**
  * @description The expiration month of the card.
  */
 exp_month: number
 /**
  * @description The expiration year of the card.
  */
 exp_year: number
 /**
  * @description The financial account this card is attached to.
  */
 financial_account?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The last 4 digits of the card number.
  */
 last4: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.
  */
 number?: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'issuing.card'
 /**
  * @description The personalization design object belonging to this card.
  */
 personalization_design?: (string | Schemas.issuingpersonalization_design) | null
 /**
  * @description The latest card that replaces this card, if any.
  */
 replaced_by?: (string | Schemas.issuingcard) | null
 /**
  * @description The card this card replaces, if any.
  */
 replacement_for?: (string | Schemas.issuingcard) | null
 /**
  * @description The reason why the previous card needed to be replaced.
  */
 replacement_reason?: ('damaged' | 'expired' | 'lost' | 'stolen') | null
 /**
  * @description Where and how the card will be shipped.
  */
 shipping?: Schemas.issuing_card_shipping | null
 /**
  * @title IssuingCardAuthorizationControls
  */
 spending_controls: Schemas.issuing_card_authorization_controls
 /**
  * @description Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.
  */
 status: ('active' | 'canceled' | 'inactive')
 /**
  * @description The type of the card.
  */
 type: ('physical' | 'virtual')
 /**
  * @description Information relating to digital wallets (like Apple Pay and Google Pay).
  */
 wallets?: Schemas.issuing_card_wallets | null
}

/**
 * @title IssuingCardholder
 * @description An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.
 * 
 * Related guide: [How to create a cardholder](https://stripe.com/docs/issuing/cards/virtual/issue-cards#create-cardholder)
 */
export type issuingcardholder = {
 /**
  * @title IssuingCardholderAddress
  */
 billing: Schemas.issuing_cardholder_address
 /**
  * @description Additional information about a `company` cardholder.
  */
 company?: Schemas.issuing_cardholder_company | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description The cardholder's email address.
  */
 email?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Additional information about an `individual` cardholder.
  */
 individual?: Schemas.issuing_cardholder_individual | null
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description The cardholder's name. This will be printed on cards issued to them.
  */
 name: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'issuing.cardholder'
 /**
  * @description The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details.
  */
 phone_number?: string | null
 /**
  * @description The cardholder’s preferred locales (languages), ordered by preference. Locales can be `de`, `en`, `es`, `fr`, or `it`.
  *  This changes the language of the [3D Secure flow](https://stripe.com/docs/issuing/3d-secure) and one-time password messages sent to the cardholder.
  */
 preferred_locales?: ('de' | 'en' | 'es' | 'fr' | 'it')[] | null
 /**
  * @title IssuingCardholderRequirements
  */
 requirements: Schemas.issuing_cardholder_requirements
 /**
  * @description Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details.
  */
 spending_controls?: Schemas.issuing_cardholder_authorization_controls | null
 /**
  * @description Specifies whether to permit authorizations on this cardholder's cards.
  */
 status: ('active' | 'blocked' | 'inactive')
 /**
  * @description One of `individual` or `company`. See [Choose a cardholder type](https://stripe.com/docs/issuing/other/choose-cardholder) for more details.
  */
 type: ('company' | 'individual')
}

/**
 * @title IssuingDispute
 * @description As a [card issuer](https://stripe.com/docs/issuing), you can dispute transactions that the cardholder does not recognize, suspects to be fraudulent, or has other issues with.
 * 
 * Related guide: [Issuing disputes](https://stripe.com/docs/issuing/purchases/disputes)
 */
export type issuingdispute = {
 /**
  * @description Disputed amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation).
  */
 amount: number
 /**
  * @description List of balance transactions associated with the dispute.
  */
 balance_transactions?: Schemas.balance_transaction[] | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description The currency the `transaction` was made in.
  */
 currency: string
 /**
  * @title IssuingDisputeEvidence
  */
 evidence: Schemas.issuing_dispute_evidence
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description The enum that describes the dispute loss outcome. If the dispute is not lost, this field will be absent. New enum values may be added in the future, so be sure to handle unknown values.
  */
 loss_reason?: ('cardholder_authentication_issuer_liability' | 'eci5_token_transaction_with_tavv' | 'excess_disputes_in_timeframe' | 'has_not_met_the_minimum_dispute_amount_requirements' | 'invalid_duplicate_dispute' | 'invalid_incorrect_amount_dispute' | 'invalid_no_authorization' | 'invalid_use_of_disputes' | 'merchandise_delivered_or_shipped' | 'merchandise_or_service_as_described' | 'not_cancelled' | 'other' | 'refund_issued' | 'submitted_beyond_allowable_time_limit' | 'transaction_3ds_required' | 'transaction_approved_after_prior_fraud_dispute' | 'transaction_authorized' | 'transaction_electronically_read' | 'transaction_qualifies_for_visa_easy_payment_service' | 'transaction_unattended')
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'issuing.dispute'
 /**
  * @description Current status of the dispute.
  */
 status: ('expired' | 'lost' | 'submitted' | 'unsubmitted' | 'won')
 /**
  * @description The transaction being disputed.
  */
 transaction: (string | Schemas.issuingtransaction)
 /**
  * @description [Treasury](https://stripe.com/docs/api/treasury) details related to this dispute if it was created on a [FinancialAccount](/docs/api/treasury/financial_accounts
  */
 treasury?: Schemas.issuing_dispute_treasury | null
}

/**
 * @title IssuingPersonalizationDesign
 * @description A Personalization Design is a logical grouping of a Physical Bundle, card logo, and carrier text that represents a product line.
 */
export type issuingpersonalization_design = {
 /**
  * @description The file for the card logo to use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`.
  */
 card_logo?: (string | Schemas.file) | null
 /**
  * @description Hash containing carrier text, for use with physical bundles that support carrier text.
  */
 carrier_text?: Schemas.issuing_personalization_design_carrier_text | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.
  */
 lookup_key?: string | null
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description Friendly display name.
  */
 name?: string | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'issuing.personalization_design'
 /**
  * @description The physical bundle object belonging to this personalization design.
  */
 physical_bundle: (string | Schemas.issuingphysical_bundle)
 /**
  * @title IssuingPersonalizationDesignPreferences
  */
 preferences: Schemas.issuing_personalization_design_preferences
 /**
  * @title IssuingPersonalizationDesignRejectionReasons
  */
 rejection_reasons: Schemas.issuing_personalization_design_rejection_reasons
 /**
  * @description Whether this personalization design can be used to create cards.
  */
 status: ('active' | 'inactive' | 'rejected' | 'review')
}

/**
 * @title IssuingPhysicalBundle
 * @description A Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.
 */
export type issuingphysical_bundle = {
 /**
  * @title IssuingPhysicalBundleFeatures
  */
 features: Schemas.issuing_physical_bundle_features
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Friendly display name.
  */
 name: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'issuing.physical_bundle'
 /**
  * @description Whether this physical bundle can be used to create cards.
  */
 status: ('active' | 'inactive' | 'review')
 /**
  * @description Whether this physical bundle is a standard Stripe offering or custom-made for you.
  */
 type: ('custom' | 'standard')
}

/**
 * @title IssuingSettlement
 * @description When a non-stripe BIN is used, any use of an [issued card](https://stripe.com/docs/issuing) must be settled directly with the card network. The net amount owed is represented by an Issuing `Settlement` object.
 */
export type issuingsettlement = {
 /**
  * @description The Bank Identification Number reflecting this settlement record.
  */
 bin: string
 /**
  * @description The date that the transactions are cleared and posted to user's accounts.
  */
 clearing_date: number
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The total interchange received as reimbursement for the transactions.
  */
 interchange_fees_amount: number
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description The total net amount required to settle with the network.
  */
 net_total_amount: number
 /**
  * @description The card network for this settlement report. One of ["visa", "maestro"]
  */
 network: ('maestro' | 'visa')
 /**
  * @description The total amount of fees owed to the network.
  */
 network_fees_amount: number
 /**
  * @description The Settlement Identification Number assigned by the network.
  */
 network_settlement_identifier: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'issuing.settlement'
 /**
  * @description One of `international` or `uk_national_net`.
  */
 settlement_service: string
 /**
  * @description The current processing status of this settlement.
  */
 status: ('complete' | 'pending')
 /**
  * @description The total transaction amount reflected in this settlement.
  */
 transaction_amount: number
 /**
  * @description The total number of transactions reflected in this settlement.
  */
 transaction_count: number
}

/**
 * @title IssuingNetworkToken
 * @description An issuing token object is created when an issued card is added to a digital wallet. As a [card issuer](https://stripe.com/docs/issuing), you can [view and manage these tokens](https://stripe.com/docs/issuing/controls/token-management) through Stripe.
 */
export type issuingtoken = {
 /**
  * @description Card associated with this token.
  */
 card: (string | Schemas.issuingcard)
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description The hashed ID derived from the device ID from the card network associated with the token.
  */
 device_fingerprint?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The last four digits of the token.
  */
 last4?: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description The token service provider / card network associated with the token.
  */
 network: ('mastercard' | 'visa')
 /**
  * @title IssuingNetworkTokenNetworkData
  */
 network_data?: Schemas.issuing_network_token_network_data
 /**
  * @description Time at which the token was last updated by the card network. Measured in seconds since the Unix epoch.
  */
 network_updated_at: number
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'issuing.token'
 /**
  * @description The usage state of the token.
  */
 status: ('active' | 'deleted' | 'requested' | 'suspended')
 /**
  * @description The digital wallet for this token, if one was used.
  */
 wallet_provider?: ('apple_pay' | 'google_pay' | 'samsung_pay')
}

/**
 * @title IssuingTransaction
 * @description Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving
 * your Stripe account, such as a completed purchase or refund, is represented by an Issuing
 * `Transaction` object.
 * 
 * Related guide: [Issued card transactions](https://stripe.com/docs/issuing/purchases/transactions)
 */
export type issuingtransaction = {
 /**
  * @description The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 amount: number
 /**
  * @description Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 amount_details?: Schemas.issuing_transaction_amount_details | null
 /**
  * @description The `Authorization` object that led to this transaction.
  */
 authorization?: (string | Schemas.issuingauthorization) | null
 /**
  * @description ID of the [balance transaction](https://stripe.com/docs/api/balance_transactions) associated with this transaction.
  */
 balance_transaction?: (string | Schemas.balance_transaction) | null
 /**
  * @description The card used to make this transaction.
  */
 card: (string | Schemas.issuingcard)
 /**
  * @description The cardholder to whom this transaction belongs.
  */
 cardholder?: (string | Schemas.issuingcardholder) | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description If you've disputed the transaction, the ID of the dispute.
  */
 dispute?: (string | Schemas.issuingdispute) | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency.
  */
 merchant_amount: number
 /**
  * @description The currency with which the merchant is taking payment.
  */
 merchant_currency: string
 /**
  * @title IssuingAuthorizationMerchantData
  */
 merchant_data: Schemas.issuing_authorization_merchant_data
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description Details about the transaction, such as processing dates, set by the card network.
  */
 network_data?: Schemas.issuing_transaction_network_data | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'issuing.transaction'
 /**
  * @description Additional purchase information that is optionally provided by the merchant.
  */
 purchase_details?: Schemas.issuing_transaction_purchase_details | null
 /**
  * @description [Token](https://stripe.com/docs/api/issuing/tokens/object) object used for this transaction. If a network token was not used for this transaction, this field will be null.
  */
 token?: (string | Schemas.issuingtoken) | null
 /**
  * @description [Treasury](https://stripe.com/docs/api/treasury) details related to this transaction if it was created on a [FinancialAccount](/docs/api/treasury/financial_accounts
  */
 treasury?: Schemas.issuing_transaction_treasury | null
 /**
  * @description The nature of the transaction.
  */
 type: ('capture' | 'refund')
 /**
  * @description The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`.
  */
 wallet?: ('apple_pay' | 'google_pay' | 'samsung_pay') | null
}

/**
 * @title IssuingAuthorizationAmountDetails
 */
export type issuing_authorization_amount_details = {
 /**
  * @description The fee charged by the ATM for the cash withdrawal.
  */
 atm_fee?: number | null
 /**
  * @description The amount of cash requested by the cardholder.
  */
 cashback_amount?: number | null
}

/**
 * @title IssuingAuthorizationAuthenticationExemption
 */
export type issuing_authorization_authentication_exemption = {
 /**
  * @description The entity that requested the exemption, either the acquiring merchant or the Issuing user.
  */
 claimed_by: ('acquirer' | 'issuer')
 /**
  * @description The specific exemption claimed for this authorization.
  */
 type: ('low_value_transaction' | 'transaction_risk_analysis' | 'unknown')
}

/**
 * @title IssuingAuthorizationFleetCardholderPromptData
 */
export type issuing_authorization_fleet_cardholder_prompt_data = {
 /**
  * @description [Deprecated] An alphanumeric ID, though typical point of sales only support numeric entry. The card program can be configured to prompt for a vehicle ID, driver ID, or generic ID.
  */
 alphanumeric_id?: string | null
 /**
  * @description Driver ID.
  */
 driver_id?: string | null
 /**
  * @description Odometer reading.
  */
 odometer?: number | null
 /**
  * @description An alphanumeric ID. This field is used when a vehicle ID, driver ID, or generic ID is entered by the cardholder, but the merchant or card network did not specify the prompt type.
  */
 unspecified_id?: string | null
 /**
  * @description User ID.
  */
 user_id?: string | null
 /**
  * @description Vehicle number.
  */
 vehicle_number?: string | null
}

/**
 * @title IssuingAuthorizationFleetData
 */
export type issuing_authorization_fleet_data = {
 /**
  * @description Answers to prompts presented to the cardholder at the point of sale. Prompted fields vary depending on the configuration of your physical fleet cards. Typical points of sale support only numeric entry.
  */
 cardholder_prompt_data?: Schemas.issuing_authorization_fleet_cardholder_prompt_data | null
 /**
  * @description The type of purchase.
  */
 purchase_type?: ('fuel_and_non_fuel_purchase' | 'fuel_purchase' | 'non_fuel_purchase') | null
 /**
  * @description More information about the total amount. Typically this information is received from the merchant after the authorization has been approved and the fuel dispensed. This information is not guaranteed to be accurate as some merchants may provide unreliable data.
  */
 reported_breakdown?: Schemas.issuing_authorization_fleet_reported_breakdown | null
 /**
  * @description The type of fuel service.
  */
 service_type?: ('full_service' | 'non_fuel_transaction' | 'self_service') | null
}

/**
 * @title IssuingAuthorizationFleetFuelPriceData
 */
export type issuing_authorization_fleet_fuel_price_data = {
 /**
  * @description Gross fuel amount that should equal Fuel Quantity multiplied by Fuel Unit Cost, inclusive of taxes.
  */
 gross_amount_decimal?: string | null
}

/**
 * @title IssuingAuthorizationFleetNonFuelPriceData
 */
export type issuing_authorization_fleet_non_fuel_price_data = {
 /**
  * @description Gross non-fuel amount that should equal the sum of the line items, inclusive of taxes.
  */
 gross_amount_decimal?: string | null
}

/**
 * @title IssuingAuthorizationFleetReportedBreakdown
 */
export type issuing_authorization_fleet_reported_breakdown = {
 /**
  * @description Breakdown of fuel portion of the purchase.
  */
 fuel?: Schemas.issuing_authorization_fleet_fuel_price_data | null
 /**
  * @description Breakdown of non-fuel portion of the purchase.
  */
 non_fuel?: Schemas.issuing_authorization_fleet_non_fuel_price_data | null
 /**
  * @description Information about tax included in this transaction.
  */
 tax?: Schemas.issuing_authorization_fleet_tax_data | null
}

/**
 * @title IssuingAuthorizationFleetTaxData
 */
export type issuing_authorization_fleet_tax_data = {
 /**
  * @description Amount of state or provincial Sales Tax included in the transaction amount. `null` if not reported by merchant or not subject to tax.
  */
 local_amount_decimal?: string | null
 /**
  * @description Amount of national Sales Tax or VAT included in the transaction amount. `null` if not reported by merchant or not subject to tax.
  */
 national_amount_decimal?: string | null
}

/**
 * @title IssuingAuthorizationFraudChallenge
 */
export type issuing_authorization_fraud_challenge = {
 /**
  * @description The method by which the fraud challenge was delivered to the cardholder.
  */
 channel: 'sms'
 /**
  * @description The status of the fraud challenge.
  */
 status: ('expired' | 'pending' | 'rejected' | 'undeliverable' | 'verified')
 /**
  * @description If the challenge is not deliverable, the reason why.
  */
 undeliverable_reason?: ('no_phone_number' | 'unsupported_phone_number') | null
}

/**
 * @title IssuingAuthorizationFuelData
 */
export type issuing_authorization_fuel_data = {
 /**
  * @description [Conexxus Payment System Product Code](https://www.conexxus.org/conexxus-payment-system-product-codes) identifying the primary fuel product purchased.
  */
 industry_product_code?: string | null
 /**
  * @description The quantity of `unit`s of fuel that was dispensed, represented as a decimal string with at most 12 decimal places.
  */
 quantity_decimal?: string | null
 /**
  * @description The type of fuel that was purchased.
  */
 type?: ('diesel' | 'other' | 'unleaded_plus' | 'unleaded_regular' | 'unleaded_super') | null
 /**
  * @description The units for `quantity_decimal`.
  */
 unit?: ('charging_minute' | 'imperial_gallon' | 'kilogram' | 'kilowatt_hour' | 'liter' | 'other' | 'pound' | 'us_gallon') | null
 /**
  * @description The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.
  */
 unit_cost_decimal?: string | null
}

/**
 * @title IssuingAuthorizationMerchantData
 */
export type issuing_authorization_merchant_data = {
 /**
  * @description A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values.
  */
 category: string
 /**
  * @description The merchant category code for the seller’s business
  */
 category_code: string
 /**
  * @description City where the seller is located
  */
 city?: string | null
 /**
  * @description Country where the seller is located
  */
 country?: string | null
 /**
  * @description Name of the seller
  */
 name?: string | null
 /**
  * @description Identifier assigned to the seller by the card network. Different card networks may assign different network_id fields to the same merchant.
  */
 network_id: string
 /**
  * @description Postal code where the seller is located
  */
 postal_code?: string | null
 /**
  * @description State where the seller is located
  */
 state?: string | null
 /**
  * @description The seller's tax identification number. Currently populated for French merchants only.
  */
 tax_id?: string | null
 /**
  * @description An ID assigned by the seller to the location of the sale.
  */
 terminal_id?: string | null
 /**
  * @description URL provided by the merchant on a 3DS request
  */
 url?: string | null
}

/**
 * @title IssuingAuthorizationNetworkData
 */
export type issuing_authorization_network_data = {
 /**
  * @description Identifier assigned to the acquirer by the card network. Sometimes this value is not provided by the network; in this case, the value will be `null`.
  */
 acquiring_institution_id?: string | null
 /**
  * @description The System Trace Audit Number (STAN) is a 6-digit identifier assigned by the acquirer. Prefer `network_data.transaction_id` if present, unless you have special requirements.
  */
 system_trace_audit_number?: string | null
 /**
  * @description Unique identifier for the authorization assigned by the card network used to match subsequent messages, disputes, and transactions.
  */
 transaction_id?: string | null
}

/**
 * @title IssuingAuthorizationPendingRequest
 */
export type issuing_authorization_pending_request = {
 /**
  * @description The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 amount: number
 /**
  * @description Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 amount_details?: Schemas.issuing_authorization_amount_details | null
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.
  */
 is_amount_controllable: boolean
 /**
  * @description The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 merchant_amount: number
 /**
  * @description The local currency the merchant is requesting to authorize.
  */
 merchant_currency: string
 /**
  * @description The card network's estimate of the likelihood that an authorization is fraudulent. Takes on values between 1 and 99.
  */
 network_risk_score?: number | null
}

/**
 * @title IssuingAuthorizationRequest
 */
export type issuing_authorization_request = {
 /**
  * @description The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved.
  */
 amount: number
 /**
  * @description Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 amount_details?: Schemas.issuing_authorization_amount_details | null
 /**
  * @description Whether this request was approved.
  */
 approved: boolean
 /**
  * @description A code created by Stripe which is shared with the merchant to validate the authorization. This field will be populated if the authorization message was approved. The code typically starts with the letter "S", followed by a six-digit number. For example, "S498162". Please note that the code is not guaranteed to be unique across authorizations.
  */
 authorization_code?: string | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 merchant_amount: number
 /**
  * @description The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 merchant_currency: string
 /**
  * @description The card network's estimate of the likelihood that an authorization is fraudulent. Takes on values between 1 and 99.
  */
 network_risk_score?: number | null
 /**
  * @description When an authorization is approved or declined by you or by Stripe, this field provides additional detail on the reason for the outcome.
  */
 reason: ('account_disabled' | 'card_active' | 'card_canceled' | 'card_expired' | 'card_inactive' | 'cardholder_blocked' | 'cardholder_inactive' | 'cardholder_verification_required' | 'insecure_authorization_method' | 'insufficient_funds' | 'network_fallback' | 'not_allowed' | 'pin_blocked' | 'spending_controls' | 'suspected_fraud' | 'verification_failed' | 'webhook_approved' | 'webhook_declined' | 'webhook_error' | 'webhook_timeout')
 /**
  * @description If the `request_history.reason` is `webhook_error` because the direct webhook response is invalid (for example, parsing errors or missing parameters), we surface a more detailed error message via this field.
  */
 reason_message?: string | null
 /**
  * @description Time when the card network received an authorization request from the acquirer in UTC. Referred to by networks as transmission time.
  */
 requested_at?: number | null
}

/**
 * @title IssuingAuthorizationThreeDSecure
 */
export type issuing_authorization_three_d_secure = {
 /**
  * @description The outcome of the 3D Secure authentication request.
  */
 result: ('attempt_acknowledged' | 'authenticated' | 'failed' | 'required')
}

/**
 * @title IssuingAuthorizationTreasury
 */
export type issuing_authorization_treasury = {
 /**
  * @description The array of [ReceivedCredits](https://stripe.com/docs/api/treasury/received_credits) associated with this authorization
  */
 received_credits: string[]
 /**
  * @description The array of [ReceivedDebits](https://stripe.com/docs/api/treasury/received_debits) associated with this authorization
  */
 received_debits: string[]
 /**
  * @description The Treasury [Transaction](https://stripe.com/docs/api/treasury/transactions) associated with this authorization
  */
 transaction?: string | null
}

/**
 * @title IssuingAuthorizationVerificationData
 */
export type issuing_authorization_verification_data = {
 /**
  * @description Whether the cardholder provided an address first line and if it matched the cardholder’s `billing.address.line1`.
  */
 address_line1_check: ('match' | 'mismatch' | 'not_provided')
 /**
  * @description Whether the cardholder provided a postal code and if it matched the cardholder’s `billing.address.postal_code`.
  */
 address_postal_code_check: ('match' | 'mismatch' | 'not_provided')
 /**
  * @description The exemption applied to this authorization.
  */
 authentication_exemption?: Schemas.issuing_authorization_authentication_exemption | null
 /**
  * @description Whether the cardholder provided a CVC and if it matched Stripe’s record.
  */
 cvc_check: ('match' | 'mismatch' | 'not_provided')
 /**
  * @description Whether the cardholder provided an expiry date and if it matched Stripe’s record.
  */
 expiry_check: ('match' | 'mismatch' | 'not_provided')
 /**
  * @description The postal code submitted as part of the authorization used for postal code verification.
  */
 postal_code?: string | null
 /**
  * @description 3D Secure details.
  */
 three_d_secure?: Schemas.issuing_authorization_three_d_secure | null
}

/**
 * @title IssuingCardApplePay
 */
export type issuing_card_apple_pay = {
 /**
  * @description Apple Pay Eligibility
  */
 eligible: boolean
 /**
  * @description Reason the card is ineligible for Apple Pay
  */
 ineligible_reason?: ('missing_agreement' | 'missing_cardholder_contact' | 'unsupported_region') | null
}

/**
 * @title IssuingCardAuthorizationControls
 */
export type issuing_card_authorization_controls = {
 /**
  * @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.
  */
 allowed_categories?: ('ac_refrigeration_repair' | 'accounting_bookkeeping_services' | 'advertising_services' | 'agricultural_cooperative' | 'airlines_air_carriers' | 'airports_flying_fields' | 'ambulance_services' | 'amusement_parks_carnivals' | 'antique_reproductions' | 'antique_shops' | 'aquariums' | 'architectural_surveying_services' | 'art_dealers_and_galleries' | 'artists_supply_and_craft_shops' | 'auto_and_home_supply_stores' | 'auto_body_repair_shops' | 'auto_paint_shops' | 'auto_service_shops' | 'automated_cash_disburse' | 'automated_fuel_dispensers' | 'automobile_associations' | 'automotive_parts_and_accessories_stores' | 'automotive_tire_stores' | 'bail_and_bond_payments' | 'bakeries' | 'bands_orchestras' | 'barber_and_beauty_shops' | 'betting_casino_gambling' | 'bicycle_shops' | 'billiard_pool_establishments' | 'boat_dealers' | 'boat_rentals_and_leases' | 'book_stores' | 'books_periodicals_and_newspapers' | 'bowling_alleys' | 'bus_lines' | 'business_secretarial_schools' | 'buying_shopping_services' | 'cable_satellite_and_other_pay_television_and_radio' | 'camera_and_photographic_supply_stores' | 'candy_nut_and_confectionery_stores' | 'car_and_truck_dealers_new_used' | 'car_and_truck_dealers_used_only' | 'car_rental_agencies' | 'car_washes' | 'carpentry_services' | 'carpet_upholstery_cleaning' | 'caterers' | 'charitable_and_social_service_organizations_fundraising' | 'chemicals_and_allied_products' | 'child_care_services' | 'childrens_and_infants_wear_stores' | 'chiropodists_podiatrists' | 'chiropractors' | 'cigar_stores_and_stands' | 'civic_social_fraternal_associations' | 'cleaning_and_maintenance' | 'clothing_rental' | 'colleges_universities' | 'commercial_equipment' | 'commercial_footwear' | 'commercial_photography_art_and_graphics' | 'commuter_transport_and_ferries' | 'computer_network_services' | 'computer_programming' | 'computer_repair' | 'computer_software_stores' | 'computers_peripherals_and_software' | 'concrete_work_services' | 'construction_materials' | 'consulting_public_relations' | 'correspondence_schools' | 'cosmetic_stores' | 'counseling_services' | 'country_clubs' | 'courier_services' | 'court_costs' | 'credit_reporting_agencies' | 'cruise_lines' | 'dairy_products_stores' | 'dance_hall_studios_schools' | 'dating_escort_services' | 'dentists_orthodontists' | 'department_stores' | 'detective_agencies' | 'digital_goods_applications' | 'digital_goods_games' | 'digital_goods_large_volume' | 'digital_goods_media' | 'direct_marketing_catalog_merchant' | 'direct_marketing_combination_catalog_and_retail_merchant' | 'direct_marketing_inbound_telemarketing' | 'direct_marketing_insurance_services' | 'direct_marketing_other' | 'direct_marketing_outbound_telemarketing' | 'direct_marketing_subscription' | 'direct_marketing_travel' | 'discount_stores' | 'doctors' | 'door_to_door_sales' | 'drapery_window_covering_and_upholstery_stores' | 'drinking_places' | 'drug_stores_and_pharmacies' | 'drugs_drug_proprietaries_and_druggist_sundries' | 'dry_cleaners' | 'durable_goods' | 'duty_free_stores' | 'eating_places_restaurants' | 'educational_services' | 'electric_razor_stores' | 'electric_vehicle_charging' | 'electrical_parts_and_equipment' | 'electrical_services' | 'electronics_repair_shops' | 'electronics_stores' | 'elementary_secondary_schools' | 'emergency_services_gcas_visa_use_only' | 'employment_temp_agencies' | 'equipment_rental' | 'exterminating_services' | 'family_clothing_stores' | 'fast_food_restaurants' | 'financial_institutions' | 'fines_government_administrative_entities' | 'fireplace_fireplace_screens_and_accessories_stores' | 'floor_covering_stores' | 'florists' | 'florists_supplies_nursery_stock_and_flowers' | 'freezer_and_locker_meat_provisioners' | 'fuel_dealers_non_automotive' | 'funeral_services_crematories' | 'furniture_home_furnishings_and_equipment_stores_except_appliances' | 'furniture_repair_refinishing' | 'furriers_and_fur_shops' | 'general_services' | 'gift_card_novelty_and_souvenir_shops' | 'glass_paint_and_wallpaper_stores' | 'glassware_crystal_stores' | 'golf_courses_public' | 'government_licensed_horse_dog_racing_us_region_only' | 'government_licensed_online_casions_online_gambling_us_region_only' | 'government_owned_lotteries_non_us_region' | 'government_owned_lotteries_us_region_only' | 'government_services' | 'grocery_stores_supermarkets' | 'hardware_equipment_and_supplies' | 'hardware_stores' | 'health_and_beauty_spas' | 'hearing_aids_sales_and_supplies' | 'heating_plumbing_a_c' | 'hobby_toy_and_game_shops' | 'home_supply_warehouse_stores' | 'hospitals' | 'hotels_motels_and_resorts' | 'household_appliance_stores' | 'industrial_supplies' | 'information_retrieval_services' | 'insurance_default' | 'insurance_underwriting_premiums' | 'intra_company_purchases' | 'jewelry_stores_watches_clocks_and_silverware_stores' | 'landscaping_services' | 'laundries' | 'laundry_cleaning_services' | 'legal_services_attorneys' | 'luggage_and_leather_goods_stores' | 'lumber_building_materials_stores' | 'manual_cash_disburse' | 'marinas_service_and_supplies' | 'marketplaces' | 'masonry_stonework_and_plaster' | 'massage_parlors' | 'medical_and_dental_labs' | 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies' | 'medical_services' | 'membership_organizations' | 'mens_and_boys_clothing_and_accessories_stores' | 'mens_womens_clothing_stores' | 'metal_service_centers' | 'miscellaneous' | 'miscellaneous_apparel_and_accessory_shops' | 'miscellaneous_auto_dealers' | 'miscellaneous_business_services' | 'miscellaneous_food_stores' | 'miscellaneous_general_merchandise' | 'miscellaneous_general_services' | 'miscellaneous_home_furnishing_specialty_stores' | 'miscellaneous_publishing_and_printing' | 'miscellaneous_recreation_services' | 'miscellaneous_repair_shops' | 'miscellaneous_specialty_retail' | 'mobile_home_dealers' | 'motion_picture_theaters' | 'motor_freight_carriers_and_trucking' | 'motor_homes_dealers' | 'motor_vehicle_supplies_and_new_parts' | 'motorcycle_shops_and_dealers' | 'motorcycle_shops_dealers' | 'music_stores_musical_instruments_pianos_and_sheet_music' | 'news_dealers_and_newsstands' | 'non_fi_money_orders' | 'non_fi_stored_value_card_purchase_load' | 'nondurable_goods' | 'nurseries_lawn_and_garden_supply_stores' | 'nursing_personal_care' | 'office_and_commercial_furniture' | 'opticians_eyeglasses' | 'optometrists_ophthalmologist' | 'orthopedic_goods_prosthetic_devices' | 'osteopaths' | 'package_stores_beer_wine_and_liquor' | 'paints_varnishes_and_supplies' | 'parking_lots_garages' | 'passenger_railways' | 'pawn_shops' | 'pet_shops_pet_food_and_supplies' | 'petroleum_and_petroleum_products' | 'photo_developing' | 'photographic_photocopy_microfilm_equipment_and_supplies' | 'photographic_studios' | 'picture_video_production' | 'piece_goods_notions_and_other_dry_goods' | 'plumbing_heating_equipment_and_supplies' | 'political_organizations' | 'postal_services_government_only' | 'precious_stones_and_metals_watches_and_jewelry' | 'professional_services' | 'public_warehousing_and_storage' | 'quick_copy_repro_and_blueprint' | 'railroads' | 'real_estate_agents_and_managers_rentals' | 'record_stores' | 'recreational_vehicle_rentals' | 'religious_goods_stores' | 'religious_organizations' | 'roofing_siding_sheet_metal' | 'secretarial_support_services' | 'security_brokers_dealers' | 'service_stations' | 'sewing_needlework_fabric_and_piece_goods_stores' | 'shoe_repair_hat_cleaning' | 'shoe_stores' | 'small_appliance_repair' | 'snowmobile_dealers' | 'special_trade_services' | 'specialty_cleaning' | 'sporting_goods_stores' | 'sporting_recreation_camps' | 'sports_and_riding_apparel_stores' | 'sports_clubs_fields' | 'stamp_and_coin_stores' | 'stationary_office_supplies_printing_and_writing_paper' | 'stationery_stores_office_and_school_supply_stores' | 'swimming_pools_sales' | 't_ui_travel_germany' | 'tailors_alterations' | 'tax_payments_government_agencies' | 'tax_preparation_services' | 'taxicabs_limousines' | 'telecommunication_equipment_and_telephone_sales' | 'telecommunication_services' | 'telegraph_services' | 'tent_and_awning_shops' | 'testing_laboratories' | 'theatrical_ticket_agencies' | 'timeshares' | 'tire_retreading_and_repair' | 'tolls_bridge_fees' | 'tourist_attractions_and_exhibits' | 'towing_services' | 'trailer_parks_campgrounds' | 'transportation_services' | 'travel_agencies_tour_operators' | 'truck_stop_iteration' | 'truck_utility_trailer_rentals' | 'typesetting_plate_making_and_related_services' | 'typewriter_stores' | 'u_s_federal_government_agencies_or_departments' | 'uniforms_commercial_clothing' | 'used_merchandise_and_secondhand_stores' | 'utilities' | 'variety_stores' | 'veterinary_services' | 'video_amusement_game_supplies' | 'video_game_arcades' | 'video_tape_rental_stores' | 'vocational_trade_schools' | 'watch_jewelry_repair' | 'welding_repair' | 'wholesale_clubs' | 'wig_and_toupee_stores' | 'wires_money_orders' | 'womens_accessory_and_specialty_shops' | 'womens_ready_to_wear_stores' | 'wrecking_and_salvage_yards')[] | null
 /**
  * @description Array of strings containing representing countries from which authorizations will be allowed. Authorizations from merchants in all other countries will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `blocked_merchant_countries`. Provide an empty value to unset this control.
  */
 allowed_merchant_countries?: string[] | null
 /**
  * @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.
  */
 blocked_categories?: ('ac_refrigeration_repair' | 'accounting_bookkeeping_services' | 'advertising_services' | 'agricultural_cooperative' | 'airlines_air_carriers' | 'airports_flying_fields' | 'ambulance_services' | 'amusement_parks_carnivals' | 'antique_reproductions' | 'antique_shops' | 'aquariums' | 'architectural_surveying_services' | 'art_dealers_and_galleries' | 'artists_supply_and_craft_shops' | 'auto_and_home_supply_stores' | 'auto_body_repair_shops' | 'auto_paint_shops' | 'auto_service_shops' | 'automated_cash_disburse' | 'automated_fuel_dispensers' | 'automobile_associations' | 'automotive_parts_and_accessories_stores' | 'automotive_tire_stores' | 'bail_and_bond_payments' | 'bakeries' | 'bands_orchestras' | 'barber_and_beauty_shops' | 'betting_casino_gambling' | 'bicycle_shops' | 'billiard_pool_establishments' | 'boat_dealers' | 'boat_rentals_and_leases' | 'book_stores' | 'books_periodicals_and_newspapers' | 'bowling_alleys' | 'bus_lines' | 'business_secretarial_schools' | 'buying_shopping_services' | 'cable_satellite_and_other_pay_television_and_radio' | 'camera_and_photographic_supply_stores' | 'candy_nut_and_confectionery_stores' | 'car_and_truck_dealers_new_used' | 'car_and_truck_dealers_used_only' | 'car_rental_agencies' | 'car_washes' | 'carpentry_services' | 'carpet_upholstery_cleaning' | 'caterers' | 'charitable_and_social_service_organizations_fundraising' | 'chemicals_and_allied_products' | 'child_care_services' | 'childrens_and_infants_wear_stores' | 'chiropodists_podiatrists' | 'chiropractors' | 'cigar_stores_and_stands' | 'civic_social_fraternal_associations' | 'cleaning_and_maintenance' | 'clothing_rental' | 'colleges_universities' | 'commercial_equipment' | 'commercial_footwear' | 'commercial_photography_art_and_graphics' | 'commuter_transport_and_ferries' | 'computer_network_services' | 'computer_programming' | 'computer_repair' | 'computer_software_stores' | 'computers_peripherals_and_software' | 'concrete_work_services' | 'construction_materials' | 'consulting_public_relations' | 'correspondence_schools' | 'cosmetic_stores' | 'counseling_services' | 'country_clubs' | 'courier_services' | 'court_costs' | 'credit_reporting_agencies' | 'cruise_lines' | 'dairy_products_stores' | 'dance_hall_studios_schools' | 'dating_escort_services' | 'dentists_orthodontists' | 'department_stores' | 'detective_agencies' | 'digital_goods_applications' | 'digital_goods_games' | 'digital_goods_large_volume' | 'digital_goods_media' | 'direct_marketing_catalog_merchant' | 'direct_marketing_combination_catalog_and_retail_merchant' | 'direct_marketing_inbound_telemarketing' | 'direct_marketing_insurance_services' | 'direct_marketing_other' | 'direct_marketing_outbound_telemarketing' | 'direct_marketing_subscription' | 'direct_marketing_travel' | 'discount_stores' | 'doctors' | 'door_to_door_sales' | 'drapery_window_covering_and_upholstery_stores' | 'drinking_places' | 'drug_stores_and_pharmacies' | 'drugs_drug_proprietaries_and_druggist_sundries' | 'dry_cleaners' | 'durable_goods' | 'duty_free_stores' | 'eating_places_restaurants' | 'educational_services' | 'electric_razor_stores' | 'electric_vehicle_charging' | 'electrical_parts_and_equipment' | 'electrical_services' | 'electronics_repair_shops' | 'electronics_stores' | 'elementary_secondary_schools' | 'emergency_services_gcas_visa_use_only' | 'employment_temp_agencies' | 'equipment_rental' | 'exterminating_services' | 'family_clothing_stores' | 'fast_food_restaurants' | 'financial_institutions' | 'fines_government_administrative_entities' | 'fireplace_fireplace_screens_and_accessories_stores' | 'floor_covering_stores' | 'florists' | 'florists_supplies_nursery_stock_and_flowers' | 'freezer_and_locker_meat_provisioners' | 'fuel_dealers_non_automotive' | 'funeral_services_crematories' | 'furniture_home_furnishings_and_equipment_stores_except_appliances' | 'furniture_repair_refinishing' | 'furriers_and_fur_shops' | 'general_services' | 'gift_card_novelty_and_souvenir_shops' | 'glass_paint_and_wallpaper_stores' | 'glassware_crystal_stores' | 'golf_courses_public' | 'government_licensed_horse_dog_racing_us_region_only' | 'government_licensed_online_casions_online_gambling_us_region_only' | 'government_owned_lotteries_non_us_region' | 'government_owned_lotteries_us_region_only' | 'government_services' | 'grocery_stores_supermarkets' | 'hardware_equipment_and_supplies' | 'hardware_stores' | 'health_and_beauty_spas' | 'hearing_aids_sales_and_supplies' | 'heating_plumbing_a_c' | 'hobby_toy_and_game_shops' | 'home_supply_warehouse_stores' | 'hospitals' | 'hotels_motels_and_resorts' | 'household_appliance_stores' | 'industrial_supplies' | 'information_retrieval_services' | 'insurance_default' | 'insurance_underwriting_premiums' | 'intra_company_purchases' | 'jewelry_stores_watches_clocks_and_silverware_stores' | 'landscaping_services' | 'laundries' | 'laundry_cleaning_services' | 'legal_services_attorneys' | 'luggage_and_leather_goods_stores' | 'lumber_building_materials_stores' | 'manual_cash_disburse' | 'marinas_service_and_supplies' | 'marketplaces' | 'masonry_stonework_and_plaster' | 'massage_parlors' | 'medical_and_dental_labs' | 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies' | 'medical_services' | 'membership_organizations' | 'mens_and_boys_clothing_and_accessories_stores' | 'mens_womens_clothing_stores' | 'metal_service_centers' | 'miscellaneous' | 'miscellaneous_apparel_and_accessory_shops' | 'miscellaneous_auto_dealers' | 'miscellaneous_business_services' | 'miscellaneous_food_stores' | 'miscellaneous_general_merchandise' | 'miscellaneous_general_services' | 'miscellaneous_home_furnishing_specialty_stores' | 'miscellaneous_publishing_and_printing' | 'miscellaneous_recreation_services' | 'miscellaneous_repair_shops' | 'miscellaneous_specialty_retail' | 'mobile_home_dealers' | 'motion_picture_theaters' | 'motor_freight_carriers_and_trucking' | 'motor_homes_dealers' | 'motor_vehicle_supplies_and_new_parts' | 'motorcycle_shops_and_dealers' | 'motorcycle_shops_dealers' | 'music_stores_musical_instruments_pianos_and_sheet_music' | 'news_dealers_and_newsstands' | 'non_fi_money_orders' | 'non_fi_stored_value_card_purchase_load' | 'nondurable_goods' | 'nurseries_lawn_and_garden_supply_stores' | 'nursing_personal_care' | 'office_and_commercial_furniture' | 'opticians_eyeglasses' | 'optometrists_ophthalmologist' | 'orthopedic_goods_prosthetic_devices' | 'osteopaths' | 'package_stores_beer_wine_and_liquor' | 'paints_varnishes_and_supplies' | 'parking_lots_garages' | 'passenger_railways' | 'pawn_shops' | 'pet_shops_pet_food_and_supplies' | 'petroleum_and_petroleum_products' | 'photo_developing' | 'photographic_photocopy_microfilm_equipment_and_supplies' | 'photographic_studios' | 'picture_video_production' | 'piece_goods_notions_and_other_dry_goods' | 'plumbing_heating_equipment_and_supplies' | 'political_organizations' | 'postal_services_government_only' | 'precious_stones_and_metals_watches_and_jewelry' | 'professional_services' | 'public_warehousing_and_storage' | 'quick_copy_repro_and_blueprint' | 'railroads' | 'real_estate_agents_and_managers_rentals' | 'record_stores' | 'recreational_vehicle_rentals' | 'religious_goods_stores' | 'religious_organizations' | 'roofing_siding_sheet_metal' | 'secretarial_support_services' | 'security_brokers_dealers' | 'service_stations' | 'sewing_needlework_fabric_and_piece_goods_stores' | 'shoe_repair_hat_cleaning' | 'shoe_stores' | 'small_appliance_repair' | 'snowmobile_dealers' | 'special_trade_services' | 'specialty_cleaning' | 'sporting_goods_stores' | 'sporting_recreation_camps' | 'sports_and_riding_apparel_stores' | 'sports_clubs_fields' | 'stamp_and_coin_stores' | 'stationary_office_supplies_printing_and_writing_paper' | 'stationery_stores_office_and_school_supply_stores' | 'swimming_pools_sales' | 't_ui_travel_germany' | 'tailors_alterations' | 'tax_payments_government_agencies' | 'tax_preparation_services' | 'taxicabs_limousines' | 'telecommunication_equipment_and_telephone_sales' | 'telecommunication_services' | 'telegraph_services' | 'tent_and_awning_shops' | 'testing_laboratories' | 'theatrical_ticket_agencies' | 'timeshares' | 'tire_retreading_and_repair' | 'tolls_bridge_fees' | 'tourist_attractions_and_exhibits' | 'towing_services' | 'trailer_parks_campgrounds' | 'transportation_services' | 'travel_agencies_tour_operators' | 'truck_stop_iteration' | 'truck_utility_trailer_rentals' | 'typesetting_plate_making_and_related_services' | 'typewriter_stores' | 'u_s_federal_government_agencies_or_departments' | 'uniforms_commercial_clothing' | 'used_merchandise_and_secondhand_stores' | 'utilities' | 'variety_stores' | 'veterinary_services' | 'video_amusement_game_supplies' | 'video_game_arcades' | 'video_tape_rental_stores' | 'vocational_trade_schools' | 'watch_jewelry_repair' | 'welding_repair' | 'wholesale_clubs' | 'wig_and_toupee_stores' | 'wires_money_orders' | 'womens_accessory_and_specialty_shops' | 'womens_ready_to_wear_stores' | 'wrecking_and_salvage_yards')[] | null
 /**
  * @description Array of strings containing representing countries from which authorizations will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `allowed_merchant_countries`. Provide an empty value to unset this control.
  */
 blocked_merchant_countries?: string[] | null
 /**
  * @description Limit spending with amount-based rules that apply across any cards this card replaced (i.e., its `replacement_for` card and _that_ card's `replacement_for` card, up the chain).
  */
 spending_limits?: Schemas.issuing_card_spending_limit[] | null
 /**
  * @description Currency of the amounts within `spending_limits`. Always the same as the currency of the card.
  */
 spending_limits_currency?: string | null
}

/**
 * @title IssuingCardGooglePay
 */
export type issuing_card_google_pay = {
 /**
  * @description Google Pay Eligibility
  */
 eligible: boolean
 /**
  * @description Reason the card is ineligible for Google Pay
  */
 ineligible_reason?: ('missing_agreement' | 'missing_cardholder_contact' | 'unsupported_region') | null
}

/**
 * @title IssuingCardShipping
 */
export type issuing_card_shipping = {
 /**
  * @title Address
  */
 address: Schemas.address
 /**
  * @description Address validation details for the shipment.
  */
 address_validation?: Schemas.issuing_card_shipping_address_validation | null
 /**
  * @description The delivery company that shipped a card.
  */
 carrier?: ('dhl' | 'fedex' | 'royal_mail' | 'usps') | null
 /**
  * @description Additional information that may be required for clearing customs.
  */
 customs?: Schemas.issuing_card_shipping_customs | null
 /**
  * @description A unix timestamp representing a best estimate of when the card will be delivered.
  */
 eta?: number | null
 /**
  * @description Recipient name.
  */
 name: string
 /**
  * @description The phone number of the receiver of the shipment. Our courier partners will use this number to contact you in the event of card delivery issues. For individual shipments to the EU/UK, if this field is empty, we will provide them with the phone number provided when the cardholder was initially created.
  */
 phone_number?: string | null
 /**
  * @description Whether a signature is required for card delivery. This feature is only supported for US users. Standard shipping service does not support signature on delivery. The default value for standard shipping service is false and for express and priority services is true.
  */
 require_signature?: boolean | null
 /**
  * @description Shipment service, such as `standard` or `express`.
  */
 service: ('express' | 'priority' | 'standard')
 /**
  * @description The delivery status of the card.
  */
 status?: ('canceled' | 'delivered' | 'failure' | 'pending' | 'returned' | 'shipped' | 'submitted') | null
 /**
  * @description A tracking number for a card shipment.
  */
 tracking_number?: string | null
 /**
  * @description A link to the shipping carrier's site where you can view detailed information about a card shipment.
  */
 tracking_url?: string | null
 /**
  * @description Packaging options.
  */
 type: ('bulk' | 'individual')
}

/**
 * @title IssuingCardShippingAddressValidation
 */
export type issuing_card_shipping_address_validation = {
 /**
  * @description The address validation capabilities to use.
  */
 mode: ('disabled' | 'normalization_only' | 'validation_and_normalization')
 /**
  * @description The normalized shipping address.
  */
 normalized_address?: Schemas.address | null
 /**
  * @description The validation result for the shipping address.
  */
 result?: ('indeterminate' | 'likely_deliverable' | 'likely_undeliverable') | null
}

/**
 * @title IssuingCardShippingCustoms
 */
export type issuing_card_shipping_customs = {
 /**
  * @description A registration number used for customs in Europe. See [https://www.gov.uk/eori](https://www.gov.uk/eori) for the UK and [https://ec.europa.eu/taxation_customs/business/customs-procedures-import-and-export/customs-procedures/economic-operators-registration-and-identification-number-eori_en](https://ec.europa.eu/taxation_customs/business/customs-procedures-import-and-export/customs-procedures/economic-operators-registration-and-identification-number-eori_en) for the EU.
  */
 eori_number?: string | null
}

/**
 * @title IssuingCardSpendingLimit
 */
export type issuing_card_spending_limit = {
 /**
  * @description Maximum amount allowed to spend per interval. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 amount: number
 /**
  * @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories.
  */
 categories?: ('ac_refrigeration_repair' | 'accounting_bookkeeping_services' | 'advertising_services' | 'agricultural_cooperative' | 'airlines_air_carriers' | 'airports_flying_fields' | 'ambulance_services' | 'amusement_parks_carnivals' | 'antique_reproductions' | 'antique_shops' | 'aquariums' | 'architectural_surveying_services' | 'art_dealers_and_galleries' | 'artists_supply_and_craft_shops' | 'auto_and_home_supply_stores' | 'auto_body_repair_shops' | 'auto_paint_shops' | 'auto_service_shops' | 'automated_cash_disburse' | 'automated_fuel_dispensers' | 'automobile_associations' | 'automotive_parts_and_accessories_stores' | 'automotive_tire_stores' | 'bail_and_bond_payments' | 'bakeries' | 'bands_orchestras' | 'barber_and_beauty_shops' | 'betting_casino_gambling' | 'bicycle_shops' | 'billiard_pool_establishments' | 'boat_dealers' | 'boat_rentals_and_leases' | 'book_stores' | 'books_periodicals_and_newspapers' | 'bowling_alleys' | 'bus_lines' | 'business_secretarial_schools' | 'buying_shopping_services' | 'cable_satellite_and_other_pay_television_and_radio' | 'camera_and_photographic_supply_stores' | 'candy_nut_and_confectionery_stores' | 'car_and_truck_dealers_new_used' | 'car_and_truck_dealers_used_only' | 'car_rental_agencies' | 'car_washes' | 'carpentry_services' | 'carpet_upholstery_cleaning' | 'caterers' | 'charitable_and_social_service_organizations_fundraising' | 'chemicals_and_allied_products' | 'child_care_services' | 'childrens_and_infants_wear_stores' | 'chiropodists_podiatrists' | 'chiropractors' | 'cigar_stores_and_stands' | 'civic_social_fraternal_associations' | 'cleaning_and_maintenance' | 'clothing_rental' | 'colleges_universities' | 'commercial_equipment' | 'commercial_footwear' | 'commercial_photography_art_and_graphics' | 'commuter_transport_and_ferries' | 'computer_network_services' | 'computer_programming' | 'computer_repair' | 'computer_software_stores' | 'computers_peripherals_and_software' | 'concrete_work_services' | 'construction_materials' | 'consulting_public_relations' | 'correspondence_schools' | 'cosmetic_stores' | 'counseling_services' | 'country_clubs' | 'courier_services' | 'court_costs' | 'credit_reporting_agencies' | 'cruise_lines' | 'dairy_products_stores' | 'dance_hall_studios_schools' | 'dating_escort_services' | 'dentists_orthodontists' | 'department_stores' | 'detective_agencies' | 'digital_goods_applications' | 'digital_goods_games' | 'digital_goods_large_volume' | 'digital_goods_media' | 'direct_marketing_catalog_merchant' | 'direct_marketing_combination_catalog_and_retail_merchant' | 'direct_marketing_inbound_telemarketing' | 'direct_marketing_insurance_services' | 'direct_marketing_other' | 'direct_marketing_outbound_telemarketing' | 'direct_marketing_subscription' | 'direct_marketing_travel' | 'discount_stores' | 'doctors' | 'door_to_door_sales' | 'drapery_window_covering_and_upholstery_stores' | 'drinking_places' | 'drug_stores_and_pharmacies' | 'drugs_drug_proprietaries_and_druggist_sundries' | 'dry_cleaners' | 'durable_goods' | 'duty_free_stores' | 'eating_places_restaurants' | 'educational_services' | 'electric_razor_stores' | 'electric_vehicle_charging' | 'electrical_parts_and_equipment' | 'electrical_services' | 'electronics_repair_shops' | 'electronics_stores' | 'elementary_secondary_schools' | 'emergency_services_gcas_visa_use_only' | 'employment_temp_agencies' | 'equipment_rental' | 'exterminating_services' | 'family_clothing_stores' | 'fast_food_restaurants' | 'financial_institutions' | 'fines_government_administrative_entities' | 'fireplace_fireplace_screens_and_accessories_stores' | 'floor_covering_stores' | 'florists' | 'florists_supplies_nursery_stock_and_flowers' | 'freezer_and_locker_meat_provisioners' | 'fuel_dealers_non_automotive' | 'funeral_services_crematories' | 'furniture_home_furnishings_and_equipment_stores_except_appliances' | 'furniture_repair_refinishing' | 'furriers_and_fur_shops' | 'general_services' | 'gift_card_novelty_and_souvenir_shops' | 'glass_paint_and_wallpaper_stores' | 'glassware_crystal_stores' | 'golf_courses_public' | 'government_licensed_horse_dog_racing_us_region_only' | 'government_licensed_online_casions_online_gambling_us_region_only' | 'government_owned_lotteries_non_us_region' | 'government_owned_lotteries_us_region_only' | 'government_services' | 'grocery_stores_supermarkets' | 'hardware_equipment_and_supplies' | 'hardware_stores' | 'health_and_beauty_spas' | 'hearing_aids_sales_and_supplies' | 'heating_plumbing_a_c' | 'hobby_toy_and_game_shops' | 'home_supply_warehouse_stores' | 'hospitals' | 'hotels_motels_and_resorts' | 'household_appliance_stores' | 'industrial_supplies' | 'information_retrieval_services' | 'insurance_default' | 'insurance_underwriting_premiums' | 'intra_company_purchases' | 'jewelry_stores_watches_clocks_and_silverware_stores' | 'landscaping_services' | 'laundries' | 'laundry_cleaning_services' | 'legal_services_attorneys' | 'luggage_and_leather_goods_stores' | 'lumber_building_materials_stores' | 'manual_cash_disburse' | 'marinas_service_and_supplies' | 'marketplaces' | 'masonry_stonework_and_plaster' | 'massage_parlors' | 'medical_and_dental_labs' | 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies' | 'medical_services' | 'membership_organizations' | 'mens_and_boys_clothing_and_accessories_stores' | 'mens_womens_clothing_stores' | 'metal_service_centers' | 'miscellaneous' | 'miscellaneous_apparel_and_accessory_shops' | 'miscellaneous_auto_dealers' | 'miscellaneous_business_services' | 'miscellaneous_food_stores' | 'miscellaneous_general_merchandise' | 'miscellaneous_general_services' | 'miscellaneous_home_furnishing_specialty_stores' | 'miscellaneous_publishing_and_printing' | 'miscellaneous_recreation_services' | 'miscellaneous_repair_shops' | 'miscellaneous_specialty_retail' | 'mobile_home_dealers' | 'motion_picture_theaters' | 'motor_freight_carriers_and_trucking' | 'motor_homes_dealers' | 'motor_vehicle_supplies_and_new_parts' | 'motorcycle_shops_and_dealers' | 'motorcycle_shops_dealers' | 'music_stores_musical_instruments_pianos_and_sheet_music' | 'news_dealers_and_newsstands' | 'non_fi_money_orders' | 'non_fi_stored_value_card_purchase_load' | 'nondurable_goods' | 'nurseries_lawn_and_garden_supply_stores' | 'nursing_personal_care' | 'office_and_commercial_furniture' | 'opticians_eyeglasses' | 'optometrists_ophthalmologist' | 'orthopedic_goods_prosthetic_devices' | 'osteopaths' | 'package_stores_beer_wine_and_liquor' | 'paints_varnishes_and_supplies' | 'parking_lots_garages' | 'passenger_railways' | 'pawn_shops' | 'pet_shops_pet_food_and_supplies' | 'petroleum_and_petroleum_products' | 'photo_developing' | 'photographic_photocopy_microfilm_equipment_and_supplies' | 'photographic_studios' | 'picture_video_production' | 'piece_goods_notions_and_other_dry_goods' | 'plumbing_heating_equipment_and_supplies' | 'political_organizations' | 'postal_services_government_only' | 'precious_stones_and_metals_watches_and_jewelry' | 'professional_services' | 'public_warehousing_and_storage' | 'quick_copy_repro_and_blueprint' | 'railroads' | 'real_estate_agents_and_managers_rentals' | 'record_stores' | 'recreational_vehicle_rentals' | 'religious_goods_stores' | 'religious_organizations' | 'roofing_siding_sheet_metal' | 'secretarial_support_services' | 'security_brokers_dealers' | 'service_stations' | 'sewing_needlework_fabric_and_piece_goods_stores' | 'shoe_repair_hat_cleaning' | 'shoe_stores' | 'small_appliance_repair' | 'snowmobile_dealers' | 'special_trade_services' | 'specialty_cleaning' | 'sporting_goods_stores' | 'sporting_recreation_camps' | 'sports_and_riding_apparel_stores' | 'sports_clubs_fields' | 'stamp_and_coin_stores' | 'stationary_office_supplies_printing_and_writing_paper' | 'stationery_stores_office_and_school_supply_stores' | 'swimming_pools_sales' | 't_ui_travel_germany' | 'tailors_alterations' | 'tax_payments_government_agencies' | 'tax_preparation_services' | 'taxicabs_limousines' | 'telecommunication_equipment_and_telephone_sales' | 'telecommunication_services' | 'telegraph_services' | 'tent_and_awning_shops' | 'testing_laboratories' | 'theatrical_ticket_agencies' | 'timeshares' | 'tire_retreading_and_repair' | 'tolls_bridge_fees' | 'tourist_attractions_and_exhibits' | 'towing_services' | 'trailer_parks_campgrounds' | 'transportation_services' | 'travel_agencies_tour_operators' | 'truck_stop_iteration' | 'truck_utility_trailer_rentals' | 'typesetting_plate_making_and_related_services' | 'typewriter_stores' | 'u_s_federal_government_agencies_or_departments' | 'uniforms_commercial_clothing' | 'used_merchandise_and_secondhand_stores' | 'utilities' | 'variety_stores' | 'veterinary_services' | 'video_amusement_game_supplies' | 'video_game_arcades' | 'video_tape_rental_stores' | 'vocational_trade_schools' | 'watch_jewelry_repair' | 'welding_repair' | 'wholesale_clubs' | 'wig_and_toupee_stores' | 'wires_money_orders' | 'womens_accessory_and_specialty_shops' | 'womens_ready_to_wear_stores' | 'wrecking_and_salvage_yards')[] | null
 /**
  * @description Interval (or event) to which the amount applies.
  */
 interval: ('all_time' | 'daily' | 'monthly' | 'per_authorization' | 'weekly' | 'yearly')
}

/**
 * @title IssuingCardWallets
 */
export type issuing_card_wallets = {
 /**
  * @title IssuingCardApplePay
  */
 apple_pay: Schemas.issuing_card_apple_pay
 /**
  * @title IssuingCardGooglePay
  */
 google_pay: Schemas.issuing_card_google_pay
 /**
  * @description Unique identifier for a card used with digital wallets
  */
 primary_account_identifier?: string | null
}

/**
 * @title IssuingCardholderAddress
 */
export type issuing_cardholder_address = {
 /**
  * @title Address
  */
 address: Schemas.address
}

/**
 * @title IssuingCardholderAuthorizationControls
 */
export type issuing_cardholder_authorization_controls = {
 /**
  * @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.
  */
 allowed_categories?: ('ac_refrigeration_repair' | 'accounting_bookkeeping_services' | 'advertising_services' | 'agricultural_cooperative' | 'airlines_air_carriers' | 'airports_flying_fields' | 'ambulance_services' | 'amusement_parks_carnivals' | 'antique_reproductions' | 'antique_shops' | 'aquariums' | 'architectural_surveying_services' | 'art_dealers_and_galleries' | 'artists_supply_and_craft_shops' | 'auto_and_home_supply_stores' | 'auto_body_repair_shops' | 'auto_paint_shops' | 'auto_service_shops' | 'automated_cash_disburse' | 'automated_fuel_dispensers' | 'automobile_associations' | 'automotive_parts_and_accessories_stores' | 'automotive_tire_stores' | 'bail_and_bond_payments' | 'bakeries' | 'bands_orchestras' | 'barber_and_beauty_shops' | 'betting_casino_gambling' | 'bicycle_shops' | 'billiard_pool_establishments' | 'boat_dealers' | 'boat_rentals_and_leases' | 'book_stores' | 'books_periodicals_and_newspapers' | 'bowling_alleys' | 'bus_lines' | 'business_secretarial_schools' | 'buying_shopping_services' | 'cable_satellite_and_other_pay_television_and_radio' | 'camera_and_photographic_supply_stores' | 'candy_nut_and_confectionery_stores' | 'car_and_truck_dealers_new_used' | 'car_and_truck_dealers_used_only' | 'car_rental_agencies' | 'car_washes' | 'carpentry_services' | 'carpet_upholstery_cleaning' | 'caterers' | 'charitable_and_social_service_organizations_fundraising' | 'chemicals_and_allied_products' | 'child_care_services' | 'childrens_and_infants_wear_stores' | 'chiropodists_podiatrists' | 'chiropractors' | 'cigar_stores_and_stands' | 'civic_social_fraternal_associations' | 'cleaning_and_maintenance' | 'clothing_rental' | 'colleges_universities' | 'commercial_equipment' | 'commercial_footwear' | 'commercial_photography_art_and_graphics' | 'commuter_transport_and_ferries' | 'computer_network_services' | 'computer_programming' | 'computer_repair' | 'computer_software_stores' | 'computers_peripherals_and_software' | 'concrete_work_services' | 'construction_materials' | 'consulting_public_relations' | 'correspondence_schools' | 'cosmetic_stores' | 'counseling_services' | 'country_clubs' | 'courier_services' | 'court_costs' | 'credit_reporting_agencies' | 'cruise_lines' | 'dairy_products_stores' | 'dance_hall_studios_schools' | 'dating_escort_services' | 'dentists_orthodontists' | 'department_stores' | 'detective_agencies' | 'digital_goods_applications' | 'digital_goods_games' | 'digital_goods_large_volume' | 'digital_goods_media' | 'direct_marketing_catalog_merchant' | 'direct_marketing_combination_catalog_and_retail_merchant' | 'direct_marketing_inbound_telemarketing' | 'direct_marketing_insurance_services' | 'direct_marketing_other' | 'direct_marketing_outbound_telemarketing' | 'direct_marketing_subscription' | 'direct_marketing_travel' | 'discount_stores' | 'doctors' | 'door_to_door_sales' | 'drapery_window_covering_and_upholstery_stores' | 'drinking_places' | 'drug_stores_and_pharmacies' | 'drugs_drug_proprietaries_and_druggist_sundries' | 'dry_cleaners' | 'durable_goods' | 'duty_free_stores' | 'eating_places_restaurants' | 'educational_services' | 'electric_razor_stores' | 'electric_vehicle_charging' | 'electrical_parts_and_equipment' | 'electrical_services' | 'electronics_repair_shops' | 'electronics_stores' | 'elementary_secondary_schools' | 'emergency_services_gcas_visa_use_only' | 'employment_temp_agencies' | 'equipment_rental' | 'exterminating_services' | 'family_clothing_stores' | 'fast_food_restaurants' | 'financial_institutions' | 'fines_government_administrative_entities' | 'fireplace_fireplace_screens_and_accessories_stores' | 'floor_covering_stores' | 'florists' | 'florists_supplies_nursery_stock_and_flowers' | 'freezer_and_locker_meat_provisioners' | 'fuel_dealers_non_automotive' | 'funeral_services_crematories' | 'furniture_home_furnishings_and_equipment_stores_except_appliances' | 'furniture_repair_refinishing' | 'furriers_and_fur_shops' | 'general_services' | 'gift_card_novelty_and_souvenir_shops' | 'glass_paint_and_wallpaper_stores' | 'glassware_crystal_stores' | 'golf_courses_public' | 'government_licensed_horse_dog_racing_us_region_only' | 'government_licensed_online_casions_online_gambling_us_region_only' | 'government_owned_lotteries_non_us_region' | 'government_owned_lotteries_us_region_only' | 'government_services' | 'grocery_stores_supermarkets' | 'hardware_equipment_and_supplies' | 'hardware_stores' | 'health_and_beauty_spas' | 'hearing_aids_sales_and_supplies' | 'heating_plumbing_a_c' | 'hobby_toy_and_game_shops' | 'home_supply_warehouse_stores' | 'hospitals' | 'hotels_motels_and_resorts' | 'household_appliance_stores' | 'industrial_supplies' | 'information_retrieval_services' | 'insurance_default' | 'insurance_underwriting_premiums' | 'intra_company_purchases' | 'jewelry_stores_watches_clocks_and_silverware_stores' | 'landscaping_services' | 'laundries' | 'laundry_cleaning_services' | 'legal_services_attorneys' | 'luggage_and_leather_goods_stores' | 'lumber_building_materials_stores' | 'manual_cash_disburse' | 'marinas_service_and_supplies' | 'marketplaces' | 'masonry_stonework_and_plaster' | 'massage_parlors' | 'medical_and_dental_labs' | 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies' | 'medical_services' | 'membership_organizations' | 'mens_and_boys_clothing_and_accessories_stores' | 'mens_womens_clothing_stores' | 'metal_service_centers' | 'miscellaneous' | 'miscellaneous_apparel_and_accessory_shops' | 'miscellaneous_auto_dealers' | 'miscellaneous_business_services' | 'miscellaneous_food_stores' | 'miscellaneous_general_merchandise' | 'miscellaneous_general_services' | 'miscellaneous_home_furnishing_specialty_stores' | 'miscellaneous_publishing_and_printing' | 'miscellaneous_recreation_services' | 'miscellaneous_repair_shops' | 'miscellaneous_specialty_retail' | 'mobile_home_dealers' | 'motion_picture_theaters' | 'motor_freight_carriers_and_trucking' | 'motor_homes_dealers' | 'motor_vehicle_supplies_and_new_parts' | 'motorcycle_shops_and_dealers' | 'motorcycle_shops_dealers' | 'music_stores_musical_instruments_pianos_and_sheet_music' | 'news_dealers_and_newsstands' | 'non_fi_money_orders' | 'non_fi_stored_value_card_purchase_load' | 'nondurable_goods' | 'nurseries_lawn_and_garden_supply_stores' | 'nursing_personal_care' | 'office_and_commercial_furniture' | 'opticians_eyeglasses' | 'optometrists_ophthalmologist' | 'orthopedic_goods_prosthetic_devices' | 'osteopaths' | 'package_stores_beer_wine_and_liquor' | 'paints_varnishes_and_supplies' | 'parking_lots_garages' | 'passenger_railways' | 'pawn_shops' | 'pet_shops_pet_food_and_supplies' | 'petroleum_and_petroleum_products' | 'photo_developing' | 'photographic_photocopy_microfilm_equipment_and_supplies' | 'photographic_studios' | 'picture_video_production' | 'piece_goods_notions_and_other_dry_goods' | 'plumbing_heating_equipment_and_supplies' | 'political_organizations' | 'postal_services_government_only' | 'precious_stones_and_metals_watches_and_jewelry' | 'professional_services' | 'public_warehousing_and_storage' | 'quick_copy_repro_and_blueprint' | 'railroads' | 'real_estate_agents_and_managers_rentals' | 'record_stores' | 'recreational_vehicle_rentals' | 'religious_goods_stores' | 'religious_organizations' | 'roofing_siding_sheet_metal' | 'secretarial_support_services' | 'security_brokers_dealers' | 'service_stations' | 'sewing_needlework_fabric_and_piece_goods_stores' | 'shoe_repair_hat_cleaning' | 'shoe_stores' | 'small_appliance_repair' | 'snowmobile_dealers' | 'special_trade_services' | 'specialty_cleaning' | 'sporting_goods_stores' | 'sporting_recreation_camps' | 'sports_and_riding_apparel_stores' | 'sports_clubs_fields' | 'stamp_and_coin_stores' | 'stationary_office_supplies_printing_and_writing_paper' | 'stationery_stores_office_and_school_supply_stores' | 'swimming_pools_sales' | 't_ui_travel_germany' | 'tailors_alterations' | 'tax_payments_government_agencies' | 'tax_preparation_services' | 'taxicabs_limousines' | 'telecommunication_equipment_and_telephone_sales' | 'telecommunication_services' | 'telegraph_services' | 'tent_and_awning_shops' | 'testing_laboratories' | 'theatrical_ticket_agencies' | 'timeshares' | 'tire_retreading_and_repair' | 'tolls_bridge_fees' | 'tourist_attractions_and_exhibits' | 'towing_services' | 'trailer_parks_campgrounds' | 'transportation_services' | 'travel_agencies_tour_operators' | 'truck_stop_iteration' | 'truck_utility_trailer_rentals' | 'typesetting_plate_making_and_related_services' | 'typewriter_stores' | 'u_s_federal_government_agencies_or_departments' | 'uniforms_commercial_clothing' | 'used_merchandise_and_secondhand_stores' | 'utilities' | 'variety_stores' | 'veterinary_services' | 'video_amusement_game_supplies' | 'video_game_arcades' | 'video_tape_rental_stores' | 'vocational_trade_schools' | 'watch_jewelry_repair' | 'welding_repair' | 'wholesale_clubs' | 'wig_and_toupee_stores' | 'wires_money_orders' | 'womens_accessory_and_specialty_shops' | 'womens_ready_to_wear_stores' | 'wrecking_and_salvage_yards')[] | null
 /**
  * @description Array of strings containing representing countries from which authorizations will be allowed. Authorizations from merchants in all other countries will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `blocked_merchant_countries`. Provide an empty value to unset this control.
  */
 allowed_merchant_countries?: string[] | null
 /**
  * @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.
  */
 blocked_categories?: ('ac_refrigeration_repair' | 'accounting_bookkeeping_services' | 'advertising_services' | 'agricultural_cooperative' | 'airlines_air_carriers' | 'airports_flying_fields' | 'ambulance_services' | 'amusement_parks_carnivals' | 'antique_reproductions' | 'antique_shops' | 'aquariums' | 'architectural_surveying_services' | 'art_dealers_and_galleries' | 'artists_supply_and_craft_shops' | 'auto_and_home_supply_stores' | 'auto_body_repair_shops' | 'auto_paint_shops' | 'auto_service_shops' | 'automated_cash_disburse' | 'automated_fuel_dispensers' | 'automobile_associations' | 'automotive_parts_and_accessories_stores' | 'automotive_tire_stores' | 'bail_and_bond_payments' | 'bakeries' | 'bands_orchestras' | 'barber_and_beauty_shops' | 'betting_casino_gambling' | 'bicycle_shops' | 'billiard_pool_establishments' | 'boat_dealers' | 'boat_rentals_and_leases' | 'book_stores' | 'books_periodicals_and_newspapers' | 'bowling_alleys' | 'bus_lines' | 'business_secretarial_schools' | 'buying_shopping_services' | 'cable_satellite_and_other_pay_television_and_radio' | 'camera_and_photographic_supply_stores' | 'candy_nut_and_confectionery_stores' | 'car_and_truck_dealers_new_used' | 'car_and_truck_dealers_used_only' | 'car_rental_agencies' | 'car_washes' | 'carpentry_services' | 'carpet_upholstery_cleaning' | 'caterers' | 'charitable_and_social_service_organizations_fundraising' | 'chemicals_and_allied_products' | 'child_care_services' | 'childrens_and_infants_wear_stores' | 'chiropodists_podiatrists' | 'chiropractors' | 'cigar_stores_and_stands' | 'civic_social_fraternal_associations' | 'cleaning_and_maintenance' | 'clothing_rental' | 'colleges_universities' | 'commercial_equipment' | 'commercial_footwear' | 'commercial_photography_art_and_graphics' | 'commuter_transport_and_ferries' | 'computer_network_services' | 'computer_programming' | 'computer_repair' | 'computer_software_stores' | 'computers_peripherals_and_software' | 'concrete_work_services' | 'construction_materials' | 'consulting_public_relations' | 'correspondence_schools' | 'cosmetic_stores' | 'counseling_services' | 'country_clubs' | 'courier_services' | 'court_costs' | 'credit_reporting_agencies' | 'cruise_lines' | 'dairy_products_stores' | 'dance_hall_studios_schools' | 'dating_escort_services' | 'dentists_orthodontists' | 'department_stores' | 'detective_agencies' | 'digital_goods_applications' | 'digital_goods_games' | 'digital_goods_large_volume' | 'digital_goods_media' | 'direct_marketing_catalog_merchant' | 'direct_marketing_combination_catalog_and_retail_merchant' | 'direct_marketing_inbound_telemarketing' | 'direct_marketing_insurance_services' | 'direct_marketing_other' | 'direct_marketing_outbound_telemarketing' | 'direct_marketing_subscription' | 'direct_marketing_travel' | 'discount_stores' | 'doctors' | 'door_to_door_sales' | 'drapery_window_covering_and_upholstery_stores' | 'drinking_places' | 'drug_stores_and_pharmacies' | 'drugs_drug_proprietaries_and_druggist_sundries' | 'dry_cleaners' | 'durable_goods' | 'duty_free_stores' | 'eating_places_restaurants' | 'educational_services' | 'electric_razor_stores' | 'electric_vehicle_charging' | 'electrical_parts_and_equipment' | 'electrical_services' | 'electronics_repair_shops' | 'electronics_stores' | 'elementary_secondary_schools' | 'emergency_services_gcas_visa_use_only' | 'employment_temp_agencies' | 'equipment_rental' | 'exterminating_services' | 'family_clothing_stores' | 'fast_food_restaurants' | 'financial_institutions' | 'fines_government_administrative_entities' | 'fireplace_fireplace_screens_and_accessories_stores' | 'floor_covering_stores' | 'florists' | 'florists_supplies_nursery_stock_and_flowers' | 'freezer_and_locker_meat_provisioners' | 'fuel_dealers_non_automotive' | 'funeral_services_crematories' | 'furniture_home_furnishings_and_equipment_stores_except_appliances' | 'furniture_repair_refinishing' | 'furriers_and_fur_shops' | 'general_services' | 'gift_card_novelty_and_souvenir_shops' | 'glass_paint_and_wallpaper_stores' | 'glassware_crystal_stores' | 'golf_courses_public' | 'government_licensed_horse_dog_racing_us_region_only' | 'government_licensed_online_casions_online_gambling_us_region_only' | 'government_owned_lotteries_non_us_region' | 'government_owned_lotteries_us_region_only' | 'government_services' | 'grocery_stores_supermarkets' | 'hardware_equipment_and_supplies' | 'hardware_stores' | 'health_and_beauty_spas' | 'hearing_aids_sales_and_supplies' | 'heating_plumbing_a_c' | 'hobby_toy_and_game_shops' | 'home_supply_warehouse_stores' | 'hospitals' | 'hotels_motels_and_resorts' | 'household_appliance_stores' | 'industrial_supplies' | 'information_retrieval_services' | 'insurance_default' | 'insurance_underwriting_premiums' | 'intra_company_purchases' | 'jewelry_stores_watches_clocks_and_silverware_stores' | 'landscaping_services' | 'laundries' | 'laundry_cleaning_services' | 'legal_services_attorneys' | 'luggage_and_leather_goods_stores' | 'lumber_building_materials_stores' | 'manual_cash_disburse' | 'marinas_service_and_supplies' | 'marketplaces' | 'masonry_stonework_and_plaster' | 'massage_parlors' | 'medical_and_dental_labs' | 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies' | 'medical_services' | 'membership_organizations' | 'mens_and_boys_clothing_and_accessories_stores' | 'mens_womens_clothing_stores' | 'metal_service_centers' | 'miscellaneous' | 'miscellaneous_apparel_and_accessory_shops' | 'miscellaneous_auto_dealers' | 'miscellaneous_business_services' | 'miscellaneous_food_stores' | 'miscellaneous_general_merchandise' | 'miscellaneous_general_services' | 'miscellaneous_home_furnishing_specialty_stores' | 'miscellaneous_publishing_and_printing' | 'miscellaneous_recreation_services' | 'miscellaneous_repair_shops' | 'miscellaneous_specialty_retail' | 'mobile_home_dealers' | 'motion_picture_theaters' | 'motor_freight_carriers_and_trucking' | 'motor_homes_dealers' | 'motor_vehicle_supplies_and_new_parts' | 'motorcycle_shops_and_dealers' | 'motorcycle_shops_dealers' | 'music_stores_musical_instruments_pianos_and_sheet_music' | 'news_dealers_and_newsstands' | 'non_fi_money_orders' | 'non_fi_stored_value_card_purchase_load' | 'nondurable_goods' | 'nurseries_lawn_and_garden_supply_stores' | 'nursing_personal_care' | 'office_and_commercial_furniture' | 'opticians_eyeglasses' | 'optometrists_ophthalmologist' | 'orthopedic_goods_prosthetic_devices' | 'osteopaths' | 'package_stores_beer_wine_and_liquor' | 'paints_varnishes_and_supplies' | 'parking_lots_garages' | 'passenger_railways' | 'pawn_shops' | 'pet_shops_pet_food_and_supplies' | 'petroleum_and_petroleum_products' | 'photo_developing' | 'photographic_photocopy_microfilm_equipment_and_supplies' | 'photographic_studios' | 'picture_video_production' | 'piece_goods_notions_and_other_dry_goods' | 'plumbing_heating_equipment_and_supplies' | 'political_organizations' | 'postal_services_government_only' | 'precious_stones_and_metals_watches_and_jewelry' | 'professional_services' | 'public_warehousing_and_storage' | 'quick_copy_repro_and_blueprint' | 'railroads' | 'real_estate_agents_and_managers_rentals' | 'record_stores' | 'recreational_vehicle_rentals' | 'religious_goods_stores' | 'religious_organizations' | 'roofing_siding_sheet_metal' | 'secretarial_support_services' | 'security_brokers_dealers' | 'service_stations' | 'sewing_needlework_fabric_and_piece_goods_stores' | 'shoe_repair_hat_cleaning' | 'shoe_stores' | 'small_appliance_repair' | 'snowmobile_dealers' | 'special_trade_services' | 'specialty_cleaning' | 'sporting_goods_stores' | 'sporting_recreation_camps' | 'sports_and_riding_apparel_stores' | 'sports_clubs_fields' | 'stamp_and_coin_stores' | 'stationary_office_supplies_printing_and_writing_paper' | 'stationery_stores_office_and_school_supply_stores' | 'swimming_pools_sales' | 't_ui_travel_germany' | 'tailors_alterations' | 'tax_payments_government_agencies' | 'tax_preparation_services' | 'taxicabs_limousines' | 'telecommunication_equipment_and_telephone_sales' | 'telecommunication_services' | 'telegraph_services' | 'tent_and_awning_shops' | 'testing_laboratories' | 'theatrical_ticket_agencies' | 'timeshares' | 'tire_retreading_and_repair' | 'tolls_bridge_fees' | 'tourist_attractions_and_exhibits' | 'towing_services' | 'trailer_parks_campgrounds' | 'transportation_services' | 'travel_agencies_tour_operators' | 'truck_stop_iteration' | 'truck_utility_trailer_rentals' | 'typesetting_plate_making_and_related_services' | 'typewriter_stores' | 'u_s_federal_government_agencies_or_departments' | 'uniforms_commercial_clothing' | 'used_merchandise_and_secondhand_stores' | 'utilities' | 'variety_stores' | 'veterinary_services' | 'video_amusement_game_supplies' | 'video_game_arcades' | 'video_tape_rental_stores' | 'vocational_trade_schools' | 'watch_jewelry_repair' | 'welding_repair' | 'wholesale_clubs' | 'wig_and_toupee_stores' | 'wires_money_orders' | 'womens_accessory_and_specialty_shops' | 'womens_ready_to_wear_stores' | 'wrecking_and_salvage_yards')[] | null
 /**
  * @description Array of strings containing representing countries from which authorizations will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `allowed_merchant_countries`. Provide an empty value to unset this control.
  */
 blocked_merchant_countries?: string[] | null
 /**
  * @description Limit spending with amount-based rules that apply across this cardholder's cards.
  */
 spending_limits?: Schemas.issuing_cardholder_spending_limit[] | null
 /**
  * @description Currency of the amounts within `spending_limits`.
  */
 spending_limits_currency?: string | null
}

/**
 * @title IssuingCardholderCardIssuing
 */
export type issuing_cardholder_card_issuing = {
 /**
  * @description Information about cardholder acceptance of Celtic [Authorized User Terms](https://stripe.com/docs/issuing/cards#accept-authorized-user-terms). Required for cards backed by a Celtic program.
  */
 user_terms_acceptance?: Schemas.issuing_cardholder_user_terms_acceptance | null
}

/**
 * @title IssuingCardholderCompany
 */
export type issuing_cardholder_company = {
 /**
  * @description Whether the company's business ID number was provided.
  */
 tax_id_provided: boolean
}

/**
 * @title IssuingCardholderIdDocument
 */
export type issuing_cardholder_id_document = {
 /**
  * @description The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
  */
 back?: (string | Schemas.file) | null
 /**
  * @description The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
  */
 front?: (string | Schemas.file) | null
}

/**
 * @title IssuingCardholderIndividual
 */
export type issuing_cardholder_individual = {
 /**
  * @description Information related to the card_issuing program for this cardholder.
  */
 card_issuing?: Schemas.issuing_cardholder_card_issuing | null
 /**
  * @description The date of birth of this cardholder.
  */
 dob?: Schemas.issuing_cardholder_individual_dob | null
 /**
  * @description The first name of this cardholder. Required before activating Cards. This field cannot contain any numbers, special characters (except periods, commas, hyphens, spaces and apostrophes) or non-latin letters.
  */
 first_name?: string | null
 /**
  * @description The last name of this cardholder. Required before activating Cards. This field cannot contain any numbers, special characters (except periods, commas, hyphens, spaces and apostrophes) or non-latin letters.
  */
 last_name?: string | null
 /**
  * @description Government-issued ID document for this cardholder.
  */
 verification?: Schemas.issuing_cardholder_verification | null
}

/**
 * @title IssuingCardholderIndividualDOB
 */
export type issuing_cardholder_individual_dob = {
 /**
  * @description The day of birth, between 1 and 31.
  */
 day?: number | null
 /**
  * @description The month of birth, between 1 and 12.
  */
 month?: number | null
 /**
  * @description The four-digit year of birth.
  */
 year?: number | null
}

/**
 * @title IssuingCardholderRequirements
 */
export type issuing_cardholder_requirements = {
 /**
  * @description If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason.
  */
 disabled_reason?: ('listed' | 'rejected.listed' | 'requirements.past_due' | 'under_review') | null
 /**
  * @description Array of fields that need to be collected in order to verify and re-enable the cardholder.
  */
 past_due?: ('company.tax_id' | 'individual.card_issuing.user_terms_acceptance.date' | 'individual.card_issuing.user_terms_acceptance.ip' | 'individual.dob.day' | 'individual.dob.month' | 'individual.dob.year' | 'individual.first_name' | 'individual.last_name' | 'individual.verification.document')[] | null
}

/**
 * @title IssuingCardholderSpendingLimit
 */
export type issuing_cardholder_spending_limit = {
 /**
  * @description Maximum amount allowed to spend per interval. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 amount: number
 /**
  * @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories.
  */
 categories?: ('ac_refrigeration_repair' | 'accounting_bookkeeping_services' | 'advertising_services' | 'agricultural_cooperative' | 'airlines_air_carriers' | 'airports_flying_fields' | 'ambulance_services' | 'amusement_parks_carnivals' | 'antique_reproductions' | 'antique_shops' | 'aquariums' | 'architectural_surveying_services' | 'art_dealers_and_galleries' | 'artists_supply_and_craft_shops' | 'auto_and_home_supply_stores' | 'auto_body_repair_shops' | 'auto_paint_shops' | 'auto_service_shops' | 'automated_cash_disburse' | 'automated_fuel_dispensers' | 'automobile_associations' | 'automotive_parts_and_accessories_stores' | 'automotive_tire_stores' | 'bail_and_bond_payments' | 'bakeries' | 'bands_orchestras' | 'barber_and_beauty_shops' | 'betting_casino_gambling' | 'bicycle_shops' | 'billiard_pool_establishments' | 'boat_dealers' | 'boat_rentals_and_leases' | 'book_stores' | 'books_periodicals_and_newspapers' | 'bowling_alleys' | 'bus_lines' | 'business_secretarial_schools' | 'buying_shopping_services' | 'cable_satellite_and_other_pay_television_and_radio' | 'camera_and_photographic_supply_stores' | 'candy_nut_and_confectionery_stores' | 'car_and_truck_dealers_new_used' | 'car_and_truck_dealers_used_only' | 'car_rental_agencies' | 'car_washes' | 'carpentry_services' | 'carpet_upholstery_cleaning' | 'caterers' | 'charitable_and_social_service_organizations_fundraising' | 'chemicals_and_allied_products' | 'child_care_services' | 'childrens_and_infants_wear_stores' | 'chiropodists_podiatrists' | 'chiropractors' | 'cigar_stores_and_stands' | 'civic_social_fraternal_associations' | 'cleaning_and_maintenance' | 'clothing_rental' | 'colleges_universities' | 'commercial_equipment' | 'commercial_footwear' | 'commercial_photography_art_and_graphics' | 'commuter_transport_and_ferries' | 'computer_network_services' | 'computer_programming' | 'computer_repair' | 'computer_software_stores' | 'computers_peripherals_and_software' | 'concrete_work_services' | 'construction_materials' | 'consulting_public_relations' | 'correspondence_schools' | 'cosmetic_stores' | 'counseling_services' | 'country_clubs' | 'courier_services' | 'court_costs' | 'credit_reporting_agencies' | 'cruise_lines' | 'dairy_products_stores' | 'dance_hall_studios_schools' | 'dating_escort_services' | 'dentists_orthodontists' | 'department_stores' | 'detective_agencies' | 'digital_goods_applications' | 'digital_goods_games' | 'digital_goods_large_volume' | 'digital_goods_media' | 'direct_marketing_catalog_merchant' | 'direct_marketing_combination_catalog_and_retail_merchant' | 'direct_marketing_inbound_telemarketing' | 'direct_marketing_insurance_services' | 'direct_marketing_other' | 'direct_marketing_outbound_telemarketing' | 'direct_marketing_subscription' | 'direct_marketing_travel' | 'discount_stores' | 'doctors' | 'door_to_door_sales' | 'drapery_window_covering_and_upholstery_stores' | 'drinking_places' | 'drug_stores_and_pharmacies' | 'drugs_drug_proprietaries_and_druggist_sundries' | 'dry_cleaners' | 'durable_goods' | 'duty_free_stores' | 'eating_places_restaurants' | 'educational_services' | 'electric_razor_stores' | 'electric_vehicle_charging' | 'electrical_parts_and_equipment' | 'electrical_services' | 'electronics_repair_shops' | 'electronics_stores' | 'elementary_secondary_schools' | 'emergency_services_gcas_visa_use_only' | 'employment_temp_agencies' | 'equipment_rental' | 'exterminating_services' | 'family_clothing_stores' | 'fast_food_restaurants' | 'financial_institutions' | 'fines_government_administrative_entities' | 'fireplace_fireplace_screens_and_accessories_stores' | 'floor_covering_stores' | 'florists' | 'florists_supplies_nursery_stock_and_flowers' | 'freezer_and_locker_meat_provisioners' | 'fuel_dealers_non_automotive' | 'funeral_services_crematories' | 'furniture_home_furnishings_and_equipment_stores_except_appliances' | 'furniture_repair_refinishing' | 'furriers_and_fur_shops' | 'general_services' | 'gift_card_novelty_and_souvenir_shops' | 'glass_paint_and_wallpaper_stores' | 'glassware_crystal_stores' | 'golf_courses_public' | 'government_licensed_horse_dog_racing_us_region_only' | 'government_licensed_online_casions_online_gambling_us_region_only' | 'government_owned_lotteries_non_us_region' | 'government_owned_lotteries_us_region_only' | 'government_services' | 'grocery_stores_supermarkets' | 'hardware_equipment_and_supplies' | 'hardware_stores' | 'health_and_beauty_spas' | 'hearing_aids_sales_and_supplies' | 'heating_plumbing_a_c' | 'hobby_toy_and_game_shops' | 'home_supply_warehouse_stores' | 'hospitals' | 'hotels_motels_and_resorts' | 'household_appliance_stores' | 'industrial_supplies' | 'information_retrieval_services' | 'insurance_default' | 'insurance_underwriting_premiums' | 'intra_company_purchases' | 'jewelry_stores_watches_clocks_and_silverware_stores' | 'landscaping_services' | 'laundries' | 'laundry_cleaning_services' | 'legal_services_attorneys' | 'luggage_and_leather_goods_stores' | 'lumber_building_materials_stores' | 'manual_cash_disburse' | 'marinas_service_and_supplies' | 'marketplaces' | 'masonry_stonework_and_plaster' | 'massage_parlors' | 'medical_and_dental_labs' | 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies' | 'medical_services' | 'membership_organizations' | 'mens_and_boys_clothing_and_accessories_stores' | 'mens_womens_clothing_stores' | 'metal_service_centers' | 'miscellaneous' | 'miscellaneous_apparel_and_accessory_shops' | 'miscellaneous_auto_dealers' | 'miscellaneous_business_services' | 'miscellaneous_food_stores' | 'miscellaneous_general_merchandise' | 'miscellaneous_general_services' | 'miscellaneous_home_furnishing_specialty_stores' | 'miscellaneous_publishing_and_printing' | 'miscellaneous_recreation_services' | 'miscellaneous_repair_shops' | 'miscellaneous_specialty_retail' | 'mobile_home_dealers' | 'motion_picture_theaters' | 'motor_freight_carriers_and_trucking' | 'motor_homes_dealers' | 'motor_vehicle_supplies_and_new_parts' | 'motorcycle_shops_and_dealers' | 'motorcycle_shops_dealers' | 'music_stores_musical_instruments_pianos_and_sheet_music' | 'news_dealers_and_newsstands' | 'non_fi_money_orders' | 'non_fi_stored_value_card_purchase_load' | 'nondurable_goods' | 'nurseries_lawn_and_garden_supply_stores' | 'nursing_personal_care' | 'office_and_commercial_furniture' | 'opticians_eyeglasses' | 'optometrists_ophthalmologist' | 'orthopedic_goods_prosthetic_devices' | 'osteopaths' | 'package_stores_beer_wine_and_liquor' | 'paints_varnishes_and_supplies' | 'parking_lots_garages' | 'passenger_railways' | 'pawn_shops' | 'pet_shops_pet_food_and_supplies' | 'petroleum_and_petroleum_products' | 'photo_developing' | 'photographic_photocopy_microfilm_equipment_and_supplies' | 'photographic_studios' | 'picture_video_production' | 'piece_goods_notions_and_other_dry_goods' | 'plumbing_heating_equipment_and_supplies' | 'political_organizations' | 'postal_services_government_only' | 'precious_stones_and_metals_watches_and_jewelry' | 'professional_services' | 'public_warehousing_and_storage' | 'quick_copy_repro_and_blueprint' | 'railroads' | 'real_estate_agents_and_managers_rentals' | 'record_stores' | 'recreational_vehicle_rentals' | 'religious_goods_stores' | 'religious_organizations' | 'roofing_siding_sheet_metal' | 'secretarial_support_services' | 'security_brokers_dealers' | 'service_stations' | 'sewing_needlework_fabric_and_piece_goods_stores' | 'shoe_repair_hat_cleaning' | 'shoe_stores' | 'small_appliance_repair' | 'snowmobile_dealers' | 'special_trade_services' | 'specialty_cleaning' | 'sporting_goods_stores' | 'sporting_recreation_camps' | 'sports_and_riding_apparel_stores' | 'sports_clubs_fields' | 'stamp_and_coin_stores' | 'stationary_office_supplies_printing_and_writing_paper' | 'stationery_stores_office_and_school_supply_stores' | 'swimming_pools_sales' | 't_ui_travel_germany' | 'tailors_alterations' | 'tax_payments_government_agencies' | 'tax_preparation_services' | 'taxicabs_limousines' | 'telecommunication_equipment_and_telephone_sales' | 'telecommunication_services' | 'telegraph_services' | 'tent_and_awning_shops' | 'testing_laboratories' | 'theatrical_ticket_agencies' | 'timeshares' | 'tire_retreading_and_repair' | 'tolls_bridge_fees' | 'tourist_attractions_and_exhibits' | 'towing_services' | 'trailer_parks_campgrounds' | 'transportation_services' | 'travel_agencies_tour_operators' | 'truck_stop_iteration' | 'truck_utility_trailer_rentals' | 'typesetting_plate_making_and_related_services' | 'typewriter_stores' | 'u_s_federal_government_agencies_or_departments' | 'uniforms_commercial_clothing' | 'used_merchandise_and_secondhand_stores' | 'utilities' | 'variety_stores' | 'veterinary_services' | 'video_amusement_game_supplies' | 'video_game_arcades' | 'video_tape_rental_stores' | 'vocational_trade_schools' | 'watch_jewelry_repair' | 'welding_repair' | 'wholesale_clubs' | 'wig_and_toupee_stores' | 'wires_money_orders' | 'womens_accessory_and_specialty_shops' | 'womens_ready_to_wear_stores' | 'wrecking_and_salvage_yards')[] | null
 /**
  * @description Interval (or event) to which the amount applies.
  */
 interval: ('all_time' | 'daily' | 'monthly' | 'per_authorization' | 'weekly' | 'yearly')
}

/**
 * @title IssuingCardholderUserTermsAcceptance
 */
export type issuing_cardholder_user_terms_acceptance = {
 /**
  * @description The Unix timestamp marking when the cardholder accepted the Authorized User Terms.
  */
 date?: number | null
 /**
  * @description The IP address from which the cardholder accepted the Authorized User Terms.
  */
 ip?: string | null
 /**
  * @description The user agent of the browser from which the cardholder accepted the Authorized User Terms.
  */
 user_agent?: string | null
}

/**
 * @title IssuingCardholderVerification
 */
export type issuing_cardholder_verification = {
 /**
  * @description An identifying document, either a passport or local ID card.
  */
 document?: Schemas.issuing_cardholder_id_document | null
}

/**
 * @title IssuingDisputeCanceledEvidence
 */
export type issuing_dispute_canceled_evidence = {
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
  */
 additional_documentation?: (string | Schemas.file) | null
 /**
  * @description Date when order was canceled.
  */
 canceled_at?: number | null
 /**
  * @description Whether the cardholder was provided with a cancellation policy.
  */
 cancellation_policy_provided?: boolean | null
 /**
  * @description Reason for canceling the order.
  */
 cancellation_reason?: string | null
 /**
  * @description Date when the cardholder expected to receive the product.
  */
 expected_at?: number | null
 /**
  * @description Explanation of why the cardholder is disputing this transaction.
  */
 explanation?: string | null
 /**
  * @description Description of the merchandise or service that was purchased.
  */
 product_description?: string | null
 /**
  * @description Whether the product was a merchandise or service.
  */
 product_type?: ('merchandise' | 'service') | null
 /**
  * @description Result of cardholder's attempt to return the product.
  */
 return_status?: ('merchant_rejected' | 'successful') | null
 /**
  * @description Date when the product was returned or attempted to be returned.
  */
 returned_at?: number | null
}

/**
 * @title IssuingDisputeDuplicateEvidence
 */
export type issuing_dispute_duplicate_evidence = {
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
  */
 additional_documentation?: (string | Schemas.file) | null
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the card statement showing that the product had already been paid for.
  */
 card_statement?: (string | Schemas.file) | null
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the receipt showing that the product had been paid for in cash.
  */
 cash_receipt?: (string | Schemas.file) | null
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Image of the front and back of the check that was used to pay for the product.
  */
 check_image?: (string | Schemas.file) | null
 /**
  * @description Explanation of why the cardholder is disputing this transaction.
  */
 explanation?: string | null
 /**
  * @description Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one.
  */
 original_transaction?: string | null
}

/**
 * @title IssuingDisputeEvidence
 */
export type issuing_dispute_evidence = {
 /**
  * @title IssuingDisputeCanceledEvidence
  */
 canceled?: Schemas.issuing_dispute_canceled_evidence
 /**
  * @title IssuingDisputeDuplicateEvidence
  */
 duplicate?: Schemas.issuing_dispute_duplicate_evidence
 /**
  * @title IssuingDisputeFraudulentEvidence
  */
 fraudulent?: Schemas.issuing_dispute_fraudulent_evidence
 /**
  * @title IssuingDisputeMerchandiseNotAsDescribedEvidence
  */
 merchandise_not_as_described?: Schemas.issuing_dispute_merchandise_not_as_described_evidence
 /**
  * @title IssuingDisputeNoValidAuthorizationEvidence
  */
 no_valid_authorization?: Schemas.issuing_dispute_no_valid_authorization_evidence
 /**
  * @title IssuingDisputeNotReceivedEvidence
  */
 not_received?: Schemas.issuing_dispute_not_received_evidence
 /**
  * @title IssuingDisputeOtherEvidence
  */
 other?: Schemas.issuing_dispute_other_evidence
 /**
  * @description The reason for filing the dispute. Its value will match the field containing the evidence.
  */
 reason: ('canceled' | 'duplicate' | 'fraudulent' | 'merchandise_not_as_described' | 'no_valid_authorization' | 'not_received' | 'other' | 'service_not_as_described')
 /**
  * @title IssuingDisputeServiceNotAsDescribedEvidence
  */
 service_not_as_described?: Schemas.issuing_dispute_service_not_as_described_evidence
}

/**
 * @title IssuingDisputeFraudulentEvidence
 */
export type issuing_dispute_fraudulent_evidence = {
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
  */
 additional_documentation?: (string | Schemas.file) | null
 /**
  * @description Explanation of why the cardholder is disputing this transaction.
  */
 explanation?: string | null
}

/**
 * @title IssuingDisputeMerchandiseNotAsDescribedEvidence
 */
export type issuing_dispute_merchandise_not_as_described_evidence = {
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
  */
 additional_documentation?: (string | Schemas.file) | null
 /**
  * @description Explanation of why the cardholder is disputing this transaction.
  */
 explanation?: string | null
 /**
  * @description Date when the product was received.
  */
 received_at?: number | null
 /**
  * @description Description of the cardholder's attempt to return the product.
  */
 return_description?: string | null
 /**
  * @description Result of cardholder's attempt to return the product.
  */
 return_status?: ('merchant_rejected' | 'successful') | null
 /**
  * @description Date when the product was returned or attempted to be returned.
  */
 returned_at?: number | null
}

/**
 * @title IssuingDisputeNoValidAuthorizationEvidence
 */
export type issuing_dispute_no_valid_authorization_evidence = {
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
  */
 additional_documentation?: (string | Schemas.file) | null
 /**
  * @description Explanation of why the cardholder is disputing this transaction.
  */
 explanation?: string | null
}

/**
 * @title IssuingDisputeNotReceivedEvidence
 */
export type issuing_dispute_not_received_evidence = {
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
  */
 additional_documentation?: (string | Schemas.file) | null
 /**
  * @description Date when the cardholder expected to receive the product.
  */
 expected_at?: number | null
 /**
  * @description Explanation of why the cardholder is disputing this transaction.
  */
 explanation?: string | null
 /**
  * @description Description of the merchandise or service that was purchased.
  */
 product_description?: string | null
 /**
  * @description Whether the product was a merchandise or service.
  */
 product_type?: ('merchandise' | 'service') | null
}

/**
 * @title IssuingDisputeOtherEvidence
 */
export type issuing_dispute_other_evidence = {
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
  */
 additional_documentation?: (string | Schemas.file) | null
 /**
  * @description Explanation of why the cardholder is disputing this transaction.
  */
 explanation?: string | null
 /**
  * @description Description of the merchandise or service that was purchased.
  */
 product_description?: string | null
 /**
  * @description Whether the product was a merchandise or service.
  */
 product_type?: ('merchandise' | 'service') | null
}

/**
 * @title IssuingDisputeServiceNotAsDescribedEvidence
 */
export type issuing_dispute_service_not_as_described_evidence = {
 /**
  * @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
  */
 additional_documentation?: (string | Schemas.file) | null
 /**
  * @description Date when order was canceled.
  */
 canceled_at?: number | null
 /**
  * @description Reason for canceling the order.
  */
 cancellation_reason?: string | null
 /**
  * @description Explanation of why the cardholder is disputing this transaction.
  */
 explanation?: string | null
 /**
  * @description Date when the product was received.
  */
 received_at?: number | null
}

/**
 * @title IssuingDisputeTreasury
 */
export type issuing_dispute_treasury = {
 /**
  * @description The Treasury [DebitReversal](https://stripe.com/docs/api/treasury/debit_reversals) representing this Issuing dispute
  */
 debit_reversal?: string | null
 /**
  * @description The Treasury [ReceivedDebit](https://stripe.com/docs/api/treasury/received_debits) that is being disputed.
  */
 received_debit: string
}

/**
 * @title IssuingNetworkTokenAddress
 */
export type issuing_network_token_address = {
 /**
  * @description The street address of the cardholder tokenizing the card.
  */
 line1: string
 /**
  * @description The postal code of the cardholder tokenizing the card.
  */
 postal_code: string
}

/**
 * @title IssuingNetworkTokenDevice
 */
export type issuing_network_token_device = {
 /**
  * @description An obfuscated ID derived from the device ID.
  */
 device_fingerprint?: string
 /**
  * @description The IP address of the device at provisioning time.
  */
 ip_address?: string
 /**
  * @description The geographic latitude/longitude coordinates of the device at provisioning time. The format is [+-]decimal/[+-]decimal.
  */
 location?: string
 /**
  * @description The name of the device used for tokenization.
  */
 name?: string
 /**
  * @description The phone number of the device used for tokenization.
  */
 phone_number?: string
 /**
  * @description The type of device used for tokenization.
  */
 type?: ('other' | 'phone' | 'watch')
}

/**
 * @title IssuingNetworkTokenMastercard
 */
export type issuing_network_token_mastercard = {
 /**
  * @description A unique reference ID from MasterCard to represent the card account number.
  */
 card_reference_id?: string
 /**
  * @description The network-unique identifier for the token.
  */
 token_reference_id: string
 /**
  * @description The ID of the entity requesting tokenization, specific to MasterCard.
  */
 token_requestor_id: string
 /**
  * @description The name of the entity requesting tokenization, if known. This is directly provided from MasterCard.
  */
 token_requestor_name?: string
}

/**
 * @title IssuingNetworkTokenNetworkData
 */
export type issuing_network_token_network_data = {
 /**
  * @title IssuingNetworkTokenDevice
  */
 device?: Schemas.issuing_network_token_device
 /**
  * @title IssuingNetworkTokenMastercard
  */
 mastercard?: Schemas.issuing_network_token_mastercard
 /**
  * @description The network that the token is associated with. An additional hash is included with a name matching this value, containing tokenization data specific to the card network.
  */
 type: ('mastercard' | 'visa')
 /**
  * @title IssuingNetworkTokenVisa
  */
 visa?: Schemas.issuing_network_token_visa
 /**
  * @title IssuingNetworkTokenWalletProvider
  */
 wallet_provider?: Schemas.issuing_network_token_wallet_provider
}

/**
 * @title IssuingNetworkTokenVisa
 */
export type issuing_network_token_visa = {
 /**
  * @description A unique reference ID from Visa to represent the card account number.
  */
 card_reference_id: string
 /**
  * @description The network-unique identifier for the token.
  */
 token_reference_id: string
 /**
  * @description The ID of the entity requesting tokenization, specific to Visa.
  */
 token_requestor_id: string
 /**
  * @description Degree of risk associated with the token between `01` and `99`, with higher number indicating higher risk. A `00` value indicates the token was not scored by Visa.
  */
 token_risk_score?: string
}

/**
 * @title IssuingNetworkTokenWalletProvider
 */
export type issuing_network_token_wallet_provider = {
 /**
  * @description The wallet provider-given account ID of the digital wallet the token belongs to.
  */
 account_id?: string
 /**
  * @description An evaluation on the trustworthiness of the wallet account between 1 and 5. A higher score indicates more trustworthy.
  */
 account_trust_score?: number
 /**
  * @description The method used for tokenizing a card.
  */
 card_number_source?: ('app' | 'manual' | 'on_file' | 'other')
 /**
  * @title IssuingNetworkTokenAddress
  */
 cardholder_address?: Schemas.issuing_network_token_address
 /**
  * @description The name of the cardholder tokenizing the card.
  */
 cardholder_name?: string
 /**
  * @description An evaluation on the trustworthiness of the device. A higher score indicates more trustworthy.
  */
 device_trust_score?: number
 /**
  * @description The hashed email address of the cardholder's account with the wallet provider.
  */
 hashed_account_email_address?: string
 /**
  * @description The reasons for suggested tokenization given by the card network.
  */
 reason_codes?: ('account_card_too_new' | 'account_recently_changed' | 'account_too_new' | 'account_too_new_since_launch' | 'additional_device' | 'data_expired' | 'defer_id_v_decision' | 'device_recently_lost' | 'good_activity_history' | 'has_suspended_tokens' | 'high_risk' | 'inactive_account' | 'long_account_tenure' | 'low_account_score' | 'low_device_score' | 'low_phone_number_score' | 'network_service_error' | 'outside_home_territory' | 'provisioning_cardholder_mismatch' | 'provisioning_device_and_cardholder_mismatch' | 'provisioning_device_mismatch' | 'same_device_no_prior_authentication' | 'same_device_successful_prior_authentication' | 'software_update' | 'suspicious_activity' | 'too_many_different_cardholders' | 'too_many_recent_attempts' | 'too_many_recent_tokens')[]
 /**
  * @description The recommendation on responding to the tokenization request.
  */
 suggested_decision?: ('approve' | 'decline' | 'require_auth')
 /**
  * @description The version of the standard for mapping reason codes followed by the wallet provider.
  */
 suggested_decision_version?: string
}

/**
 * @title IssuingPersonalizationDesignCarrierText
 */
export type issuing_personalization_design_carrier_text = {
 /**
  * @description The footer body text of the carrier letter.
  */
 footer_body?: string | null
 /**
  * @description The footer title text of the carrier letter.
  */
 footer_title?: string | null
 /**
  * @description The header body text of the carrier letter.
  */
 header_body?: string | null
 /**
  * @description The header title text of the carrier letter.
  */
 header_title?: string | null
}

/**
 * @title IssuingPersonalizationDesignPreferences
 */
export type issuing_personalization_design_preferences = {
 /**
  * @description Whether we use this personalization design to create cards when one isn't specified. A connected account uses the Connect platform's default design if no personalization design is set as the default design.
  */
 is_default: boolean
 /**
  * @description Whether this personalization design is used to create cards when one is not specified and a default for this connected account does not exist.
  */
 is_platform_default?: boolean | null
}

/**
 * @title IssuingPersonalizationDesignRejectionReasons
 */
export type issuing_personalization_design_rejection_reasons = {
 /**
  * @description The reason(s) the card logo was rejected.
  */
 card_logo?: ('geographic_location' | 'inappropriate' | 'network_name' | 'non_binary_image' | 'non_fiat_currency' | 'other' | 'other_entity' | 'promotional_material')[] | null
 /**
  * @description The reason(s) the carrier text was rejected.
  */
 carrier_text?: ('geographic_location' | 'inappropriate' | 'network_name' | 'non_fiat_currency' | 'other' | 'other_entity' | 'promotional_material')[] | null
}

/**
 * @title IssuingPhysicalBundleFeatures
 */
export type issuing_physical_bundle_features = {
 /**
  * @description The policy for how to use card logo images in a card design with this physical bundle.
  */
 card_logo: ('optional' | 'required' | 'unsupported')
 /**
  * @description The policy for how to use carrier letter text in a card design with this physical bundle.
  */
 carrier_text: ('optional' | 'required' | 'unsupported')
 /**
  * @description The policy for how to use a second line on a card with this physical bundle.
  */
 second_line: ('optional' | 'required' | 'unsupported')
}

/**
 * @title IssuingTransactionAmountDetails
 */
export type issuing_transaction_amount_details = {
 /**
  * @description The fee charged by the ATM for the cash withdrawal.
  */
 atm_fee?: number | null
 /**
  * @description The amount of cash requested by the cardholder.
  */
 cashback_amount?: number | null
}

/**
 * @title IssuingTransactionFleetCardholderPromptData
 */
export type issuing_transaction_fleet_cardholder_prompt_data = {
 /**
  * @description Driver ID.
  */
 driver_id?: string | null
 /**
  * @description Odometer reading.
  */
 odometer?: number | null
 /**
  * @description An alphanumeric ID. This field is used when a vehicle ID, driver ID, or generic ID is entered by the cardholder, but the merchant or card network did not specify the prompt type.
  */
 unspecified_id?: string | null
 /**
  * @description User ID.
  */
 user_id?: string | null
 /**
  * @description Vehicle number.
  */
 vehicle_number?: string | null
}

/**
 * @title IssuingTransactionFleetData
 */
export type issuing_transaction_fleet_data = {
 /**
  * @description Answers to prompts presented to cardholder at point of sale.
  */
 cardholder_prompt_data?: Schemas.issuing_transaction_fleet_cardholder_prompt_data | null
 /**
  * @description The type of purchase. One of `fuel_purchase`, `non_fuel_purchase`, or `fuel_and_non_fuel_purchase`.
  */
 purchase_type?: string | null
 /**
  * @description More information about the total amount. This information is not guaranteed to be accurate as some merchants may provide unreliable data.
  */
 reported_breakdown?: Schemas.issuing_transaction_fleet_reported_breakdown | null
 /**
  * @description The type of fuel service. One of `non_fuel_transaction`, `full_service`, or `self_service`.
  */
 service_type?: string | null
}

/**
 * @title IssuingTransactionFleetFuelPriceData
 */
export type issuing_transaction_fleet_fuel_price_data = {
 /**
  * @description Gross fuel amount that should equal Fuel Volume multipled by Fuel Unit Cost, inclusive of taxes.
  */
 gross_amount_decimal?: string | null
}

/**
 * @title IssuingTransactionFleetNonFuelPriceData
 */
export type issuing_transaction_fleet_non_fuel_price_data = {
 /**
  * @description Gross non-fuel amount that should equal the sum of the line items, inclusive of taxes.
  */
 gross_amount_decimal?: string | null
}

/**
 * @title IssuingTransactionFleetReportedBreakdown
 */
export type issuing_transaction_fleet_reported_breakdown = {
 /**
  * @description Breakdown of fuel portion of the purchase.
  */
 fuel?: Schemas.issuing_transaction_fleet_fuel_price_data | null
 /**
  * @description Breakdown of non-fuel portion of the purchase.
  */
 non_fuel?: Schemas.issuing_transaction_fleet_non_fuel_price_data | null
 /**
  * @description Information about tax included in this transaction.
  */
 tax?: Schemas.issuing_transaction_fleet_tax_data | null
}

/**
 * @title IssuingTransactionFleetTaxData
 */
export type issuing_transaction_fleet_tax_data = {
 /**
  * @description Amount of state or provincial Sales Tax included in the transaction amount. Null if not reported by merchant or not subject to tax.
  */
 local_amount_decimal?: string | null
 /**
  * @description Amount of national Sales Tax or VAT included in the transaction amount. Null if not reported by merchant or not subject to tax.
  */
 national_amount_decimal?: string | null
}

/**
 * @title IssuingTransactionFlightData
 */
export type issuing_transaction_flight_data = {
 /**
  * @description The time that the flight departed.
  */
 departure_at?: number | null
 /**
  * @description The name of the passenger.
  */
 passenger_name?: string | null
 /**
  * @description Whether the ticket is refundable.
  */
 refundable?: boolean | null
 /**
  * @description The legs of the trip.
  */
 segments?: Schemas.issuing_transaction_flight_data_leg[] | null
 /**
  * @description The travel agency that issued the ticket.
  */
 travel_agency?: string | null
}

/**
 * @title IssuingTransactionFlightDataLeg
 */
export type issuing_transaction_flight_data_leg = {
 /**
  * @description The three-letter IATA airport code of the flight's destination.
  */
 arrival_airport_code?: string | null
 /**
  * @description The airline carrier code.
  */
 carrier?: string | null
 /**
  * @description The three-letter IATA airport code that the flight departed from.
  */
 departure_airport_code?: string | null
 /**
  * @description The flight number.
  */
 flight_number?: string | null
 /**
  * @description The flight's service class.
  */
 service_class?: string | null
 /**
  * @description Whether a stopover is allowed on this flight.
  */
 stopover_allowed?: boolean | null
}

/**
 * @title IssuingTransactionFuelData
 */
export type issuing_transaction_fuel_data = {
 /**
  * @description [Conexxus Payment System Product Code](https://www.conexxus.org/conexxus-payment-system-product-codes) identifying the primary fuel product purchased.
  */
 industry_product_code?: string | null
 /**
  * @description The quantity of `unit`s of fuel that was dispensed, represented as a decimal string with at most 12 decimal places.
  */
 quantity_decimal?: string | null
 /**
  * @description The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`.
  */
 type: string
 /**
  * @description The units for `quantity_decimal`. One of `charging_minute`, `imperial_gallon`, `kilogram`, `kilowatt_hour`, `liter`, `pound`, `us_gallon`, or `other`.
  */
 unit: string
 /**
  * @description The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.
  */
 unit_cost_decimal: string
}

/**
 * @title IssuingTransactionLodgingData
 */
export type issuing_transaction_lodging_data = {
 /**
  * @description The time of checking into the lodging.
  */
 check_in_at?: number | null
 /**
  * @description The number of nights stayed at the lodging.
  */
 nights?: number | null
}

/**
 * @title IssuingTransactionNetworkData
 */
export type issuing_transaction_network_data = {
 /**
  * @description A code created by Stripe which is shared with the merchant to validate the authorization. This field will be populated if the authorization message was approved. The code typically starts with the letter "S", followed by a six-digit number. For example, "S498162". Please note that the code is not guaranteed to be unique across authorizations.
  */
 authorization_code?: string | null
 /**
  * @description The date the transaction was processed by the card network. This can be different from the date the seller recorded the transaction depending on when the acquirer submits the transaction to the network.
  */
 processing_date?: string | null
 /**
  * @description Unique identifier for the authorization assigned by the card network used to match subsequent messages, disputes, and transactions.
  */
 transaction_id?: string | null
}

/**
 * @title IssuingTransactionPurchaseDetails
 */
export type issuing_transaction_purchase_details = {
 /**
  * @description Fleet-specific information for transactions using Fleet cards.
  */
 fleet?: Schemas.issuing_transaction_fleet_data | null
 /**
  * @description Information about the flight that was purchased with this transaction.
  */
 flight?: Schemas.issuing_transaction_flight_data | null
 /**
  * @description Information about fuel that was purchased with this transaction.
  */
 fuel?: Schemas.issuing_transaction_fuel_data | null
 /**
  * @description Information about lodging that was purchased with this transaction.
  */
 lodging?: Schemas.issuing_transaction_lodging_data | null
 /**
  * @description The line items in the purchase.
  */
 receipt?: Schemas.issuing_transaction_receipt_data[] | null
 /**
  * @description A merchant-specific order number.
  */
 reference?: string | null
}

/**
 * @title IssuingTransactionReceiptData
 */
export type issuing_transaction_receipt_data = {
 /**
  * @description The description of the item. The maximum length of this field is 26 characters.
  */
 description?: string | null
 /**
  * @description The quantity of the item.
  */
 quantity?: number | null
 /**
  * @description The total for this line item in cents.
  */
 total?: number | null
 /**
  * @description The unit cost of the item in cents.
  */
 unit_cost?: number | null
}

/**
 * @title IssuingTransactionTreasury
 */
export type issuing_transaction_treasury = {
 /**
  * @description The Treasury [ReceivedCredit](https://stripe.com/docs/api/treasury/received_credits) representing this Issuing transaction if it is a refund
  */
 received_credit?: string | null
 /**
  * @description The Treasury [ReceivedDebit](https://stripe.com/docs/api/treasury/received_debits) representing this Issuing transaction if it is a capture
  */
 received_debit?: string | null
}

/**
 * @title LineItem
 * @description A line item.
 */
export type item = {
 /**
  * @description Total discount amount applied. If no discounts were applied, defaults to 0.
  */
 amount_discount: number
 /**
  * @description Total before any discounts or taxes are applied.
  */
 amount_subtotal: number
 /**
  * @description Total tax amount applied. If no tax was applied, defaults to 0.
  */
 amount_tax: number
 /**
  * @description Total after discounts and taxes.
  */
 amount_total: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name.
  */
 description?: string | null
 /**
  * @description The discounts applied to the line item.
  */
 discounts?: Schemas.line_items_discount_amount[]
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'item'
 /**
  * @description The price used to generate the line item.
  */
 price?: Schemas.price | null
 /**
  * @description The quantity of products being purchased.
  */
 quantity?: number | null
 /**
  * @description The taxes applied to the line item.
  */
 taxes?: Schemas.line_items_tax_amount[]
}

/**
 * @title klarna_address
 */
export type klarna_address = {
 /**
  * @description The payer address country
  */
 country?: string | null
}

/**
 * @title klarna_payer_details
 */
export type klarna_payer_details = {
 /**
  * @description The payer's address
  */
 address?: Schemas.klarna_address | null
}

/**
 * @title LegalEntityCompany
 */
export type legal_entity_company = {
 /**
  * @title Address
  */
 address?: Schemas.address
 /**
  * @description The Kana variation of the company's primary address (Japan only).
  */
 address_kana?: Schemas.legal_entity_japan_address | null
 /**
  * @description The Kanji variation of the company's primary address (Japan only).
  */
 address_kanji?: Schemas.legal_entity_japan_address | null
 /**
  * @description Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided).
  */
 directors_provided?: boolean
 /**
  * @description This hash is used to attest that the director information provided to Stripe is both current and correct.
  */
 directorship_declaration?: Schemas.legal_entity_directorship_declaration | null
 /**
  * @description Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided.
  */
 executives_provided?: boolean
 /**
  * @description The export license ID number of the company, also referred as Import Export Code (India only).
  */
 export_license_id?: string
 /**
  * @description The purpose code to use for export transactions (India only).
  */
 export_purpose_code?: string
 /**
  * @description The company's legal name. Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
  */
 name?: string | null
 /**
  * @description The Kana variation of the company's legal name (Japan only). Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
  */
 name_kana?: string | null
 /**
  * @description The Kanji variation of the company's legal name (Japan only). Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
  */
 name_kanji?: string | null
 /**
  * @description Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together).
  */
 owners_provided?: boolean
 /**
  * @description This hash is used to attest that the beneficial owner information provided to Stripe is both current and correct.
  */
 ownership_declaration?: Schemas.legal_entity_ubo_declaration | null
 /**
  * @description This value is used to determine if a business is exempt from providing ultimate beneficial owners. See [this support article](https://support.stripe.com/questions/exemption-from-providing-ownership-details) and [changelog](https://docs.stripe.com/changelog/acacia/2025-01-27/ownership-exemption-reason-accounts-api) for more details.
  */
 ownership_exemption_reason?: ('qualified_entity_exceeds_ownership_threshold' | 'qualifies_as_financial_institution')
 /**
  * @description The company's phone number (used for verification).
  */
 phone?: string | null
 /**
  * @title LegalEntityRegistrationDate
  */
 registration_date?: Schemas.legal_entity_registration_date
 /**
  * @description The category identifying the legal structure of the company or legal entity. Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details.
  */
 structure?: ('free_zone_establishment' | 'free_zone_llc' | 'government_instrumentality' | 'governmental_unit' | 'incorporated_non_profit' | 'incorporated_partnership' | 'limited_liability_partnership' | 'llc' | 'multi_member_llc' | 'private_company' | 'private_corporation' | 'private_partnership' | 'public_company' | 'public_corporation' | 'public_partnership' | 'registered_charity' | 'single_member_llc' | 'sole_establishment' | 'sole_proprietorship' | 'tax_exempt_government_instrumentality' | 'unincorporated_association' | 'unincorporated_non_profit' | 'unincorporated_partnership')
 /**
  * @description Whether the company's business ID number was provided.
  */
 tax_id_provided?: boolean
 /**
  * @description The jurisdiction in which the `tax_id` is registered (Germany-based companies only).
  */
 tax_id_registrar?: string
 /**
  * @description Whether the company's business VAT number was provided.
  */
 vat_id_provided?: boolean
 /**
  * @description Information on the verification state of the company.
  */
 verification?: Schemas.legal_entity_company_verification | null
}

/**
 * @title LegalEntityCompanyVerification
 */
export type legal_entity_company_verification = {
 /**
  * @title LegalEntityCompanyVerificationDocument
  */
 document: Schemas.legal_entity_company_verification_document
}

/**
 * @title LegalEntityCompanyVerificationDocument
 */
export type legal_entity_company_verification_document = {
 /**
  * @description The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`. Note that `additional_verification` files are [not downloadable](/file-upload#uploading-a-file).
  */
 back?: (string | Schemas.file) | null
 /**
  * @description A user-displayable string describing the verification state of this document.
  */
 details?: string | null
 /**
  * @description One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document.
  */
 details_code?: string | null
 /**
  * @description The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`. Note that `additional_verification` files are [not downloadable](/file-upload#uploading-a-file).
  */
 front?: (string | Schemas.file) | null
}

/**
 * @title LegalEntityDirectorshipDeclaration
 */
export type legal_entity_directorship_declaration = {
 /**
  * @description The Unix timestamp marking when the directorship declaration attestation was made.
  */
 date?: number | null
 /**
  * @description The IP address from which the directorship declaration attestation was made.
  */
 ip?: string | null
 /**
  * @description The user-agent string from the browser where the directorship declaration attestation was made.
  */
 user_agent?: string | null
}

/**
 * @title LegalEntityDOB
 */
export type legal_entity_dob = {
 /**
  * @description The day of birth, between 1 and 31.
  */
 day?: number | null
 /**
  * @description The month of birth, between 1 and 12.
  */
 month?: number | null
 /**
  * @description The four-digit year of birth.
  */
 year?: number | null
}

/**
 * @title LegalEntityJapanAddress
 */
export type legal_entity_japan_address = {
 /**
  * @description City/Ward.
  */
 city?: string | null
 /**
  * @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  */
 country?: string | null
 /**
  * @description Block/Building number.
  */
 line1?: string | null
 /**
  * @description Building details.
  */
 line2?: string | null
 /**
  * @description ZIP or postal code.
  */
 postal_code?: string | null
 /**
  * @description Prefecture.
  */
 state?: string | null
 /**
  * @description Town/cho-me.
  */
 town?: string | null
}

/**
 * @title LegalEntityPersonVerification
 */
export type legal_entity_person_verification = {
 /**
  * @description A document showing address, either a passport, local ID card, or utility bill from a well-known utility company.
  */
 additional_document?: Schemas.legal_entity_person_verification_document | null
 /**
  * @description A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified".
  */
 details?: string | null
 /**
  * @description One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person.
  */
 details_code?: string | null
 /**
  * @title LegalEntityPersonVerificationDocument
  */
 document?: Schemas.legal_entity_person_verification_document
 /**
  * @description The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`. Please refer [guide](https://stripe.com/docs/connect/handling-api-verification) to handle verification updates.
  */
 status: string
}

/**
 * @title LegalEntityPersonVerificationDocument
 */
export type legal_entity_person_verification_document = {
 /**
  * @description The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
  */
 back?: (string | Schemas.file) | null
 /**
  * @description A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read".
  */
 details?: string | null
 /**
  * @description One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document.
  */
 details_code?: string | null
 /**
  * @description The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
  */
 front?: (string | Schemas.file) | null
}

/**
 * @title LegalEntityRegistrationDate
 */
export type legal_entity_registration_date = {
 /**
  * @description The day of registration, between 1 and 31.
  */
 day?: number | null
 /**
  * @description The month of registration, between 1 and 12.
  */
 month?: number | null
 /**
  * @description The four-digit year of registration.
  */
 year?: number | null
}

/**
 * @title LegalEntityUBODeclaration
 */
export type legal_entity_ubo_declaration = {
 /**
  * @description The Unix timestamp marking when the beneficial owner attestation was made.
  */
 date?: number | null
 /**
  * @description The IP address from which the beneficial owner attestation was made.
  */
 ip?: string | null
 /**
  * @description The user-agent string from the browser where the beneficial owner attestation was made.
  */
 user_agent?: string | null
}

/**
 * @title InvoiceLineItem
 * @description Invoice Line Items represent the individual lines within an [invoice](https://stripe.com/docs/api/invoices) and only exist within the context of an invoice.
 * 
 * Each line item is backed by either an [invoice item](https://stripe.com/docs/api/invoiceitems) or a [subscription item](https://stripe.com/docs/api/subscription_items).
 */
export type line_item = {
 /**
  * @description The amount, in cents (or local equivalent).
  */
 amount: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description?: string | null
 /**
  * @description The amount of discount calculated per discount for this line item.
  */
 discount_amounts?: Schemas.discounts_resource_discount_amount[] | null
 /**
  * @description If true, discounts will apply to this line item. Always false for prorations.
  */
 discountable: boolean
 /**
  * @description The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
  */
 discounts: (string | Schemas.discount)[]
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The ID of the invoice that contains this line item.
  */
 invoice?: string | null
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription`, `metadata` reflects the current metadata from the subscription associated with the line item, unless the invoice line was directly updated with different metadata after creation.
  */
 metadata: Record<string, string>
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'line_item'
 /**
  * @description The parent that generated this line item.
  */
 parent?: Schemas.billing_bill_resource_invoicing_lines_parents_invoice_line_item_parent | null
 /**
  * @title InvoiceLineItemPeriod
  */
 period: Schemas.invoice_line_item_period
 /**
  * @description Contains pretax credit amounts (ex: discount, credit grants, etc) that apply to this line item.
  */
 pretax_credit_amounts?: Schemas.invoices_resource_pretax_credit_amount[] | null
 /**
  * @description The pricing information of the line item.
  */
 pricing?: Schemas.billing_bill_resource_invoicing_pricing_pricing | null
 /**
  * @description The quantity of the subscription, if the line item is a subscription or a proration.
  */
 quantity?: number | null
 subscription?: (string | Schemas.subscription) | null
 /**
  * @description The tax information of the line item.
  */
 taxes?: Schemas.billing_bill_resource_invoicing_taxes_tax[] | null
}

/**
 * @title LineItemsDiscountAmount
 */
export type line_items_discount_amount = {
 /**
  * @description The amount discounted.
  */
 amount: number
 /**
  * @title Discount
  * @description A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).
  * It contains information about when the discount began, when it will end, and what it is applied to.
  * 
  * Related guide: [Applying discounts to subscriptions](https://stripe.com/docs/billing/subscriptions/discounts)
  */
 discount: Schemas.discount
}

/**
 * @title LineItemsTaxAmount
 */
export type line_items_tax_amount = {
 /**
  * @description Amount of tax applied for this rate.
  */
 amount: number
 /**
  * @title TaxRate
  * @description Tax rates can be applied to [invoices](/invoicing/taxes/tax-rates), [subscriptions](/billing/taxes/tax-rates) and [Checkout Sessions](/payments/checkout/use-manual-tax-rates) to collect tax.
  * 
  * Related guide: [Tax rates](/billing/taxes/tax-rates)
  */
 rate: Schemas.tax_rate
 /**
  * @description The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
  */
 taxability_reason?: ('customer_exempt' | 'not_collecting' | 'not_subject_to_tax' | 'not_supported' | 'portion_product_exempt' | 'portion_reduced_rated' | 'portion_standard_rated' | 'product_exempt' | 'product_exempt_holiday' | 'proportionally_rated' | 'reduced_rated' | 'reverse_charge' | 'standard_rated' | 'taxable_basis_reduced' | 'zero_rated') | null
 /**
  * @description The amount on which tax is calculated, in cents (or local equivalent).
  */
 taxable_amount?: number | null
}

/**
 * @title linked_account_options_common
 */
export type linked_account_options_common = {
 /**
  * @title PaymentFlowsPrivatePaymentMethodsFinancialConnectionsCommonLinkedAccountOptionsFilters
  */
 filters?: Schemas.payment_flows_private_payment_methods_financial_connections_common_linked_account_options_filters
 /**
  * @description The list of permissions to request. The `payment_method` permission must be included.
  */
 permissions?: ('balances' | 'ownership' | 'payment_method' | 'transactions')[]
 /**
  * @description Data features requested to be retrieved upon account creation.
  */
 prefetch?: ('balances' | 'ownership' | 'transactions')[] | null
 /**
  * @description For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.
  */
 return_url?: string
}

/**
 * @title LoginLink
 * @description Login Links are single-use URLs that takes an Express account to the login page for their Stripe dashboard.
 * A Login Link differs from an [Account Link](https://stripe.com/docs/api/account_links) in that it takes the user directly to their [Express dashboard for the specified account](https://stripe.com/docs/connect/integrate-express-dashboard#create-login-link)
 */
export type login_link = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'login_link'
 /**
  * @description The URL for the login link.
  */
 url: string
}

/**
 * @title Mandate
 * @description A Mandate is a record of the permission that your customer gives you to debit their payment method.
 */
export type mandate = {
 /**
  * @title customer_acceptance
  */
 customer_acceptance: Schemas.customer_acceptance
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @title mandate_multi_use
  */
 multi_use?: Schemas.mandate_multi_use
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'mandate'
 /**
  * @description The account (if any) that the mandate is intended for.
  */
 on_behalf_of?: string
 /**
  * @description ID of the payment method associated with this mandate.
  */
 payment_method: (string | Schemas.payment_method)
 /**
  * @title mandate_payment_method_details
  */
 payment_method_details: Schemas.mandate_payment_method_details
 /**
  * @title mandate_single_use
  */
 single_use?: Schemas.mandate_single_use
 /**
  * @description The mandate status indicates whether or not you can use it to initiate a payment.
  */
 status: ('active' | 'inactive' | 'pending')
 /**
  * @description The type of the mandate.
  */
 type: ('multi_use' | 'single_use')
}

/**
 * @title mandate_acss_debit
 */
export type mandate_acss_debit = {
 /**
  * @description List of Stripe products where this mandate can be selected automatically.
  */
 default_for?: ('invoice' | 'subscription')[]
 /**
  * @description Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
  */
 interval_description?: string | null
 /**
  * @description Payment schedule for the mandate.
  */
 payment_schedule: ('combined' | 'interval' | 'sporadic')
 /**
  * @description Transaction type of the mandate.
  */
 transaction_type: ('business' | 'personal')
}

/**
 * @title mandate_amazon_pay
 */
export type mandate_amazon_pay = unknown

/**
 * @title mandate_au_becs_debit
 */
export type mandate_au_becs_debit = {
 /**
  * @description The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.
  */
 url: string
}

/**
 * @title mandate_bacs_debit
 */
export type mandate_bacs_debit = {
 /**
  * @description The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`.
  */
 network_status: ('accepted' | 'pending' | 'refused' | 'revoked')
 /**
  * @description The unique reference identifying the mandate on the Bacs network.
  */
 reference: string
 /**
  * @description When the mandate is revoked on the Bacs network this field displays the reason for the revocation.
  */
 revocation_reason?: ('account_closed' | 'bank_account_restricted' | 'bank_ownership_changed' | 'could_not_process' | 'debit_not_authorized') | null
 /**
  * @description The URL that will contain the mandate that the customer has signed.
  */
 url: string
}

/**
 * @title mandate_cashapp
 */
export type mandate_cashapp = unknown

/**
 * @title mandate_kakao_pay
 */
export type mandate_kakao_pay = unknown

/**
 * @title mandate_klarna
 */
export type mandate_klarna = unknown

/**
 * @title mandate_kr_card
 */
export type mandate_kr_card = unknown

/**
 * @title mandate_link
 */
export type mandate_link = unknown

/**
 * @title mandate_multi_use
 */
export type mandate_multi_use = unknown

/**
 * @title mandate_naver_pay
 */
export type mandate_naver_pay = unknown

/**
 * @title mandate_nz_bank_account
 */
export type mandate_nz_bank_account = unknown

/**
 * @title mandate_payment_method_details
 */
export type mandate_payment_method_details = {
 /**
  * @title mandate_acss_debit
  */
 acss_debit?: Schemas.mandate_acss_debit
 /**
  * @title mandate_amazon_pay
  */
 amazon_pay?: Schemas.mandate_amazon_pay
 /**
  * @title mandate_au_becs_debit
  */
 au_becs_debit?: Schemas.mandate_au_becs_debit
 /**
  * @title mandate_bacs_debit
  */
 bacs_debit?: Schemas.mandate_bacs_debit
 /**
  * @title card_mandate_payment_method_details
  */
 card?: Schemas.card_mandate_payment_method_details
 /**
  * @title mandate_cashapp
  */
 cashapp?: Schemas.mandate_cashapp
 /**
  * @title mandate_kakao_pay
  */
 kakao_pay?: Schemas.mandate_kakao_pay
 /**
  * @title mandate_klarna
  */
 klarna?: Schemas.mandate_klarna
 /**
  * @title mandate_kr_card
  */
 kr_card?: Schemas.mandate_kr_card
 /**
  * @title mandate_link
  */
 link?: Schemas.mandate_link
 /**
  * @title mandate_naver_pay
  */
 naver_pay?: Schemas.mandate_naver_pay
 /**
  * @title mandate_nz_bank_account
  */
 nz_bank_account?: Schemas.mandate_nz_bank_account
 /**
  * @title mandate_paypal
  */
 paypal?: Schemas.mandate_paypal
 /**
  * @title mandate_revolut_pay
  */
 revolut_pay?: Schemas.mandate_revolut_pay
 /**
  * @title mandate_sepa_debit
  */
 sepa_debit?: Schemas.mandate_sepa_debit
 /**
  * @description This mandate corresponds with a specific payment method type. The `payment_method_details` includes an additional hash with the same name and contains mandate information that's specific to that payment method.
  */
 type: string
 /**
  * @title mandate_us_bank_account
  */
 us_bank_account?: Schemas.mandate_us_bank_account
}

/**
 * @title mandate_paypal
 */
export type mandate_paypal = {
 /**
  * @description The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer.
  */
 billing_agreement_id?: string | null
 /**
  * @description PayPal account PayerID. This identifier uniquely identifies the PayPal customer.
  */
 payer_id?: string | null
}

/**
 * @title mandate_revolut_pay
 */
export type mandate_revolut_pay = unknown

/**
 * @title mandate_sepa_debit
 */
export type mandate_sepa_debit = {
 /**
  * @description The unique reference of the mandate.
  */
 reference: string
 /**
  * @description The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.
  */
 url: string
}

/**
 * @title mandate_single_use
 */
export type mandate_single_use = {
 /**
  * @description The amount of the payment on a single use mandate.
  */
 amount: number
 /**
  * @description The currency of the payment on a single use mandate.
  */
 currency: string
}

/**
 * @title mandate_us_bank_account
 */
export type mandate_us_bank_account = {
 /**
  * @description Mandate collection method
  */
 collection_method?: 'paper'
}

/**
 * @title networks
 */
export type networks = {
 /**
  * @description All networks available for selection via [payment_method_options.card.network](/api/payment_intents/confirm#confirm_payment_intent-payment_method_options-card-network).
  */
 available: string[]
 /**
  * @description The preferred network for co-branded cards. Can be `cartes_bancaires`, `mastercard`, `visa` or `invalid_preference` if requested network is not valid for the card.
  */
 preferred?: string | null
}

/**
 * @title NotificationEventData
 */
export type notification_event_data = {
 /**
  * @description Object containing the API resource relevant to the event. For example, an `invoice.created` event will have a full [invoice object](https://stripe.com/docs/api#invoice_object) as the value of the object key.
  */
 object: Record<string, unknown>
 /**
  * @description Object containing the names of the updated attributes and their values prior to the event (only included in events of type `*.updated`). If an array attribute has any updated elements, this object contains the entire array. In Stripe API versions 2017-04-06 or earlier, an updated array attribute in this object includes only the updated array elements.
  */
 previous_attributes?: Record<string, unknown>
}

/**
 * @title NotificationEventRequest
 */
export type notification_event_request = {
 /**
  * @description ID of the API request that caused the event. If null, the event was automatic (e.g., Stripe's automatic subscription handling). Request logs are available in the [dashboard](https://dashboard.stripe.com/logs), but currently not in the API.
  */
 id?: string | null
 /**
  * @description The idempotency key transmitted during the request, if any. *Note: This property is populated only for events on or after May 23, 2017*.
  */
 idempotency_key?: string | null
}

/**
 * @title offline_acceptance
 */
export type offline_acceptance = unknown

/**
 * @title online_acceptance
 */
export type online_acceptance = {
 /**
  * @description The customer accepts the mandate from this IP address.
  */
 ip_address?: string | null
 /**
  * @description The customer accepts the mandate using the user agent of the browser.
  */
 user_agent?: string | null
}

/**
 * @title OutboundPaymentsPaymentMethodDetails
 */
export type outbound_payments_payment_method_details = {
 /**
  * @title TreasurySharedResourceBillingDetails
  */
 billing_details: Schemas.treasury_shared_resource_billing_details
 /**
  * @title outbound_payments_payment_method_details_financial_account
  */
 financial_account?: Schemas.outbound_payments_payment_method_details_financial_account
 /**
  * @description The type of the payment method used in the OutboundPayment.
  */
 type: ('financial_account' | 'us_bank_account')
 /**
  * @title outbound_payments_payment_method_details_us_bank_account
  */
 us_bank_account?: Schemas.outbound_payments_payment_method_details_us_bank_account
}

/**
 * @title outbound_payments_payment_method_details_financial_account
 */
export type outbound_payments_payment_method_details_financial_account = {
 /**
  * @description Token of the FinancialAccount.
  */
 id: string
 /**
  * @description The rails used to send funds.
  */
 network: 'stripe'
}

/**
 * @title outbound_payments_payment_method_details_us_bank_account
 */
export type outbound_payments_payment_method_details_us_bank_account = {
 /**
  * @description Account holder type: individual or company.
  */
 account_holder_type?: ('company' | 'individual') | null
 /**
  * @description Account type: checkings or savings. Defaults to checking if omitted.
  */
 account_type?: ('checking' | 'savings') | null
 /**
  * @description Name of the bank associated with the bank account.
  */
 bank_name?: string | null
 /**
  * @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  */
 fingerprint?: string | null
 /**
  * @description Last four digits of the bank account number.
  */
 last4?: string | null
 /**
  * @description ID of the mandate used to make this payment.
  */
 mandate?: (string | Schemas.mandate)
 /**
  * @description The network rails used. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
  */
 network: ('ach' | 'us_domestic_wire')
 /**
  * @description Routing number of the bank account.
  */
 routing_number?: string | null
}

/**
 * @title OutboundTransfersPaymentMethodDetails
 */
export type outbound_transfers_payment_method_details = {
 /**
  * @title TreasurySharedResourceBillingDetails
  */
 billing_details: Schemas.treasury_shared_resource_billing_details
 /**
  * @title outbound_transfers_payment_method_details_financial_account
  */
 financial_account?: Schemas.outbound_transfers_payment_method_details_financial_account
 /**
  * @description The type of the payment method used in the OutboundTransfer.
  */
 type: ('financial_account' | 'us_bank_account')
 /**
  * @title outbound_transfers_payment_method_details_us_bank_account
  */
 us_bank_account?: Schemas.outbound_transfers_payment_method_details_us_bank_account
}

/**
 * @title outbound_transfers_payment_method_details_financial_account
 */
export type outbound_transfers_payment_method_details_financial_account = {
 /**
  * @description Token of the FinancialAccount.
  */
 id: string
 /**
  * @description The rails used to send funds.
  */
 network: 'stripe'
}

/**
 * @title outbound_transfers_payment_method_details_us_bank_account
 */
export type outbound_transfers_payment_method_details_us_bank_account = {
 /**
  * @description Account holder type: individual or company.
  */
 account_holder_type?: ('company' | 'individual') | null
 /**
  * @description Account type: checkings or savings. Defaults to checking if omitted.
  */
 account_type?: ('checking' | 'savings') | null
 /**
  * @description Name of the bank associated with the bank account.
  */
 bank_name?: string | null
 /**
  * @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  */
 fingerprint?: string | null
 /**
  * @description Last four digits of the bank account number.
  */
 last4?: string | null
 /**
  * @description ID of the mandate used to make this payment.
  */
 mandate?: (string | Schemas.mandate)
 /**
  * @description The network rails used. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
  */
 network: ('ach' | 'us_domestic_wire')
 /**
  * @description Routing number of the bank account.
  */
 routing_number?: string | null
}

/**
 * @title PackageDimensions
 */
export type package_dimensions = {
 /**
  * @description Height, in inches.
  */
 height: number
 /**
  * @description Length, in inches.
  */
 length: number
 /**
  * @description Weight, in ounces.
  */
 weight: number
 /**
  * @description Width, in inches.
  */
 width: number
}

/**
 * @title PaymentFlowsAmountDetails
 */
export type payment_flows_amount_details = {
 /**
  * @title PaymentFlowsAmountDetailsClientResourceTip
  */
 tip?: Schemas.payment_flows_amount_details_client_resource_tip
}

/**
 * @title PaymentFlowsAmountDetailsClient
 */
export type payment_flows_amount_details_client = {
 /**
  * @title PaymentFlowsAmountDetailsClientResourceTip
  */
 tip?: Schemas.payment_flows_amount_details_client_resource_tip
}

/**
 * @title PaymentFlowsAmountDetailsClientResourceTip
 */
export type payment_flows_amount_details_client_resource_tip = {
 /**
  * @description Portion of the amount that corresponds to a tip.
  */
 amount?: number
}

/**
 * @title PaymentFlowsAutomaticPaymentMethodsPaymentIntent
 */
export type payment_flows_automatic_payment_methods_payment_intent = {
 /**
  * @description Controls whether this PaymentIntent will accept redirect-based payment methods.
  * 
  * Redirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/payment_intents/confirm) this PaymentIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the payment.
  */
 allow_redirects?: ('always' | 'never')
 /**
  * @description Automatically calculates compatible payment methods
  */
 enabled: boolean
}

/**
 * @title PaymentFlowsAutomaticPaymentMethodsSetupIntent
 */
export type payment_flows_automatic_payment_methods_setup_intent = {
 /**
  * @description Controls whether this SetupIntent will accept redirect-based payment methods.
  * 
  * Redirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/setup_intents/confirm) this SetupIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the setup.
  */
 allow_redirects?: ('always' | 'never')
 /**
  * @description Automatically calculates compatible payment methods
  */
 enabled?: boolean | null
}

/**
 * @title PaymentFlowsInstallmentOptions
 */
export type payment_flows_installment_options = {
 enabled: boolean
 /**
  * @title payment_method_details_card_installments_plan
  */
 plan?: Schemas.payment_method_details_card_installments_plan
}

/**
 * @title PaymentFlowsPaymentIntentPresentmentDetails
 */
export type payment_flows_payment_intent_presentment_details = {
 /**
  * @description Amount intended to be collected by this payment, denominated in `presentment_currency`.
  */
 presentment_amount: number
 /**
  * @description Currency presented to the customer during payment.
  */
 presentment_currency: string
}

/**
 * @title PaymentFlowsPrivatePaymentMethodsAlipay
 */
export type payment_flows_private_payment_methods_alipay = unknown

/**
 * @title PaymentFlowsPrivatePaymentMethodsAlipayDetails
 */
export type payment_flows_private_payment_methods_alipay_details = {
 /**
  * @description Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same.
  */
 buyer_id?: string
 /**
  * @description Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same.
  */
 fingerprint?: string | null
 /**
  * @description Transaction ID of this particular Alipay transaction.
  */
 transaction_id?: string | null
}

/**
 * @title PaymentFlowsPrivatePaymentMethodsCardDetailsAPIResourceEnterpriseFeaturesExtendedAuthorizationExtendedAuthorization
 */
export type payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_extended_authorization_extended_authorization = {
 /**
  * @description Indicates whether or not the capture window is extended beyond the standard authorization.
  */
 status: ('disabled' | 'enabled')
}

/**
 * @title PaymentFlowsPrivatePaymentMethodsCardDetailsAPIResourceEnterpriseFeaturesIncrementalAuthorizationIncrementalAuthorization
 */
export type payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_incremental_authorization_incremental_authorization = {
 /**
  * @description Indicates whether or not the incremental authorization feature is supported.
  */
 status: ('available' | 'unavailable')
}

/**
 * @title PaymentFlowsPrivatePaymentMethodsCardDetailsAPIResourceEnterpriseFeaturesOvercaptureOvercapture
 */
export type payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_overcapture_overcapture = {
 /**
  * @description The maximum amount that can be captured.
  */
 maximum_amount_capturable: number
 /**
  * @description Indicates whether or not the authorized amount can be over-captured.
  */
 status: ('available' | 'unavailable')
}

/**
 * @title PaymentFlowsPrivatePaymentMethodsCardDetailsAPIResourceMulticapture
 */
export type payment_flows_private_payment_methods_card_details_api_resource_multicapture = {
 /**
  * @description Indicates whether or not multiple captures are supported.
  */
 status: ('available' | 'unavailable')
}

/**
 * @title PaymentFlowsPrivatePaymentMethodsCardPresentCommonWallet
 */
export type payment_flows_private_payment_methods_card_present_common_wallet = {
 /**
  * @description The type of mobile wallet, one of `apple_pay`, `google_pay`, `samsung_pay`, or `unknown`.
  */
 type: ('apple_pay' | 'google_pay' | 'samsung_pay' | 'unknown')
}

/**
 * @title PaymentFlowsPrivatePaymentMethodsFinancialConnectionsCommonLinkedAccountOptionsFilters
 */
export type payment_flows_private_payment_methods_financial_connections_common_linked_account_options_filters = {
 /**
  * @description The account subcategories to use to filter for possible accounts to link. Valid subcategories are `checking` and `savings`.
  */
 account_subcategories?: ('checking' | 'savings')[]
}

/**
 * @title PaymentFlowsPrivatePaymentMethodsKakaoPayPaymentMethodOptions
 */
export type payment_flows_private_payment_methods_kakao_pay_payment_method_options = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session')
}

/**
 * @title PaymentFlowsPrivatePaymentMethodsKlarnaDOB
 */
export type payment_flows_private_payment_methods_klarna_dob = {
 /**
  * @description The day of birth, between 1 and 31.
  */
 day?: number | null
 /**
  * @description The month of birth, between 1 and 12.
  */
 month?: number | null
 /**
  * @description The four-digit year of birth.
  */
 year?: number | null
}

/**
 * @title PaymentFlowsPrivatePaymentMethodsNaverPayPaymentMethodOptions
 */
export type payment_flows_private_payment_methods_naver_pay_payment_method_options = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session')
}

/**
 * @title PaymentFlowsPrivatePaymentMethodsPaycoPaymentMethodOptions
 */
export type payment_flows_private_payment_methods_payco_payment_method_options = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
}

/**
 * @title PaymentFlowsPrivatePaymentMethodsSamsungPayPaymentMethodOptions
 */
export type payment_flows_private_payment_methods_samsung_pay_payment_method_options = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
}

/**
 * @title PaymentIntent
 * @description A PaymentIntent guides you through the process of collecting a payment from your customer.
 * We recommend that you create exactly one PaymentIntent for each order or
 * customer session in your system. You can reference the PaymentIntent later to
 * see the history of payment attempts for a particular session.
 * 
 * A PaymentIntent transitions through
 * [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
 * throughout its lifetime as it interfaces with Stripe.js to perform
 * authentication flows and ultimately creates at most one successful charge.
 * 
 * Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)
 */
export type payment_intent = {
 /**
  * @description Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  */
 amount?: number
 /**
  * @description Amount that can be captured from this PaymentIntent.
  */
 amount_capturable?: number
 amount_details?: (Schemas.payment_flows_amount_details | Schemas.payment_flows_amount_details_client)
 /**
  * @description Amount that this PaymentIntent collects.
  */
 amount_received?: number
 /**
  * @description ID of the Connect application that created the PaymentIntent.
  */
 application?: (string | Schemas.application) | null
 /**
  * @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total amount captured. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  */
 application_fee_amount?: number | null
 /**
  * @description Settings to configure compatible payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods)
  */
 automatic_payment_methods?: Schemas.payment_flows_automatic_payment_methods_payment_intent | null
 /**
  * @description Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
  */
 canceled_at?: number | null
 /**
  * @description Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  */
 cancellation_reason?: ('abandoned' | 'automatic' | 'duplicate' | 'expired' | 'failed_invoice' | 'fraudulent' | 'requested_by_customer' | 'void_invoice') | null
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: ('automatic' | 'automatic_async' | 'manual')
 /**
  * @description The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key. 
  * 
  * The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
  * 
  * Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled.
  */
 client_secret?: string | null
 /**
  * @description Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
  */
 confirmation_method?: ('automatic' | 'manual')
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency?: string
 /**
  * @description ID of the Customer this PaymentIntent belongs to, if one exists.
  * 
  * Payment methods attached to other Customers cannot be used with this PaymentIntent.
  * 
  * If [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) is set and this PaymentIntent's payment method is not `card_present`, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is `card_present` and isn't a digital wallet, then a [generated_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead.
  */
 customer?: (string | Schemas.customer | Schemas.deleted_customer) | null
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description?: string | null
 /**
  * @description The list of payment method types to exclude from use with this payment.
  */
 excluded_payment_method_types?: ('acss_debit' | 'affirm' | 'afterpay_clearpay' | 'alipay' | 'alma' | 'amazon_pay' | 'au_becs_debit' | 'bacs_debit' | 'bancontact' | 'billie' | 'blik' | 'boleto' | 'card' | 'cashapp' | 'crypto' | 'customer_balance' | 'eps' | 'fpx' | 'giropay' | 'grabpay' | 'ideal' | 'kakao_pay' | 'klarna' | 'konbini' | 'kr_card' | 'mobilepay' | 'multibanco' | 'naver_pay' | 'nz_bank_account' | 'oxxo' | 'p24' | 'pay_by_bank' | 'payco' | 'paynow' | 'paypal' | 'pix' | 'promptpay' | 'revolut_pay' | 'samsung_pay' | 'satispay' | 'sepa_debit' | 'sofort' | 'swish' | 'twint' | 'us_bank_account' | 'wechat_pay' | 'zip')[] | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.
  */
 last_payment_error?: Schemas.api_errors | null
 /**
  * @description ID of the latest [Charge object](https://stripe.com/docs/api/charges) created by this PaymentIntent. This property is `null` until PaymentIntent confirmation is attempted.
  */
 latest_charge?: (string | Schemas.charge) | null
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Learn more about [storing information in metadata](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata).
  */
 metadata?: Record<string, string>
 next_action?: Schemas.payment_intent_next_action | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'payment_intent'
 /**
  * @description The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
  */
 on_behalf_of?: (string | Schemas.account) | null
 /**
  * @description ID of the payment method used in this PaymentIntent.
  */
 payment_method?: (string | Schemas.payment_method) | null
 /**
  * @description Information about the [payment method configuration](https://stripe.com/docs/api/payment_method_configurations) used for this PaymentIntent.
  */
 payment_method_configuration_details?: Schemas.payment_method_config_biz_payment_method_configuration_details | null
 /**
  * @description Payment-method-specific configuration for this PaymentIntent.
  */
 payment_method_options?: Schemas.payment_intent_payment_method_options | null
 /**
  * @description The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. A comprehensive list of valid payment method types can be found [here](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type).
  */
 payment_method_types?: string[]
 /**
  * @title PaymentFlowsPaymentIntentPresentmentDetails
  */
 presentment_details?: Schemas.payment_flows_payment_intent_presentment_details
 /**
  * @description If present, this property tells you about the processing state of the payment.
  */
 processing?: Schemas.payment_intent_processing | null
 /**
  * @description Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
  */
 receipt_email?: string | null
 /**
  * @description ID of the review associated with this PaymentIntent, if any.
  */
 review?: (string | Schemas.review) | null
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('off_session' | 'on_session') | null
 /**
  * @description Shipping information for this PaymentIntent.
  */
 shipping?: Schemas.shipping | null
 /**
  * @description Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
  * 
  * Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
  */
 statement_descriptor?: string | null
 /**
  * @description Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement.
  */
 statement_descriptor_suffix?: string | null
 /**
  * @description Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  */
 status: ('canceled' | 'processing' | 'requires_action' | 'requires_capture' | 'requires_confirmation' | 'requires_payment_method' | 'succeeded')
 /**
  * @description The data that automatically creates a Transfer after the payment finalizes. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  */
 transfer_data?: Schemas.transfer_data | null
 /**
  * @description A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers).
  */
 transfer_group?: string | null
}

/**
 * @title PaymentIntentCardProcessing
 */
export type payment_intent_card_processing = {
 /**
  * @title PaymentIntentProcessingCustomerNotification
  */
 customer_notification?: Schemas.payment_intent_processing_customer_notification
}

/**
 * @title PaymentIntentNextAction
 */
export type payment_intent_next_action = {
 /**
  * @title PaymentIntentNextActionAlipayHandleRedirect
  */
 alipay_handle_redirect?: Schemas.payment_intent_next_action_alipay_handle_redirect
 /**
  * @title payment_intent_next_action_boleto
  */
 boleto_display_details?: Schemas.payment_intent_next_action_boleto
 /**
  * @title PaymentIntentNextActionCardAwaitNotification
  */
 card_await_notification?: Schemas.payment_intent_next_action_card_await_notification
 /**
  * @title PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode
  */
 cashapp_handle_redirect_or_display_qr_code?: Schemas.payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code
 /**
  * @title PaymentIntentNextActionDisplayBankTransferInstructions
  */
 display_bank_transfer_instructions?: Schemas.payment_intent_next_action_display_bank_transfer_instructions
 /**
  * @title payment_intent_next_action_konbini
  */
 konbini_display_details?: Schemas.payment_intent_next_action_konbini
 /**
  * @title PaymentIntentNextActionDisplayMultibancoDetails
  */
 multibanco_display_details?: Schemas.payment_intent_next_action_display_multibanco_details
 /**
  * @title PaymentIntentNextActionDisplayOxxoDetails
  */
 oxxo_display_details?: Schemas.payment_intent_next_action_display_oxxo_details
 /**
  * @title PaymentIntentNextActionPaynowDisplayQrCode
  */
 paynow_display_qr_code?: Schemas.payment_intent_next_action_paynow_display_qr_code
 /**
  * @title PaymentIntentNextActionPixDisplayQrCode
  */
 pix_display_qr_code?: Schemas.payment_intent_next_action_pix_display_qr_code
 /**
  * @title PaymentIntentNextActionPromptpayDisplayQrCode
  */
 promptpay_display_qr_code?: Schemas.payment_intent_next_action_promptpay_display_qr_code
 /**
  * @title PaymentIntentNextActionRedirectToUrl
  */
 redirect_to_url?: Schemas.payment_intent_next_action_redirect_to_url
 /**
  * @title PaymentIntentNextActionSwishHandleRedirectOrDisplayQrCode
  */
 swish_handle_redirect_or_display_qr_code?: Schemas.payment_intent_next_action_swish_handle_redirect_or_display_qr_code
 /**
  * @description Type of the next action to perform. Refer to the other child attributes under `next_action` for available values. Examples include: `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`.
  */
 type: string
 /**
  * @description When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
  */
 use_stripe_sdk?: Record<string, unknown>
 /**
  * @title PaymentIntentNextActionVerifyWithMicrodeposits
  */
 verify_with_microdeposits?: Schemas.payment_intent_next_action_verify_with_microdeposits
 /**
  * @title PaymentIntentNextActionWechatPayDisplayQrCode
  */
 wechat_pay_display_qr_code?: Schemas.payment_intent_next_action_wechat_pay_display_qr_code
 /**
  * @title PaymentIntentNextActionWechatPayRedirectToAndroidApp
  */
 wechat_pay_redirect_to_android_app?: Schemas.payment_intent_next_action_wechat_pay_redirect_to_android_app
 /**
  * @title PaymentIntentNextActionWechatPayRedirectToIOSApp
  */
 wechat_pay_redirect_to_ios_app?: Schemas.payment_intent_next_action_wechat_pay_redirect_to_ios_app
}

/**
 * @title PaymentIntentNextActionAlipayHandleRedirect
 */
export type payment_intent_next_action_alipay_handle_redirect = {
 /**
  * @description The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App.
  */
 native_data?: string | null
 /**
  * @description The native URL you must redirect your customer to in order to authenticate the payment in an iOS App.
  */
 native_url?: string | null
 /**
  * @description If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
  */
 return_url?: string | null
 /**
  * @description The URL you must redirect your customer to in order to authenticate the payment.
  */
 url?: string | null
}

/**
 * @title payment_intent_next_action_boleto
 */
export type payment_intent_next_action_boleto = {
 /**
  * @description The timestamp after which the boleto expires.
  */
 expires_at?: number | null
 /**
  * @description The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher.
  */
 hosted_voucher_url?: string | null
 /**
  * @description The boleto number.
  */
 number?: string | null
 /**
  * @description The URL to the downloadable boleto voucher PDF.
  */
 pdf?: string | null
}

/**
 * @title PaymentIntentNextActionCardAwaitNotification
 */
export type payment_intent_next_action_card_await_notification = {
 /**
  * @description The time that payment will be attempted. If customer approval is required, they need to provide approval before this time.
  */
 charge_attempt_at?: number | null
 /**
  * @description For payments greater than INR 15000, the customer must provide explicit approval of the payment with their bank. For payments of lower amount, no customer action is required.
  */
 customer_approval_required?: boolean | null
}

/**
 * @title PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode
 */
export type payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code = {
 /**
  * @description The URL to the hosted Cash App Pay instructions page, which allows customers to view the QR code, and supports QR code refreshing on expiration.
  */
 hosted_instructions_url: string
 /**
  * @description The url for mobile redirect based auth
  */
 mobile_auth_url: string
 /**
  * @title PaymentIntentNextActionCashappQRCode
  */
 qr_code: Schemas.payment_intent_next_action_cashapp_qr_code
}

/**
 * @title PaymentIntentNextActionCashappQRCode
 */
export type payment_intent_next_action_cashapp_qr_code = {
 /**
  * @description The date (unix timestamp) when the QR code expires.
  */
 expires_at: number
 /**
  * @description The image_url_png string used to render QR code
  */
 image_url_png: string
 /**
  * @description The image_url_svg string used to render QR code
  */
 image_url_svg: string
}

/**
 * @title PaymentIntentNextActionDisplayBankTransferInstructions
 */
export type payment_intent_next_action_display_bank_transfer_instructions = {
 /**
  * @description The remaining amount that needs to be transferred to complete the payment.
  */
 amount_remaining?: number | null
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency?: string | null
 /**
  * @description A list of financial addresses that can be used to fund the customer balance
  */
 financial_addresses?: Schemas.funding_instructions_bank_transfer_financial_address[]
 /**
  * @description A link to a hosted page that guides your customer through completing the transfer.
  */
 hosted_instructions_url?: string | null
 /**
  * @description A string identifying this payment. Instruct your customer to include this code in the reference or memo field of their bank transfer.
  */
 reference?: string | null
 /**
  * @description Type of bank transfer
  */
 type: ('eu_bank_transfer' | 'gb_bank_transfer' | 'jp_bank_transfer' | 'mx_bank_transfer' | 'us_bank_transfer')
}

/**
 * @title PaymentIntentNextActionDisplayMultibancoDetails
 */
export type payment_intent_next_action_display_multibanco_details = {
 /**
  * @description Entity number associated with this Multibanco payment.
  */
 entity?: string | null
 /**
  * @description The timestamp at which the Multibanco voucher expires.
  */
 expires_at?: number | null
 /**
  * @description The URL for the hosted Multibanco voucher page, which allows customers to view a Multibanco voucher.
  */
 hosted_voucher_url?: string | null
 /**
  * @description Reference number associated with this Multibanco payment.
  */
 reference?: string | null
}

/**
 * @title PaymentIntentNextActionDisplayOxxoDetails
 */
export type payment_intent_next_action_display_oxxo_details = {
 /**
  * @description The timestamp after which the OXXO voucher expires.
  */
 expires_after?: number | null
 /**
  * @description The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher.
  */
 hosted_voucher_url?: string | null
 /**
  * @description OXXO reference number.
  */
 number?: string | null
}

/**
 * @title payment_intent_next_action_konbini
 */
export type payment_intent_next_action_konbini = {
 /**
  * @description The timestamp at which the pending Konbini payment expires.
  */
 expires_at: number
 /**
  * @description The URL for the Konbini payment instructions page, which allows customers to view and print a Konbini voucher.
  */
 hosted_voucher_url?: string | null
 /**
  * @title payment_intent_next_action_konbini_stores
  */
 stores: Schemas.payment_intent_next_action_konbini_stores
}

/**
 * @title payment_intent_next_action_konbini_familymart
 */
export type payment_intent_next_action_konbini_familymart = {
 /**
  * @description The confirmation number.
  */
 confirmation_number?: string
 /**
  * @description The payment code.
  */
 payment_code: string
}

/**
 * @title payment_intent_next_action_konbini_lawson
 */
export type payment_intent_next_action_konbini_lawson = {
 /**
  * @description The confirmation number.
  */
 confirmation_number?: string
 /**
  * @description The payment code.
  */
 payment_code: string
}

/**
 * @title payment_intent_next_action_konbini_ministop
 */
export type payment_intent_next_action_konbini_ministop = {
 /**
  * @description The confirmation number.
  */
 confirmation_number?: string
 /**
  * @description The payment code.
  */
 payment_code: string
}

/**
 * @title payment_intent_next_action_konbini_seicomart
 */
export type payment_intent_next_action_konbini_seicomart = {
 /**
  * @description The confirmation number.
  */
 confirmation_number?: string
 /**
  * @description The payment code.
  */
 payment_code: string
}

/**
 * @title payment_intent_next_action_konbini_stores
 */
export type payment_intent_next_action_konbini_stores = {
 /**
  * @description FamilyMart instruction details.
  */
 familymart?: Schemas.payment_intent_next_action_konbini_familymart | null
 /**
  * @description Lawson instruction details.
  */
 lawson?: Schemas.payment_intent_next_action_konbini_lawson | null
 /**
  * @description Ministop instruction details.
  */
 ministop?: Schemas.payment_intent_next_action_konbini_ministop | null
 /**
  * @description Seicomart instruction details.
  */
 seicomart?: Schemas.payment_intent_next_action_konbini_seicomart | null
}

/**
 * @title PaymentIntentNextActionPaynowDisplayQrCode
 */
export type payment_intent_next_action_paynow_display_qr_code = {
 /**
  * @description The raw data string used to generate QR code, it should be used together with QR code library.
  */
 data: string
 /**
  * @description The URL to the hosted PayNow instructions page, which allows customers to view the PayNow QR code.
  */
 hosted_instructions_url?: string | null
 /**
  * @description The image_url_png string used to render QR code
  */
 image_url_png: string
 /**
  * @description The image_url_svg string used to render QR code
  */
 image_url_svg: string
}

/**
 * @title PaymentIntentNextActionPixDisplayQrCode
 */
export type payment_intent_next_action_pix_display_qr_code = {
 /**
  * @description The raw data string used to generate QR code, it should be used together with QR code library.
  */
 data?: string
 /**
  * @description The date (unix timestamp) when the PIX expires.
  */
 expires_at?: number
 /**
  * @description The URL to the hosted pix instructions page, which allows customers to view the pix QR code.
  */
 hosted_instructions_url?: string
 /**
  * @description The image_url_png string used to render png QR code
  */
 image_url_png?: string
 /**
  * @description The image_url_svg string used to render svg QR code
  */
 image_url_svg?: string
}

/**
 * @title PaymentIntentNextActionPromptpayDisplayQrCode
 */
export type payment_intent_next_action_promptpay_display_qr_code = {
 /**
  * @description The raw data string used to generate QR code, it should be used together with QR code library.
  */
 data: string
 /**
  * @description The URL to the hosted PromptPay instructions page, which allows customers to view the PromptPay QR code.
  */
 hosted_instructions_url: string
 /**
  * @description The PNG path used to render the QR code, can be used as the source in an HTML img tag
  */
 image_url_png: string
 /**
  * @description The SVG path used to render the QR code, can be used as the source in an HTML img tag
  */
 image_url_svg: string
}

/**
 * @title PaymentIntentNextActionRedirectToUrl
 */
export type payment_intent_next_action_redirect_to_url = {
 /**
  * @description If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
  */
 return_url?: string | null
 /**
  * @description The URL you must redirect your customer to in order to authenticate the payment.
  */
 url?: string | null
}

/**
 * @title PaymentIntentNextActionSwishHandleRedirectOrDisplayQrCode
 */
export type payment_intent_next_action_swish_handle_redirect_or_display_qr_code = {
 /**
  * @description The URL to the hosted Swish instructions page, which allows customers to view the QR code.
  */
 hosted_instructions_url: string
 /**
  * @title PaymentIntentNextActionSwishQRCode
  */
 qr_code: Schemas.payment_intent_next_action_swish_qr_code
}

/**
 * @title PaymentIntentNextActionSwishQRCode
 */
export type payment_intent_next_action_swish_qr_code = {
 /**
  * @description The raw data string used to generate QR code, it should be used together with QR code library.
  */
 data: string
 /**
  * @description The image_url_png string used to render QR code
  */
 image_url_png: string
 /**
  * @description The image_url_svg string used to render QR code
  */
 image_url_svg: string
}

/**
 * @title PaymentIntentNextActionVerifyWithMicrodeposits
 */
export type payment_intent_next_action_verify_with_microdeposits = {
 /**
  * @description The timestamp when the microdeposits are expected to land.
  */
 arrival_date: number
 /**
  * @description The URL for the hosted verification page, which allows customers to verify their bank account.
  */
 hosted_verification_url: string
 /**
  * @description The type of the microdeposit sent to the customer. Used to distinguish between different verification methods.
  */
 microdeposit_type?: ('amounts' | 'descriptor_code') | null
}

/**
 * @title PaymentIntentNextActionWechatPayDisplayQrCode
 */
export type payment_intent_next_action_wechat_pay_display_qr_code = {
 /**
  * @description The data being used to generate QR code
  */
 data: string
 /**
  * @description The URL to the hosted WeChat Pay instructions page, which allows customers to view the WeChat Pay QR code.
  */
 hosted_instructions_url: string
 /**
  * @description The base64 image data for a pre-generated QR code
  */
 image_data_url: string
 /**
  * @description The image_url_png string used to render QR code
  */
 image_url_png: string
 /**
  * @description The image_url_svg string used to render QR code
  */
 image_url_svg: string
}

/**
 * @title PaymentIntentNextActionWechatPayRedirectToAndroidApp
 */
export type payment_intent_next_action_wechat_pay_redirect_to_android_app = {
 /**
  * @description app_id is the APP ID registered on WeChat open platform
  */
 app_id: string
 /**
  * @description nonce_str is a random string
  */
 nonce_str: string
 /**
  * @description package is static value
  */
 package: string
 /**
  * @description an unique merchant ID assigned by WeChat Pay
  */
 partner_id: string
 /**
  * @description an unique trading ID assigned by WeChat Pay
  */
 prepay_id: string
 /**
  * @description A signature
  */
 sign: string
 /**
  * @description Specifies the current time in epoch format
  */
 timestamp: string
}

/**
 * @title PaymentIntentNextActionWechatPayRedirectToIOSApp
 */
export type payment_intent_next_action_wechat_pay_redirect_to_ios_app = {
 /**
  * @description An universal link that redirect to WeChat Pay app
  */
 native_url: string
}

/**
 * @title PaymentIntentPaymentMethodOptions
 */
export type payment_intent_payment_method_options = {
 acss_debit?: (Schemas.payment_intent_payment_method_options_acss_debit | Schemas.payment_intent_type_specific_payment_method_options_client)
 affirm?: (Schemas.payment_method_options_affirm | Schemas.payment_intent_type_specific_payment_method_options_client)
 afterpay_clearpay?: (Schemas.payment_method_options_afterpay_clearpay | Schemas.payment_intent_type_specific_payment_method_options_client)
 alipay?: (Schemas.payment_method_options_alipay | Schemas.payment_intent_type_specific_payment_method_options_client)
 alma?: (Schemas.payment_method_options_alma | Schemas.payment_intent_type_specific_payment_method_options_client)
 amazon_pay?: (Schemas.payment_method_options_amazon_pay | Schemas.payment_intent_type_specific_payment_method_options_client)
 au_becs_debit?: (Schemas.payment_intent_payment_method_options_au_becs_debit | Schemas.payment_intent_type_specific_payment_method_options_client)
 bacs_debit?: (Schemas.payment_intent_payment_method_options_bacs_debit | Schemas.payment_intent_type_specific_payment_method_options_client)
 bancontact?: (Schemas.payment_method_options_bancontact | Schemas.payment_intent_type_specific_payment_method_options_client)
 billie?: (Schemas.payment_method_options_billie | Schemas.payment_intent_type_specific_payment_method_options_client)
 blik?: (Schemas.payment_intent_payment_method_options_blik | Schemas.payment_intent_type_specific_payment_method_options_client)
 boleto?: (Schemas.payment_method_options_boleto | Schemas.payment_intent_type_specific_payment_method_options_client)
 card?: (Schemas.payment_intent_payment_method_options_card | Schemas.payment_intent_type_specific_payment_method_options_client)
 card_present?: (Schemas.payment_method_options_card_present | Schemas.payment_intent_type_specific_payment_method_options_client)
 cashapp?: (Schemas.payment_method_options_cashapp | Schemas.payment_intent_type_specific_payment_method_options_client)
 crypto?: (Schemas.payment_method_options_crypto | Schemas.payment_intent_type_specific_payment_method_options_client)
 customer_balance?: (Schemas.payment_method_options_customer_balance | Schemas.payment_intent_type_specific_payment_method_options_client)
 eps?: (Schemas.payment_intent_payment_method_options_eps | Schemas.payment_intent_type_specific_payment_method_options_client)
 fpx?: (Schemas.payment_method_options_fpx | Schemas.payment_intent_type_specific_payment_method_options_client)
 giropay?: (Schemas.payment_method_options_giropay | Schemas.payment_intent_type_specific_payment_method_options_client)
 grabpay?: (Schemas.payment_method_options_grabpay | Schemas.payment_intent_type_specific_payment_method_options_client)
 ideal?: (Schemas.payment_method_options_ideal | Schemas.payment_intent_type_specific_payment_method_options_client)
 interac_present?: (Schemas.payment_method_options_interac_present | Schemas.payment_intent_type_specific_payment_method_options_client)
 kakao_pay?: (Schemas.payment_flows_private_payment_methods_kakao_pay_payment_method_options | Schemas.payment_intent_type_specific_payment_method_options_client)
 klarna?: (Schemas.payment_method_options_klarna | Schemas.payment_intent_type_specific_payment_method_options_client)
 konbini?: (Schemas.payment_method_options_konbini | Schemas.payment_intent_type_specific_payment_method_options_client)
 kr_card?: (Schemas.payment_method_options_kr_card | Schemas.payment_intent_type_specific_payment_method_options_client)
 link?: (Schemas.payment_intent_payment_method_options_link | Schemas.payment_intent_type_specific_payment_method_options_client)
 mobilepay?: (Schemas.payment_intent_payment_method_options_mobilepay | Schemas.payment_intent_type_specific_payment_method_options_client)
 multibanco?: (Schemas.payment_method_options_multibanco | Schemas.payment_intent_type_specific_payment_method_options_client)
 naver_pay?: (Schemas.payment_flows_private_payment_methods_naver_pay_payment_method_options | Schemas.payment_intent_type_specific_payment_method_options_client)
 nz_bank_account?: (Schemas.payment_intent_payment_method_options_nz_bank_account | Schemas.payment_intent_type_specific_payment_method_options_client)
 oxxo?: (Schemas.payment_method_options_oxxo | Schemas.payment_intent_type_specific_payment_method_options_client)
 p24?: (Schemas.payment_method_options_p24 | Schemas.payment_intent_type_specific_payment_method_options_client)
 pay_by_bank?: (Schemas.payment_method_options_pay_by_bank | Schemas.payment_intent_type_specific_payment_method_options_client)
 payco?: (Schemas.payment_flows_private_payment_methods_payco_payment_method_options | Schemas.payment_intent_type_specific_payment_method_options_client)
 paynow?: (Schemas.payment_method_options_paynow | Schemas.payment_intent_type_specific_payment_method_options_client)
 paypal?: (Schemas.payment_method_options_paypal | Schemas.payment_intent_type_specific_payment_method_options_client)
 pix?: (Schemas.payment_method_options_pix | Schemas.payment_intent_type_specific_payment_method_options_client)
 promptpay?: (Schemas.payment_method_options_promptpay | Schemas.payment_intent_type_specific_payment_method_options_client)
 revolut_pay?: (Schemas.payment_method_options_revolut_pay | Schemas.payment_intent_type_specific_payment_method_options_client)
 samsung_pay?: (Schemas.payment_flows_private_payment_methods_samsung_pay_payment_method_options | Schemas.payment_intent_type_specific_payment_method_options_client)
 satispay?: (Schemas.payment_method_options_satispay | Schemas.payment_intent_type_specific_payment_method_options_client)
 sepa_debit?: (Schemas.payment_intent_payment_method_options_sepa_debit | Schemas.payment_intent_type_specific_payment_method_options_client)
 sofort?: (Schemas.payment_method_options_sofort | Schemas.payment_intent_type_specific_payment_method_options_client)
 swish?: (Schemas.payment_intent_payment_method_options_swish | Schemas.payment_intent_type_specific_payment_method_options_client)
 twint?: (Schemas.payment_method_options_twint | Schemas.payment_intent_type_specific_payment_method_options_client)
 us_bank_account?: (Schemas.payment_intent_payment_method_options_us_bank_account | Schemas.payment_intent_type_specific_payment_method_options_client)
 wechat_pay?: (Schemas.payment_method_options_wechat_pay | Schemas.payment_intent_type_specific_payment_method_options_client)
 zip?: (Schemas.payment_method_options_zip | Schemas.payment_intent_type_specific_payment_method_options_client)
}

/**
 * @title payment_intent_payment_method_options_acss_debit
 */
export type payment_intent_payment_method_options_acss_debit = {
 /**
  * @title payment_intent_payment_method_options_mandate_options_acss_debit
  */
 mandate_options?: Schemas.payment_intent_payment_method_options_mandate_options_acss_debit
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session' | 'on_session')
 /**
  * @description Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
  */
 target_date?: string
 /**
  * @description Bank account verification method.
  */
 verification_method?: ('automatic' | 'instant' | 'microdeposits')
}

/**
 * @title payment_intent_payment_method_options_au_becs_debit
 */
export type payment_intent_payment_method_options_au_becs_debit = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session' | 'on_session')
 /**
  * @description Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
  */
 target_date?: string
}

/**
 * @title payment_intent_payment_method_options_bacs_debit
 */
export type payment_intent_payment_method_options_bacs_debit = {
 /**
  * @title payment_intent_payment_method_options_mandate_options_bacs_debit
  */
 mandate_options?: Schemas.payment_intent_payment_method_options_mandate_options_bacs_debit
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session' | 'on_session')
 /**
  * @description Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
  */
 target_date?: string
}

/**
 * @title payment_intent_payment_method_options_blik
 */
export type payment_intent_payment_method_options_blik = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_intent_payment_method_options_card
 */
export type payment_intent_payment_method_options_card = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
 /**
  * @description Installment details for this payment.
  * 
  * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
  */
 installments?: Schemas.payment_method_options_card_installments | null
 /**
  * @description Configuration options for setting up an eMandate for cards issued in India.
  */
 mandate_options?: Schemas.payment_method_options_card_mandate_options | null
 /**
  * @description Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time.
  */
 network?: ('amex' | 'cartes_bancaires' | 'diners' | 'discover' | 'eftpos_au' | 'girocard' | 'interac' | 'jcb' | 'link' | 'mastercard' | 'unionpay' | 'unknown' | 'visa') | null
 /**
  * @description Request ability to [capture beyond the standard authorization validity window](https://stripe.com/docs/payments/extended-authorization) for this PaymentIntent.
  */
 request_extended_authorization?: ('if_available' | 'never')
 /**
  * @description Request ability to [increment the authorization](https://stripe.com/docs/payments/incremental-authorization) for this PaymentIntent.
  */
 request_incremental_authorization?: ('if_available' | 'never')
 /**
  * @description Request ability to make [multiple captures](https://stripe.com/docs/payments/multicapture) for this PaymentIntent.
  */
 request_multicapture?: ('if_available' | 'never')
 /**
  * @description Request ability to [overcapture](https://stripe.com/docs/payments/overcapture) for this PaymentIntent.
  */
 request_overcapture?: ('if_available' | 'never')
 /**
  * @description We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  */
 request_three_d_secure?: ('any' | 'automatic' | 'challenge') | null
 /**
  * @description When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
  */
 require_cvc_recollection?: boolean
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session' | 'on_session')
 /**
  * @description Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters.
  */
 statement_descriptor_suffix_kana?: string
 /**
  * @description Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters.
  */
 statement_descriptor_suffix_kanji?: string
}

/**
 * @title payment_intent_payment_method_options_eps
 */
export type payment_intent_payment_method_options_eps = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_intent_payment_method_options_link
 */
export type payment_intent_payment_method_options_link = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session')
}

/**
 * @title payment_intent_payment_method_options_mandate_options_acss_debit
 */
export type payment_intent_payment_method_options_mandate_options_acss_debit = {
 /**
  * @description A URL for custom mandate text
  */
 custom_mandate_url?: string
 /**
  * @description Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
  */
 interval_description?: string | null
 /**
  * @description Payment schedule for the mandate.
  */
 payment_schedule?: ('combined' | 'interval' | 'sporadic') | null
 /**
  * @description Transaction type of the mandate.
  */
 transaction_type?: ('business' | 'personal') | null
}

/**
 * @title payment_intent_payment_method_options_mandate_options_bacs_debit
 */
export type payment_intent_payment_method_options_mandate_options_bacs_debit = {
 /**
  * @description Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'DDIC' or 'STRIPE'.
  */
 reference_prefix?: string
}

/**
 * @title payment_intent_payment_method_options_mandate_options_sepa_debit
 */
export type payment_intent_payment_method_options_mandate_options_sepa_debit = {
 /**
  * @description Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'STRIPE'.
  */
 reference_prefix?: string
}

/**
 * @title payment_intent_payment_method_options_mobilepay
 */
export type payment_intent_payment_method_options_mobilepay = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_intent_payment_method_options_nz_bank_account
 */
export type payment_intent_payment_method_options_nz_bank_account = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session' | 'on_session')
 /**
  * @description Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
  */
 target_date?: string
}

/**
 * @title payment_intent_payment_method_options_sepa_debit
 */
export type payment_intent_payment_method_options_sepa_debit = {
 /**
  * @title payment_intent_payment_method_options_mandate_options_sepa_debit
  */
 mandate_options?: Schemas.payment_intent_payment_method_options_mandate_options_sepa_debit
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session' | 'on_session')
 /**
  * @description Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
  */
 target_date?: string
}

/**
 * @title payment_intent_payment_method_options_swish
 */
export type payment_intent_payment_method_options_swish = {
 /**
  * @description A reference for this payment to be displayed in the Swish app.
  */
 reference?: string | null
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_intent_payment_method_options_us_bank_account
 */
export type payment_intent_payment_method_options_us_bank_account = {
 /**
  * @title linked_account_options_common
  */
 financial_connections?: Schemas.linked_account_options_common
 /**
  * @title payment_method_options_us_bank_account_mandate_options
  */
 mandate_options?: Schemas.payment_method_options_us_bank_account_mandate_options
 /**
  * @description Preferred transaction settlement speed
  */
 preferred_settlement_speed?: ('fastest' | 'standard')
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session' | 'on_session')
 /**
  * @description Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
  */
 target_date?: string
 /**
  * @description Bank account verification method.
  */
 verification_method?: ('automatic' | 'instant' | 'microdeposits')
}

/**
 * @title PaymentIntentProcessing
 */
export type payment_intent_processing = {
 /**
  * @title PaymentIntentCardProcessing
  */
 card?: Schemas.payment_intent_card_processing
 /**
  * @description Type of the payment method for which payment is in `processing` state, one of `card`.
  */
 type: 'card'
}

/**
 * @title PaymentIntentProcessingCustomerNotification
 */
export type payment_intent_processing_customer_notification = {
 /**
  * @description Whether customer approval has been requested for this payment. For payments greater than INR 15000 or mandate amount, the customer must provide explicit approval of the payment with their bank.
  */
 approval_requested?: boolean | null
 /**
  * @description If customer approval is required, they need to provide approval before this time.
  */
 completes_at?: number | null
}

/**
 * @title PaymentIntentTypeSpecificPaymentMethodOptionsClient
 */
export type payment_intent_type_specific_payment_method_options_client = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: ('manual' | 'manual_preferred')
 /**
  * @title PaymentFlowsInstallmentOptions
  */
 installments?: Schemas.payment_flows_installment_options
 /**
  * @description Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support.
  */
 request_incremental_authorization_support?: boolean
 /**
  * @description When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
  */
 require_cvc_recollection?: boolean
 /**
  * @title payment_method_options_card_present_routing
  */
 routing?: Schemas.payment_method_options_card_present_routing
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session' | 'on_session')
 /**
  * @description Bank account verification method.
  */
 verification_method?: ('automatic' | 'instant' | 'microdeposits')
}

/**
 * @title PaymentLink
 * @description A payment link is a shareable URL that will take your customers to a hosted payment page. A payment link can be shared and used multiple times.
 * 
 * When a customer opens a payment link it will open a new [checkout session](https://stripe.com/docs/api/checkout/sessions) to render the payment page. You can use [checkout session events](https://stripe.com/docs/api/events/types#event_types-checkout.session.completed) to track payments through payment links.
 * 
 * Related guide: [Payment Links API](https://stripe.com/docs/payment-links)
 */
export type payment_link = {
 /**
  * @description Whether the payment link's `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.
  */
 active: boolean
 /**
  * @title PaymentLinksResourceAfterCompletion
  */
 after_completion: Schemas.payment_links_resource_after_completion
 /**
  * @description Whether user redeemable promotion codes are enabled.
  */
 allow_promotion_codes: boolean
 /**
  * @description The ID of the Connect application that created the Payment Link.
  */
 application?: (string | Schemas.application | Schemas.deleted_application) | null
 /**
  * @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account.
  */
 application_fee_amount?: number | null
 /**
  * @description This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account.
  */
 application_fee_percent?: number | null
 /**
  * @title PaymentLinksResourceAutomaticTax
  */
 automatic_tax: Schemas.payment_links_resource_automatic_tax
 /**
  * @description Configuration for collecting the customer's billing address. Defaults to `auto`.
  */
 billing_address_collection: ('auto' | 'required')
 /**
  * @description When set, provides configuration to gather active consent from customers.
  */
 consent_collection?: Schemas.payment_links_resource_consent_collection | null
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description Collect additional information from your customer using custom fields. Up to 3 fields are supported.
  */
 custom_fields: Schemas.payment_links_resource_custom_fields[]
 /**
  * @title PaymentLinksResourceCustomText
  */
 custom_text: Schemas.payment_links_resource_custom_text
 /**
  * @description Configuration for Customer creation during checkout.
  */
 customer_creation: ('always' | 'if_required')
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The custom message to be displayed to a customer when a payment link is no longer active.
  */
 inactive_message?: string | null
 /**
  * @description Configuration for creating invoice for payment mode payment links.
  */
 invoice_creation?: Schemas.payment_links_resource_invoice_creation | null
 /**
  * @title PaymentLinksResourceListLineItems
  * @description The line items representing what is being sold.
  */
 line_items?: {
  /**
   * @description Details about each object.
   */
  data: Schemas.item[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 }
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'payment_link'
 /**
  * @description The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details.
  */
 on_behalf_of?: (string | Schemas.account) | null
 /**
  * @description The optional items presented to the customer at checkout.
  */
 optional_items?: Schemas.payment_links_resource_optional_item[] | null
 /**
  * @description Indicates the parameters to be passed to PaymentIntent creation during checkout.
  */
 payment_intent_data?: Schemas.payment_links_resource_payment_intent_data | null
 /**
  * @description Configuration for collecting a payment method during checkout. Defaults to `always`.
  */
 payment_method_collection: ('always' | 'if_required')
 /**
  * @description The list of payment method types that customers can use. When `null`, Stripe will dynamically show relevant payment methods you've enabled in your [payment method settings](https://dashboard.stripe.com/settings/payment_methods).
  */
 payment_method_types?: ('affirm' | 'afterpay_clearpay' | 'alipay' | 'alma' | 'au_becs_debit' | 'bacs_debit' | 'bancontact' | 'billie' | 'blik' | 'boleto' | 'card' | 'cashapp' | 'eps' | 'fpx' | 'giropay' | 'grabpay' | 'ideal' | 'klarna' | 'konbini' | 'link' | 'mobilepay' | 'multibanco' | 'oxxo' | 'p24' | 'pay_by_bank' | 'paynow' | 'paypal' | 'pix' | 'promptpay' | 'satispay' | 'sepa_debit' | 'sofort' | 'swish' | 'twint' | 'us_bank_account' | 'wechat_pay' | 'zip')[] | null
 /**
  * @title PaymentLinksResourcePhoneNumberCollection
  */
 phone_number_collection: Schemas.payment_links_resource_phone_number_collection
 /**
  * @description Settings that restrict the usage of a payment link.
  */
 restrictions?: Schemas.payment_links_resource_restrictions | null
 /**
  * @description Configuration for collecting the customer's shipping address.
  */
 shipping_address_collection?: Schemas.payment_links_resource_shipping_address_collection | null
 /**
  * @description The shipping rate options applied to the session.
  */
 shipping_options: Schemas.payment_links_resource_shipping_option[]
 /**
  * @description Indicates the type of transaction being performed which customizes relevant text on the page, such as the submit button.
  */
 submit_type: ('auto' | 'book' | 'donate' | 'pay' | 'subscribe')
 /**
  * @description When creating a subscription, the specified configuration data will be used. There must be at least one line item with a recurring price to use `subscription_data`.
  */
 subscription_data?: Schemas.payment_links_resource_subscription_data | null
 /**
  * @title PaymentLinksResourceTaxIdCollection
  */
 tax_id_collection: Schemas.payment_links_resource_tax_id_collection
 /**
  * @description The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to.
  */
 transfer_data?: Schemas.payment_links_resource_transfer_data | null
 /**
  * @description The public URL that can be shared with customers.
  */
 url: string
}

/**
 * @title PaymentLinksResourceAfterCompletion
 */
export type payment_links_resource_after_completion = {
 /**
  * @title PaymentLinksResourceCompletionBehaviorConfirmationPage
  */
 hosted_confirmation?: Schemas.payment_links_resource_completion_behavior_confirmation_page
 /**
  * @title PaymentLinksResourceCompletionBehaviorRedirect
  */
 redirect?: Schemas.payment_links_resource_completion_behavior_redirect
 /**
  * @description The specified behavior after the purchase is complete.
  */
 type: ('hosted_confirmation' | 'redirect')
}

/**
 * @title PaymentLinksResourceAutomaticTax
 */
export type payment_links_resource_automatic_tax = {
 /**
  * @description If `true`, tax will be calculated automatically using the customer's location.
  */
 enabled: boolean
 /**
  * @description The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
  */
 liability?: Schemas.connect_account_reference | null
}

/**
 * @title PaymentLinksResourceCompletedSessions
 */
export type payment_links_resource_completed_sessions = {
 /**
  * @description The current number of checkout sessions that have been completed on the payment link which count towards the `completed_sessions` restriction to be met.
  */
 count: number
 /**
  * @description The maximum number of checkout sessions that can be completed for the `completed_sessions` restriction to be met.
  */
 limit: number
}

/**
 * @title PaymentLinksResourceCompletionBehaviorConfirmationPage
 */
export type payment_links_resource_completion_behavior_confirmation_page = {
 /**
  * @description The custom message that is displayed to the customer after the purchase is complete.
  */
 custom_message?: string | null
}

/**
 * @title PaymentLinksResourceCompletionBehaviorRedirect
 */
export type payment_links_resource_completion_behavior_redirect = {
 /**
  * @description The URL the customer will be redirected to after the purchase is complete.
  */
 url: string
}

/**
 * @title PaymentLinksResourceConsentCollection
 */
export type payment_links_resource_consent_collection = {
 /**
  * @description Settings related to the payment method reuse text shown in the Checkout UI.
  */
 payment_method_reuse_agreement?: Schemas.payment_links_resource_payment_method_reuse_agreement | null
 /**
  * @description If set to `auto`, enables the collection of customer consent for promotional communications.
  */
 promotions?: ('auto' | 'none') | null
 /**
  * @description If set to `required`, it requires cutomers to accept the terms of service before being able to pay. If set to `none`, customers won't be shown a checkbox to accept the terms of service.
  */
 terms_of_service?: ('none' | 'required') | null
}

/**
 * @title PaymentLinksResourceCustomFields
 */
export type payment_links_resource_custom_fields = {
 /**
  * @title PaymentLinksResourceCustomFieldsDropdown
  */
 dropdown?: Schemas.payment_links_resource_custom_fields_dropdown
 /**
  * @description String of your choice that your integration can use to reconcile this field. Must be unique to this field, alphanumeric, and up to 200 characters.
  */
 key: string
 /**
  * @title PaymentLinksResourceCustomFieldsLabel
  */
 label: Schemas.payment_links_resource_custom_fields_label
 /**
  * @title PaymentLinksResourceCustomFieldsNumeric
  */
 numeric?: Schemas.payment_links_resource_custom_fields_numeric
 /**
  * @description Whether the customer is required to complete the field before completing the Checkout Session. Defaults to `false`.
  */
 optional: boolean
 /**
  * @title PaymentLinksResourceCustomFieldsText
  */
 text?: Schemas.payment_links_resource_custom_fields_text
 /**
  * @description The type of the field.
  */
 type: ('dropdown' | 'numeric' | 'text')
}

/**
 * @title PaymentLinksResourceCustomFieldsDropdown
 */
export type payment_links_resource_custom_fields_dropdown = {
 /**
  * @description The value that will pre-fill on the payment page.
  */
 default_value?: string | null
 /**
  * @description The options available for the customer to select. Up to 200 options allowed.
  */
 options: Schemas.payment_links_resource_custom_fields_dropdown_option[]
}

/**
 * @title PaymentLinksResourceCustomFieldsDropdownOption
 */
export type payment_links_resource_custom_fields_dropdown_option = {
 /**
  * @description The label for the option, displayed to the customer. Up to 100 characters.
  */
 label: string
 /**
  * @description The value for this option, not displayed to the customer, used by your integration to reconcile the option selected by the customer. Must be unique to this option, alphanumeric, and up to 100 characters.
  */
 value: string
}

/**
 * @title PaymentLinksResourceCustomFieldsLabel
 */
export type payment_links_resource_custom_fields_label = {
 /**
  * @description Custom text for the label, displayed to the customer. Up to 50 characters.
  */
 custom?: string | null
 /**
  * @description The type of the label.
  */
 type: 'custom'
}

/**
 * @title PaymentLinksResourceCustomFieldsNumeric
 */
export type payment_links_resource_custom_fields_numeric = {
 /**
  * @description The value that will pre-fill the field on the payment page.
  */
 default_value?: string | null
 /**
  * @description The maximum character length constraint for the customer's input.
  */
 maximum_length?: number | null
 /**
  * @description The minimum character length requirement for the customer's input.
  */
 minimum_length?: number | null
}

/**
 * @title PaymentLinksResourceCustomFieldsText
 */
export type payment_links_resource_custom_fields_text = {
 /**
  * @description The value that will pre-fill the field on the payment page.
  */
 default_value?: string | null
 /**
  * @description The maximum character length constraint for the customer's input.
  */
 maximum_length?: number | null
 /**
  * @description The minimum character length requirement for the customer's input.
  */
 minimum_length?: number | null
}

/**
 * @title PaymentLinksResourceCustomText
 */
export type payment_links_resource_custom_text = {
 /**
  * @description Custom text that should be displayed after the payment confirmation button.
  */
 after_submit?: Schemas.payment_links_resource_custom_text_position | null
 /**
  * @description Custom text that should be displayed alongside shipping address collection.
  */
 shipping_address?: Schemas.payment_links_resource_custom_text_position | null
 /**
  * @description Custom text that should be displayed alongside the payment confirmation button.
  */
 submit?: Schemas.payment_links_resource_custom_text_position | null
 /**
  * @description Custom text that should be displayed in place of the default terms of service agreement text.
  */
 terms_of_service_acceptance?: Schemas.payment_links_resource_custom_text_position | null
}

/**
 * @title PaymentLinksResourceCustomTextPosition
 */
export type payment_links_resource_custom_text_position = {
 /**
  * @description Text may be up to 1200 characters in length.
  */
 message: string
}

/**
 * @title PaymentLinksResourceInvoiceCreation
 */
export type payment_links_resource_invoice_creation = {
 /**
  * @description Enable creating an invoice on successful payment.
  */
 enabled: boolean
 /**
  * @description Configuration for the invoice. Default invoice values will be used if unspecified.
  */
 invoice_data?: Schemas.payment_links_resource_invoice_settings | null
}

/**
 * @title PaymentLinksResourceInvoiceSettings
 */
export type payment_links_resource_invoice_settings = {
 /**
  * @description The account tax IDs associated with the invoice.
  */
 account_tax_ids?: (string | Schemas.tax_id | Schemas.deleted_tax_id)[] | null
 /**
  * @description A list of up to 4 custom fields to be displayed on the invoice.
  */
 custom_fields?: Schemas.invoice_setting_custom_field[] | null
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description?: string | null
 /**
  * @description Footer to be displayed on the invoice.
  */
 footer?: string | null
 /**
  * @description The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
  */
 issuer?: Schemas.connect_account_reference | null
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description Options for invoice PDF rendering.
  */
 rendering_options?: Schemas.invoice_setting_checkout_rendering_options | null
}

/**
 * @title PaymentLinksResourceOptionalItem
 */
export type payment_links_resource_optional_item = {
 adjustable_quantity?: Schemas.payment_links_resource_optional_item_adjustable_quantity | null
 price: string
 quantity: number
}

/**
 * @title PaymentLinksResourceOptionalItemAdjustableQuantity
 */
export type payment_links_resource_optional_item_adjustable_quantity = {
 /**
  * @description Set to true if the quantity can be adjusted to any non-negative integer.
  */
 enabled: boolean
 /**
  * @description The maximum quantity of this item the customer can purchase. By default this value is 99.
  */
 maximum?: number | null
 /**
  * @description The minimum quantity of this item the customer must purchase, if they choose to purchase it. Because this item is optional, the customer will always be able to remove it from their order, even if the `minimum` configured here is greater than 0. By default this value is 0.
  */
 minimum?: number | null
}

/**
 * @title PaymentLinksResourcePaymentIntentData
 */
export type payment_links_resource_payment_intent_data = {
 /**
  * @description Indicates when the funds will be captured from the customer's account.
  */
 capture_method?: ('automatic' | 'automatic_async' | 'manual') | null
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description?: string | null
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on [Payment Intents](https://stripe.com/docs/api/payment_intents) generated from this payment link.
  */
 metadata: Record<string, string>
 /**
  * @description Indicates that you intend to make future payments with the payment method collected during checkout.
  */
 setup_future_usage?: ('off_session' | 'on_session') | null
 /**
  * @description For a non-card payment, information about the charge that appears on the customer's statement when this payment succeeds in creating a charge.
  */
 statement_descriptor?: string | null
 /**
  * @description For a card payment, information about the charge that appears on the customer's statement when this payment succeeds in creating a charge. Concatenated with the account's statement descriptor prefix to form the complete statement descriptor.
  */
 statement_descriptor_suffix?: string | null
 /**
  * @description A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers) for details.
  */
 transfer_group?: string | null
}

/**
 * @title PaymentLinksResourcePaymentMethodReuseAgreement
 */
export type payment_links_resource_payment_method_reuse_agreement = {
 /**
  * @description Determines the position and visibility of the payment method reuse agreement in the UI. When set to `auto`, Stripe's defaults will be used.
  * 
  * When set to `hidden`, the payment method reuse agreement text will always be hidden in the UI.
  */
 position: ('auto' | 'hidden')
}

/**
 * @title PaymentLinksResourcePhoneNumberCollection
 */
export type payment_links_resource_phone_number_collection = {
 /**
  * @description If `true`, a phone number will be collected during checkout.
  */
 enabled: boolean
}

/**
 * @title PaymentLinksResourceRestrictions
 */
export type payment_links_resource_restrictions = {
 /**
  * @title PaymentLinksResourceCompletedSessions
  */
 completed_sessions: Schemas.payment_links_resource_completed_sessions
}

/**
 * @title PaymentLinksResourceShippingAddressCollection
 */
export type payment_links_resource_shipping_address_collection = {
 /**
  * @description An array of two-letter ISO country codes representing which countries Checkout should provide as options for shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.
  */
 allowed_countries: ('AC' | 'AD' | 'AE' | 'AF' | 'AG' | 'AI' | 'AL' | 'AM' | 'AO' | 'AQ' | 'AR' | 'AT' | 'AU' | 'AW' | 'AX' | 'AZ' | 'BA' | 'BB' | 'BD' | 'BE' | 'BF' | 'BG' | 'BH' | 'BI' | 'BJ' | 'BL' | 'BM' | 'BN' | 'BO' | 'BQ' | 'BR' | 'BS' | 'BT' | 'BV' | 'BW' | 'BY' | 'BZ' | 'CA' | 'CD' | 'CF' | 'CG' | 'CH' | 'CI' | 'CK' | 'CL' | 'CM' | 'CN' | 'CO' | 'CR' | 'CV' | 'CW' | 'CY' | 'CZ' | 'DE' | 'DJ' | 'DK' | 'DM' | 'DO' | 'DZ' | 'EC' | 'EE' | 'EG' | 'EH' | 'ER' | 'ES' | 'ET' | 'FI' | 'FJ' | 'FK' | 'FO' | 'FR' | 'GA' | 'GB' | 'GD' | 'GE' | 'GF' | 'GG' | 'GH' | 'GI' | 'GL' | 'GM' | 'GN' | 'GP' | 'GQ' | 'GR' | 'GS' | 'GT' | 'GU' | 'GW' | 'GY' | 'HK' | 'HN' | 'HR' | 'HT' | 'HU' | 'ID' | 'IE' | 'IL' | 'IM' | 'IN' | 'IO' | 'IQ' | 'IS' | 'IT' | 'JE' | 'JM' | 'JO' | 'JP' | 'KE' | 'KG' | 'KH' | 'KI' | 'KM' | 'KN' | 'KR' | 'KW' | 'KY' | 'KZ' | 'LA' | 'LB' | 'LC' | 'LI' | 'LK' | 'LR' | 'LS' | 'LT' | 'LU' | 'LV' | 'LY' | 'MA' | 'MC' | 'MD' | 'ME' | 'MF' | 'MG' | 'MK' | 'ML' | 'MM' | 'MN' | 'MO' | 'MQ' | 'MR' | 'MS' | 'MT' | 'MU' | 'MV' | 'MW' | 'MX' | 'MY' | 'MZ' | 'NA' | 'NC' | 'NE' | 'NG' | 'NI' | 'NL' | 'NO' | 'NP' | 'NR' | 'NU' | 'NZ' | 'OM' | 'PA' | 'PE' | 'PF' | 'PG' | 'PH' | 'PK' | 'PL' | 'PM' | 'PN' | 'PR' | 'PS' | 'PT' | 'PY' | 'QA' | 'RE' | 'RO' | 'RS' | 'RU' | 'RW' | 'SA' | 'SB' | 'SC' | 'SD' | 'SE' | 'SG' | 'SH' | 'SI' | 'SJ' | 'SK' | 'SL' | 'SM' | 'SN' | 'SO' | 'SR' | 'SS' | 'ST' | 'SV' | 'SX' | 'SZ' | 'TA' | 'TC' | 'TD' | 'TF' | 'TG' | 'TH' | 'TJ' | 'TK' | 'TL' | 'TM' | 'TN' | 'TO' | 'TR' | 'TT' | 'TV' | 'TW' | 'TZ' | 'UA' | 'UG' | 'US' | 'UY' | 'UZ' | 'VA' | 'VC' | 'VE' | 'VG' | 'VN' | 'VU' | 'WF' | 'WS' | 'XK' | 'YE' | 'YT' | 'ZA' | 'ZM' | 'ZW' | 'ZZ')[]
}

/**
 * @title PaymentLinksResourceShippingOption
 */
export type payment_links_resource_shipping_option = {
 /**
  * @description A non-negative integer in cents representing how much to charge.
  */
 shipping_amount: number
 /**
  * @description The ID of the Shipping Rate to use for this shipping option.
  */
 shipping_rate: (string | Schemas.shipping_rate)
}

/**
 * @title PaymentLinksResourceSubscriptionData
 */
export type payment_links_resource_subscription_data = {
 /**
  * @description The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
  */
 description?: string | null
 /**
  * @title PaymentLinksResourceSubscriptionDataInvoiceSettings
  */
 invoice_settings: Schemas.payment_links_resource_subscription_data_invoice_settings
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on [Subscriptions](https://stripe.com/docs/api/subscriptions) generated from this payment link.
  */
 metadata: Record<string, string>
 /**
  * @description Integer representing the number of trial period days before the customer is charged for the first time.
  */
 trial_period_days?: number | null
 /**
  * @description Settings related to subscription trials.
  */
 trial_settings?: Schemas.subscriptions_trials_resource_trial_settings | null
}

/**
 * @title PaymentLinksResourceSubscriptionDataInvoiceSettings
 */
export type payment_links_resource_subscription_data_invoice_settings = {
 /**
  * @title ConnectAccountReference
  */
 issuer: Schemas.connect_account_reference
}

/**
 * @title PaymentLinksResourceTaxIdCollection
 */
export type payment_links_resource_tax_id_collection = {
 /**
  * @description Indicates whether tax ID collection is enabled for the session.
  */
 enabled: boolean
 required: ('if_supported' | 'never')
}

/**
 * @title PaymentLinksResourceTransferData
 */
export type payment_links_resource_transfer_data = {
 /**
  * @description The amount in cents (or local equivalent) that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
  */
 amount?: number | null
 /**
  * @description The connected account receiving the transfer.
  */
 destination: (string | Schemas.account)
}

/**
 * @title PaymentMethod
 * @description PaymentMethod objects represent your customer's payment instruments.
 * You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
 * Customer objects to store instrument details for future payments.
 * 
 * Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
 */
export type payment_method = {
 /**
  * @title payment_method_acss_debit
  */
 acss_debit?: Schemas.payment_method_acss_debit
 /**
  * @title payment_method_affirm
  */
 affirm?: Schemas.payment_method_affirm
 /**
  * @title payment_method_afterpay_clearpay
  */
 afterpay_clearpay?: Schemas.payment_method_afterpay_clearpay
 /**
  * @title PaymentFlowsPrivatePaymentMethodsAlipay
  */
 alipay?: Schemas.payment_flows_private_payment_methods_alipay
 /**
  * @description This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”.
  */
 allow_redisplay?: ('always' | 'limited' | 'unspecified')
 /**
  * @title payment_method_alma
  */
 alma?: Schemas.payment_method_alma
 /**
  * @title payment_method_amazon_pay
  */
 amazon_pay?: Schemas.payment_method_amazon_pay
 /**
  * @title payment_method_au_becs_debit
  */
 au_becs_debit?: Schemas.payment_method_au_becs_debit
 /**
  * @title payment_method_bacs_debit
  */
 bacs_debit?: Schemas.payment_method_bacs_debit
 /**
  * @title payment_method_bancontact
  */
 bancontact?: Schemas.payment_method_bancontact
 /**
  * @title payment_method_billie
  */
 billie?: Schemas.payment_method_billie
 /**
  * @title billing_details
  */
 billing_details: Schemas.billing_details
 /**
  * @title payment_method_blik
  */
 blik?: Schemas.payment_method_blik
 /**
  * @title payment_method_boleto
  */
 boleto?: Schemas.payment_method_boleto
 /**
  * @title payment_method_card
  */
 card?: Schemas.payment_method_card
 /**
  * @title payment_method_card_present
  */
 card_present?: Schemas.payment_method_card_present
 /**
  * @title payment_method_cashapp
  */
 cashapp?: Schemas.payment_method_cashapp
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @title payment_method_crypto
  */
 crypto?: Schemas.payment_method_crypto
 /**
  * @description The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.
  */
 customer?: (string | Schemas.customer) | null
 /**
  * @title payment_method_customer_balance
  */
 customer_balance?: Schemas.payment_method_customer_balance
 /**
  * @title payment_method_eps
  */
 eps?: Schemas.payment_method_eps
 /**
  * @title payment_method_fpx
  */
 fpx?: Schemas.payment_method_fpx
 /**
  * @title payment_method_giropay
  */
 giropay?: Schemas.payment_method_giropay
 /**
  * @title payment_method_grabpay
  */
 grabpay?: Schemas.payment_method_grabpay
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @title payment_method_ideal
  */
 ideal?: Schemas.payment_method_ideal
 /**
  * @title payment_method_interac_present
  */
 interac_present?: Schemas.payment_method_interac_present
 /**
  * @title payment_method_kakao_pay
  */
 kakao_pay?: Schemas.payment_method_kakao_pay
 /**
  * @title payment_method_klarna
  */
 klarna?: Schemas.payment_method_klarna
 /**
  * @title payment_method_konbini
  */
 konbini?: Schemas.payment_method_konbini
 /**
  * @title payment_method_kr_card
  */
 kr_card?: Schemas.payment_method_kr_card
 /**
  * @title payment_method_link
  */
 link?: Schemas.payment_method_link
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @title payment_method_mobilepay
  */
 mobilepay?: Schemas.payment_method_mobilepay
 /**
  * @title payment_method_multibanco
  */
 multibanco?: Schemas.payment_method_multibanco
 /**
  * @title payment_method_naver_pay
  */
 naver_pay?: Schemas.payment_method_naver_pay
 /**
  * @title payment_method_nz_bank_account
  */
 nz_bank_account?: Schemas.payment_method_nz_bank_account
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'payment_method'
 /**
  * @title payment_method_oxxo
  */
 oxxo?: Schemas.payment_method_oxxo
 /**
  * @title payment_method_p24
  */
 p24?: Schemas.payment_method_p24
 /**
  * @title payment_method_pay_by_bank
  */
 pay_by_bank?: Schemas.payment_method_pay_by_bank
 /**
  * @title payment_method_payco
  */
 payco?: Schemas.payment_method_payco
 /**
  * @title payment_method_paynow
  */
 paynow?: Schemas.payment_method_paynow
 /**
  * @title payment_method_paypal
  */
 paypal?: Schemas.payment_method_paypal
 /**
  * @title payment_method_pix
  */
 pix?: Schemas.payment_method_pix
 /**
  * @title payment_method_promptpay
  */
 promptpay?: Schemas.payment_method_promptpay
 /**
  * @title RadarRadarOptions
  * @description Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information.
  */
 radar_options?: Schemas.radar_radar_options
 /**
  * @title payment_method_revolut_pay
  */
 revolut_pay?: Schemas.payment_method_revolut_pay
 /**
  * @title payment_method_samsung_pay
  */
 samsung_pay?: Schemas.payment_method_samsung_pay
 /**
  * @title payment_method_satispay
  */
 satispay?: Schemas.payment_method_satispay
 /**
  * @title payment_method_sepa_debit
  */
 sepa_debit?: Schemas.payment_method_sepa_debit
 /**
  * @title payment_method_sofort
  */
 sofort?: Schemas.payment_method_sofort
 /**
  * @title payment_method_swish
  */
 swish?: Schemas.payment_method_swish
 /**
  * @title payment_method_twint
  */
 twint?: Schemas.payment_method_twint
 /**
  * @description The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
  */
 type: ('acss_debit' | 'affirm' | 'afterpay_clearpay' | 'alipay' | 'alma' | 'amazon_pay' | 'au_becs_debit' | 'bacs_debit' | 'bancontact' | 'billie' | 'blik' | 'boleto' | 'card' | 'card_present' | 'cashapp' | 'crypto' | 'customer_balance' | 'eps' | 'fpx' | 'giropay' | 'grabpay' | 'ideal' | 'interac_present' | 'kakao_pay' | 'klarna' | 'konbini' | 'kr_card' | 'link' | 'mobilepay' | 'multibanco' | 'naver_pay' | 'nz_bank_account' | 'oxxo' | 'p24' | 'pay_by_bank' | 'payco' | 'paynow' | 'paypal' | 'pix' | 'promptpay' | 'revolut_pay' | 'samsung_pay' | 'satispay' | 'sepa_debit' | 'sofort' | 'swish' | 'twint' | 'us_bank_account' | 'wechat_pay' | 'zip')
 /**
  * @title payment_method_us_bank_account
  */
 us_bank_account?: Schemas.payment_method_us_bank_account
 /**
  * @title payment_method_wechat_pay
  */
 wechat_pay?: Schemas.payment_method_wechat_pay
 /**
  * @title payment_method_zip
  */
 zip?: Schemas.payment_method_zip
}

/**
 * @title payment_method_acss_debit
 */
export type payment_method_acss_debit = {
 /**
  * @description Name of the bank associated with the bank account.
  */
 bank_name?: string | null
 /**
  * @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  */
 fingerprint?: string | null
 /**
  * @description Institution number of the bank account.
  */
 institution_number?: string | null
 /**
  * @description Last four digits of the bank account number.
  */
 last4?: string | null
 /**
  * @description Transit number of the bank account.
  */
 transit_number?: string | null
}

/**
 * @title payment_method_affirm
 */
export type payment_method_affirm = unknown

/**
 * @title payment_method_afterpay_clearpay
 */
export type payment_method_afterpay_clearpay = unknown

/**
 * @title payment_method_alma
 */
export type payment_method_alma = unknown

/**
 * @title payment_method_amazon_pay
 */
export type payment_method_amazon_pay = unknown

/**
 * @title payment_method_au_becs_debit
 */
export type payment_method_au_becs_debit = {
 /**
  * @description Six-digit number identifying bank and branch associated with this bank account.
  */
 bsb_number?: string | null
 /**
  * @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  */
 fingerprint?: string | null
 /**
  * @description Last four digits of the bank account number.
  */
 last4?: string | null
}

/**
 * @title payment_method_bacs_debit
 */
export type payment_method_bacs_debit = {
 /**
  * @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  */
 fingerprint?: string | null
 /**
  * @description Last four digits of the bank account number.
  */
 last4?: string | null
 /**
  * @description Sort code of the bank account. (e.g., `10-20-30`)
  */
 sort_code?: string | null
}

/**
 * @title payment_method_bancontact
 */
export type payment_method_bancontact = unknown

/**
 * @title payment_method_billie
 */
export type payment_method_billie = unknown

/**
 * @title payment_method_blik
 */
export type payment_method_blik = unknown

/**
 * @title payment_method_boleto
 */
export type payment_method_boleto = {
 /**
  * @description Uniquely identifies the customer tax id (CNPJ or CPF)
  */
 tax_id: string
}

/**
 * @title payment_method_card
 */
export type payment_method_card = {
 /**
  * @description Card brand. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa` or `unknown`.
  */
 brand: string
 /**
  * @description Checks on Card address and CVC if provided.
  */
 checks?: Schemas.payment_method_card_checks | null
 /**
  * @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  */
 country?: string | null
 /**
  * @description The brand to use when displaying the card, this accounts for customer's brand choice on dual-branded cards. Can be `american_express`, `cartes_bancaires`, `diners_club`, `discover`, `eftpos_australia`, `interac`, `jcb`, `mastercard`, `union_pay`, `visa`, or `other` and may contain more values in the future.
  */
 display_brand?: string | null
 /**
  * @description Two-digit number representing the card's expiration month.
  */
 exp_month: number
 /**
  * @description Four-digit number representing the card's expiration year.
  */
 exp_year: number
 /**
  * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  * 
  * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
  */
 fingerprint?: string | null
 /**
  * @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
  */
 funding: string
 /**
  * @description Details of the original PaymentMethod that created this object.
  */
 generated_from?: Schemas.payment_method_card_generated_card | null
 /**
  * @description The last four digits of the card.
  */
 last4: string
 /**
  * @description Contains information about card networks that can be used to process the payment.
  */
 networks?: Schemas.networks | null
 /**
  * @description Status of a card based on the card issuer.
  */
 regulated_status?: ('regulated' | 'unregulated') | null
 /**
  * @description Contains details on how this Card may be used for 3D Secure authentication.
  */
 three_d_secure_usage?: Schemas.three_d_secure_usage | null
 /**
  * @description If this Card is part of a card wallet, this contains the details of the card wallet.
  */
 wallet?: Schemas.payment_method_card_wallet | null
}

/**
 * @title payment_method_card_checks
 */
export type payment_method_card_checks = {
 /**
  * @description If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  */
 address_line1_check?: string | null
 /**
  * @description If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  */
 address_postal_code_check?: string | null
 /**
  * @description If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  */
 cvc_check?: string | null
}

/**
 * @title payment_method_card_generated_card
 */
export type payment_method_card_generated_card = {
 /**
  * @description The charge that created this object.
  */
 charge?: string | null
 /**
  * @description Transaction-specific details of the payment method used in the payment.
  */
 payment_method_details?: Schemas.card_generated_from_payment_method_details | null
 /**
  * @description The ID of the SetupAttempt that generated this PaymentMethod, if any.
  */
 setup_attempt?: (string | Schemas.setup_attempt) | null
}

/**
 * @title payment_method_card_present
 */
export type payment_method_card_present = {
 /**
  * @description Card brand. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa` or `unknown`.
  */
 brand?: string | null
 /**
  * @description The [product code](https://stripe.com/docs/card-product-codes) that identifies the specific program or product associated with a card.
  */
 brand_product?: string | null
 /**
  * @description The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
  */
 cardholder_name?: string | null
 /**
  * @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  */
 country?: string | null
 /**
  * @description A high-level description of the type of cards issued in this range.
  */
 description?: string | null
 /**
  * @description Two-digit number representing the card's expiration month.
  */
 exp_month: number
 /**
  * @description Four-digit number representing the card's expiration year.
  */
 exp_year: number
 /**
  * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  * 
  * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
  */
 fingerprint?: string | null
 /**
  * @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
  */
 funding?: string | null
 /**
  * @description The name of the card's issuing bank.
  */
 issuer?: string | null
 /**
  * @description The last four digits of the card.
  */
 last4?: string | null
 /**
  * @description Contains information about card networks that can be used to process the payment.
  */
 networks?: Schemas.payment_method_card_present_networks | null
 /**
  * @description Details about payment methods collected offline.
  */
 offline?: Schemas.payment_method_details_card_present_offline | null
 /**
  * @description The languages that the issuing bank recommends using for localizing any customer-facing text, as read from the card. Referenced from EMV tag 5F2D, data encoded on the card's chip.
  */
 preferred_locales?: string[] | null
 /**
  * @description How card details were read in this transaction.
  */
 read_method?: ('contact_emv' | 'contactless_emv' | 'contactless_magstripe_mode' | 'magnetic_stripe_fallback' | 'magnetic_stripe_track2') | null
 /**
  * @title PaymentFlowsPrivatePaymentMethodsCardPresentCommonWallet
  */
 wallet?: Schemas.payment_flows_private_payment_methods_card_present_common_wallet
}

/**
 * @title payment_method_card_present_networks
 */
export type payment_method_card_present_networks = {
 /**
  * @description All networks available for selection via [payment_method_options.card.network](/api/payment_intents/confirm#confirm_payment_intent-payment_method_options-card-network).
  */
 available: string[]
 /**
  * @description The preferred network for the card.
  */
 preferred?: string | null
}

/**
 * @title payment_method_card_wallet
 */
export type payment_method_card_wallet = {
 /**
  * @title payment_method_card_wallet_amex_express_checkout
  */
 amex_express_checkout?: Schemas.payment_method_card_wallet_amex_express_checkout
 /**
  * @title payment_method_card_wallet_apple_pay
  */
 apple_pay?: Schemas.payment_method_card_wallet_apple_pay
 /**
  * @description (For tokenized numbers only.) The last four digits of the device account number.
  */
 dynamic_last4?: string | null
 /**
  * @title payment_method_card_wallet_google_pay
  */
 google_pay?: Schemas.payment_method_card_wallet_google_pay
 /**
  * @title payment_method_card_wallet_link
  */
 link?: Schemas.payment_method_card_wallet_link
 /**
  * @title payment_method_card_wallet_masterpass
  */
 masterpass?: Schemas.payment_method_card_wallet_masterpass
 /**
  * @title payment_method_card_wallet_samsung_pay
  */
 samsung_pay?: Schemas.payment_method_card_wallet_samsung_pay
 /**
  * @description The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, `visa_checkout`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
  */
 type: ('amex_express_checkout' | 'apple_pay' | 'google_pay' | 'link' | 'masterpass' | 'samsung_pay' | 'visa_checkout')
 /**
  * @title payment_method_card_wallet_visa_checkout
  */
 visa_checkout?: Schemas.payment_method_card_wallet_visa_checkout
}

/**
 * @title payment_method_card_wallet_amex_express_checkout
 */
export type payment_method_card_wallet_amex_express_checkout = unknown

/**
 * @title payment_method_card_wallet_apple_pay
 */
export type payment_method_card_wallet_apple_pay = unknown

/**
 * @title payment_method_card_wallet_google_pay
 */
export type payment_method_card_wallet_google_pay = unknown

/**
 * @title payment_method_card_wallet_link
 */
export type payment_method_card_wallet_link = unknown

/**
 * @title payment_method_card_wallet_masterpass
 */
export type payment_method_card_wallet_masterpass = {
 /**
  * @description Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 billing_address?: Schemas.address | null
 /**
  * @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 email?: string | null
 /**
  * @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 name?: string | null
 /**
  * @description Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 shipping_address?: Schemas.address | null
}

/**
 * @title payment_method_card_wallet_samsung_pay
 */
export type payment_method_card_wallet_samsung_pay = unknown

/**
 * @title payment_method_card_wallet_visa_checkout
 */
export type payment_method_card_wallet_visa_checkout = {
 /**
  * @description Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 billing_address?: Schemas.address | null
 /**
  * @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 email?: string | null
 /**
  * @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 name?: string | null
 /**
  * @description Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 shipping_address?: Schemas.address | null
}

/**
 * @title payment_method_cashapp
 */
export type payment_method_cashapp = {
 /**
  * @description A unique and immutable identifier assigned by Cash App to every buyer.
  */
 buyer_id?: string | null
 /**
  * @description A public identifier for buyers using Cash App.
  */
 cashtag?: string | null
}

/**
 * @title PaymentMethodConfigBizPaymentMethodConfigurationDetails
 */
export type payment_method_config_biz_payment_method_configuration_details = {
 /**
  * @description ID of the payment method configuration used.
  */
 id: string
 /**
  * @description ID of the parent payment method configuration used.
  */
 parent?: string | null
}

/**
 * @title PaymentMethodConfigResourceDisplayPreference
 */
export type payment_method_config_resource_display_preference = {
 /**
  * @description For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
  */
 overridable?: boolean | null
 /**
  * @description The account's display preference.
  */
 preference: ('none' | 'off' | 'on')
 /**
  * @description The effective display preference value.
  */
 value: ('off' | 'on')
}

/**
 * @title PaymentMethodConfigResourcePaymentMethodProperties
 */
export type payment_method_config_resource_payment_method_properties = {
 /**
  * @description Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
  */
 available: boolean
 /**
  * @title PaymentMethodConfigResourceDisplayPreference
  */
 display_preference: Schemas.payment_method_config_resource_display_preference
}

/**
 * @title PaymentMethodConfigResourcePaymentMethodConfiguration
 * @description PaymentMethodConfigurations control which payment methods are displayed to your customers when you don't explicitly specify payment method types. You can have multiple configurations with different sets of payment methods for different scenarios.
 * 
 * There are two types of PaymentMethodConfigurations. Which is used depends on the [charge type](https://stripe.com/docs/connect/charges):
 * 
 * **Direct** configurations apply to payments created on your account, including Connect destination charges, Connect separate charges and transfers, and payments not involving Connect.
 * 
 * **Child** configurations apply to payments created on your connected accounts using direct charges, and charges with the on_behalf_of parameter.
 * 
 * Child configurations have a `parent` that sets default values and controls which settings connected accounts may override. You can specify a parent ID at payment time, and Stripe will automatically resolve the connected account’s associated child configuration. Parent configurations are [managed in the dashboard](https://dashboard.stripe.com/settings/payment_methods/connected_accounts) and are not available in this API.
 * 
 * Related guides:
 * - [Payment Method Configurations API](https://stripe.com/docs/connect/payment-method-configurations)
 * - [Multiple configurations on dynamic payment methods](https://stripe.com/docs/payments/multiple-payment-method-configs)
 * - [Multiple configurations for your Connect accounts](https://stripe.com/docs/connect/multiple-payment-method-configurations)
 */
export type payment_method_configuration = {
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 acss_debit?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @description Whether the configuration can be used for new payments.
  */
 active: boolean
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 affirm?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 afterpay_clearpay?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 alipay?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 alma?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 amazon_pay?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 apple_pay?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @description For child configs, the Connect application associated with the configuration.
  */
 application?: string | null
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 au_becs_debit?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 bacs_debit?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 bancontact?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 billie?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 blik?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 boleto?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 card?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 cartes_bancaires?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 cashapp?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 customer_balance?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 eps?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 fpx?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 giropay?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 google_pay?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 grabpay?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 ideal?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @description The default configuration is used whenever a payment method configuration is not specified.
  */
 is_default: boolean
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 jcb?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 kakao_pay?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 klarna?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 konbini?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 kr_card?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 link?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 mobilepay?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 multibanco?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @description The configuration's name.
  */
 name: string
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 naver_pay?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 nz_bank_account?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'payment_method_configuration'
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 oxxo?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 p24?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @description For child configs, the configuration's parent configuration.
  */
 parent?: string | null
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 pay_by_bank?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 payco?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 paynow?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 paypal?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 pix?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 promptpay?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 revolut_pay?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 samsung_pay?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 satispay?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 sepa_debit?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 sofort?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 swish?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 twint?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 us_bank_account?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 wechat_pay?: Schemas.payment_method_config_resource_payment_method_properties
 /**
  * @title PaymentMethodConfigResourcePaymentMethodProperties
  */
 zip?: Schemas.payment_method_config_resource_payment_method_properties
}

/**
 * @title payment_method_crypto
 */
export type payment_method_crypto = unknown

/**
 * @title payment_method_customer_balance
 */
export type payment_method_customer_balance = unknown

/**
 * @title payment_method_details
 */
export type payment_method_details = {
 /**
  * @title payment_method_details_ach_credit_transfer
  */
 ach_credit_transfer?: Schemas.payment_method_details_ach_credit_transfer
 /**
  * @title payment_method_details_ach_debit
  */
 ach_debit?: Schemas.payment_method_details_ach_debit
 /**
  * @title payment_method_details_acss_debit
  */
 acss_debit?: Schemas.payment_method_details_acss_debit
 /**
  * @title payment_method_details_affirm
  */
 affirm?: Schemas.payment_method_details_affirm
 /**
  * @title payment_method_details_afterpay_clearpay
  */
 afterpay_clearpay?: Schemas.payment_method_details_afterpay_clearpay
 /**
  * @title PaymentFlowsPrivatePaymentMethodsAlipayDetails
  */
 alipay?: Schemas.payment_flows_private_payment_methods_alipay_details
 /**
  * @title payment_method_details_alma
  */
 alma?: Schemas.payment_method_details_alma
 /**
  * @title payment_method_details_amazon_pay
  */
 amazon_pay?: Schemas.payment_method_details_amazon_pay
 /**
  * @title payment_method_details_au_becs_debit
  */
 au_becs_debit?: Schemas.payment_method_details_au_becs_debit
 /**
  * @title payment_method_details_bacs_debit
  */
 bacs_debit?: Schemas.payment_method_details_bacs_debit
 /**
  * @title payment_method_details_bancontact
  */
 bancontact?: Schemas.payment_method_details_bancontact
 /**
  * @title payment_method_details_billie
  */
 billie?: Schemas.payment_method_details_billie
 /**
  * @title payment_method_details_blik
  */
 blik?: Schemas.payment_method_details_blik
 /**
  * @title payment_method_details_boleto
  */
 boleto?: Schemas.payment_method_details_boleto
 /**
  * @title payment_method_details_card
  */
 card?: Schemas.payment_method_details_card
 /**
  * @title payment_method_details_card_present
  */
 card_present?: Schemas.payment_method_details_card_present
 /**
  * @title payment_method_details_cashapp
  */
 cashapp?: Schemas.payment_method_details_cashapp
 /**
  * @title payment_method_details_crypto
  */
 crypto?: Schemas.payment_method_details_crypto
 /**
  * @title payment_method_details_customer_balance
  */
 customer_balance?: Schemas.payment_method_details_customer_balance
 /**
  * @title payment_method_details_eps
  */
 eps?: Schemas.payment_method_details_eps
 /**
  * @title payment_method_details_fpx
  */
 fpx?: Schemas.payment_method_details_fpx
 /**
  * @title payment_method_details_giropay
  */
 giropay?: Schemas.payment_method_details_giropay
 /**
  * @title payment_method_details_grabpay
  */
 grabpay?: Schemas.payment_method_details_grabpay
 /**
  * @title payment_method_details_ideal
  */
 ideal?: Schemas.payment_method_details_ideal
 /**
  * @title payment_method_details_interac_present
  */
 interac_present?: Schemas.payment_method_details_interac_present
 /**
  * @title payment_method_details_kakao_pay
  */
 kakao_pay?: Schemas.payment_method_details_kakao_pay
 /**
  * @title payment_method_details_klarna
  */
 klarna?: Schemas.payment_method_details_klarna
 /**
  * @title payment_method_details_konbini
  */
 konbini?: Schemas.payment_method_details_konbini
 /**
  * @title payment_method_details_kr_card
  */
 kr_card?: Schemas.payment_method_details_kr_card
 /**
  * @title payment_method_details_link
  */
 link?: Schemas.payment_method_details_link
 /**
  * @title payment_method_details_mobilepay
  */
 mobilepay?: Schemas.payment_method_details_mobilepay
 /**
  * @title payment_method_details_multibanco
  */
 multibanco?: Schemas.payment_method_details_multibanco
 /**
  * @title payment_method_details_naver_pay
  */
 naver_pay?: Schemas.payment_method_details_naver_pay
 /**
  * @title payment_method_details_nz_bank_account
  */
 nz_bank_account?: Schemas.payment_method_details_nz_bank_account
 /**
  * @title payment_method_details_oxxo
  */
 oxxo?: Schemas.payment_method_details_oxxo
 /**
  * @title payment_method_details_p24
  */
 p24?: Schemas.payment_method_details_p24
 /**
  * @title payment_method_details_pay_by_bank
  */
 pay_by_bank?: Schemas.payment_method_details_pay_by_bank
 /**
  * @title payment_method_details_payco
  */
 payco?: Schemas.payment_method_details_payco
 /**
  * @title payment_method_details_paynow
  */
 paynow?: Schemas.payment_method_details_paynow
 /**
  * @title payment_method_details_paypal
  */
 paypal?: Schemas.payment_method_details_paypal
 /**
  * @title payment_method_details_pix
  */
 pix?: Schemas.payment_method_details_pix
 /**
  * @title payment_method_details_promptpay
  */
 promptpay?: Schemas.payment_method_details_promptpay
 /**
  * @title payment_method_details_revolut_pay
  */
 revolut_pay?: Schemas.payment_method_details_revolut_pay
 /**
  * @title payment_method_details_samsung_pay
  */
 samsung_pay?: Schemas.payment_method_details_samsung_pay
 /**
  * @title payment_method_details_satispay
  */
 satispay?: Schemas.payment_method_details_satispay
 /**
  * @title payment_method_details_sepa_debit
  */
 sepa_debit?: Schemas.payment_method_details_sepa_debit
 /**
  * @title payment_method_details_sofort
  */
 sofort?: Schemas.payment_method_details_sofort
 /**
  * @title payment_method_details_stripe_account
  */
 stripe_account?: Schemas.payment_method_details_stripe_account
 /**
  * @title payment_method_details_swish
  */
 swish?: Schemas.payment_method_details_swish
 /**
  * @title payment_method_details_twint
  */
 twint?: Schemas.payment_method_details_twint
 /**
  * @description The type of transaction-specific details of the payment method used in the payment. See [PaymentMethod.type](https://stripe.com/docs/api/payment_methods/object#payment_method_object-type) for the full list of possible types.
  * An additional hash is included on `payment_method_details` with a name matching this value.
  * It contains information specific to the payment method.
  */
 type: string
 /**
  * @title payment_method_details_us_bank_account
  */
 us_bank_account?: Schemas.payment_method_details_us_bank_account
 /**
  * @title payment_method_details_wechat
  */
 wechat?: Schemas.payment_method_details_wechat
 /**
  * @title payment_method_details_wechat_pay
  */
 wechat_pay?: Schemas.payment_method_details_wechat_pay
 /**
  * @title payment_method_details_zip
  */
 zip?: Schemas.payment_method_details_zip
}

/**
 * @title payment_method_details_ach_credit_transfer
 */
export type payment_method_details_ach_credit_transfer = {
 /**
  * @description Account number to transfer funds to.
  */
 account_number?: string | null
 /**
  * @description Name of the bank associated with the routing number.
  */
 bank_name?: string | null
 /**
  * @description Routing transit number for the bank account to transfer funds to.
  */
 routing_number?: string | null
 /**
  * @description SWIFT code of the bank associated with the routing number.
  */
 swift_code?: string | null
}

/**
 * @title payment_method_details_ach_debit
 */
export type payment_method_details_ach_debit = {
 /**
  * @description Type of entity that holds the account. This can be either `individual` or `company`.
  */
 account_holder_type?: ('company' | 'individual') | null
 /**
  * @description Name of the bank associated with the bank account.
  */
 bank_name?: string | null
 /**
  * @description Two-letter ISO code representing the country the bank account is located in.
  */
 country?: string | null
 /**
  * @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  */
 fingerprint?: string | null
 /**
  * @description Last four digits of the bank account number.
  */
 last4?: string | null
 /**
  * @description Routing transit number of the bank account.
  */
 routing_number?: string | null
}

/**
 * @title payment_method_details_acss_debit
 */
export type payment_method_details_acss_debit = {
 /**
  * @description Name of the bank associated with the bank account.
  */
 bank_name?: string | null
 /**
  * @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  */
 fingerprint?: string | null
 /**
  * @description Institution number of the bank account
  */
 institution_number?: string | null
 /**
  * @description Last four digits of the bank account number.
  */
 last4?: string | null
 /**
  * @description ID of the mandate used to make this payment.
  */
 mandate?: string
 /**
  * @description Transit number of the bank account.
  */
 transit_number?: string | null
}

/**
 * @title payment_method_details_affirm
 */
export type payment_method_details_affirm = {
 /**
  * @description ID of the [location](https://stripe.com/docs/api/terminal/locations) that this transaction's reader is assigned to.
  */
 location?: string
 /**
  * @description ID of the [reader](https://stripe.com/docs/api/terminal/readers) this transaction was made on.
  */
 reader?: string
 /**
  * @description The Affirm transaction ID associated with this payment.
  */
 transaction_id?: string | null
}

/**
 * @title payment_method_details_afterpay_clearpay
 */
export type payment_method_details_afterpay_clearpay = {
 /**
  * @description The Afterpay order ID associated with this payment intent.
  */
 order_id?: string | null
 /**
  * @description Order identifier shown to the merchant in Afterpay’s online portal.
  */
 reference?: string | null
}

/**
 * @title payment_method_details_alma
 */
export type payment_method_details_alma = {
 /**
  * @title alma_installments
  */
 installments?: Schemas.alma_installments
 /**
  * @description The Alma transaction ID associated with this payment.
  */
 transaction_id?: string | null
}

/**
 * @title payment_method_details_amazon_pay
 */
export type payment_method_details_amazon_pay = {
 /**
  * @title amazon_pay_underlying_payment_method_funding_details
  */
 funding?: Schemas.amazon_pay_underlying_payment_method_funding_details
 /**
  * @description The Amazon Pay transaction ID associated with this payment.
  */
 transaction_id?: string | null
}

/**
 * @title payment_method_details_au_becs_debit
 */
export type payment_method_details_au_becs_debit = {
 /**
  * @description Bank-State-Branch number of the bank account.
  */
 bsb_number?: string | null
 /**
  * @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  */
 fingerprint?: string | null
 /**
  * @description Last four digits of the bank account number.
  */
 last4?: string | null
 /**
  * @description ID of the mandate used to make this payment.
  */
 mandate?: string
}

/**
 * @title payment_method_details_bacs_debit
 */
export type payment_method_details_bacs_debit = {
 /**
  * @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  */
 fingerprint?: string | null
 /**
  * @description Last four digits of the bank account number.
  */
 last4?: string | null
 /**
  * @description ID of the mandate used to make this payment.
  */
 mandate?: string | null
 /**
  * @description Sort code of the bank account. (e.g., `10-20-30`)
  */
 sort_code?: string | null
}

/**
 * @title payment_method_details_bancontact
 */
export type payment_method_details_bancontact = {
 /**
  * @description Bank code of bank associated with the bank account.
  */
 bank_code?: string | null
 /**
  * @description Name of the bank associated with the bank account.
  */
 bank_name?: string | null
 /**
  * @description Bank Identifier Code of the bank associated with the bank account.
  */
 bic?: string | null
 /**
  * @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
  */
 generated_sepa_debit?: (string | Schemas.payment_method) | null
 /**
  * @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
  */
 generated_sepa_debit_mandate?: (string | Schemas.mandate) | null
 /**
  * @description Last four characters of the IBAN.
  */
 iban_last4?: string | null
 /**
  * @description Preferred language of the Bancontact authorization page that the customer is redirected to.
  * Can be one of `en`, `de`, `fr`, or `nl`
  */
 preferred_language?: ('de' | 'en' | 'fr' | 'nl') | null
 /**
  * @description Owner's verified full name. Values are verified or provided by Bancontact directly
  * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 verified_name?: string | null
}

/**
 * @title payment_method_details_billie
 */
export type payment_method_details_billie = {
 /**
  * @description The Billie transaction ID associated with this payment.
  */
 transaction_id?: string | null
}

/**
 * @title payment_method_details_blik
 */
export type payment_method_details_blik = {
 /**
  * @description A unique and immutable identifier assigned by BLIK to every buyer.
  */
 buyer_id?: string | null
}

/**
 * @title payment_method_details_boleto
 */
export type payment_method_details_boleto = {
 /**
  * @description The tax ID of the customer (CPF for individuals consumers or CNPJ for businesses consumers)
  */
 tax_id: string
}

/**
 * @title payment_method_details_card
 */
export type payment_method_details_card = {
 /**
  * @description The authorized amount.
  */
 amount_authorized?: number | null
 /**
  * @description Authorization code on the charge.
  */
 authorization_code?: string | null
 /**
  * @description Card brand. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa` or `unknown`.
  */
 brand?: string | null
 /**
  * @description When using manual capture, a future timestamp at which the charge will be automatically refunded if uncaptured.
  */
 capture_before?: number
 /**
  * @description Check results by Card networks on Card address and CVC at time of payment.
  */
 checks?: Schemas.payment_method_details_card_checks | null
 /**
  * @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  */
 country?: string | null
 /**
  * @description Two-digit number representing the card's expiration month.
  */
 exp_month: number
 /**
  * @description Four-digit number representing the card's expiration year.
  */
 exp_year: number
 /**
  * @title PaymentFlowsPrivatePaymentMethodsCardDetailsAPIResourceEnterpriseFeaturesExtendedAuthorizationExtendedAuthorization
  */
 extended_authorization?: Schemas.payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_extended_authorization_extended_authorization
 /**
  * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  * 
  * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
  */
 fingerprint?: string | null
 /**
  * @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
  */
 funding?: string | null
 /**
  * @title PaymentFlowsPrivatePaymentMethodsCardDetailsAPIResourceEnterpriseFeaturesIncrementalAuthorizationIncrementalAuthorization
  */
 incremental_authorization?: Schemas.payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_incremental_authorization_incremental_authorization
 /**
  * @description Installment details for this payment.
  * 
  * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
  */
 installments?: Schemas.payment_method_details_card_installments | null
 /**
  * @description The last four digits of the card.
  */
 last4?: string | null
 /**
  * @description ID of the mandate used to make this payment or created by it.
  */
 mandate?: string | null
 /**
  * @title PaymentFlowsPrivatePaymentMethodsCardDetailsAPIResourceMulticapture
  */
 multicapture?: Schemas.payment_flows_private_payment_methods_card_details_api_resource_multicapture
 /**
  * @description Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  */
 network?: string | null
 /**
  * @description If this card has network token credentials, this contains the details of the network token credentials.
  */
 network_token?: Schemas.payment_method_details_card_network_token | null
 /**
  * @description This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. This value will be present if it is returned by the financial network in the authorization response, and null otherwise.
  */
 network_transaction_id?: string | null
 /**
  * @title PaymentFlowsPrivatePaymentMethodsCardDetailsAPIResourceEnterpriseFeaturesOvercaptureOvercapture
  */
 overcapture?: Schemas.payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_overcapture_overcapture
 /**
  * @description Status of a card based on the card issuer.
  */
 regulated_status?: ('regulated' | 'unregulated') | null
 /**
  * @description Populated if this transaction used 3D Secure authentication.
  */
 three_d_secure?: Schemas.three_d_secure_details_charge | null
 /**
  * @description If this Card is part of a card wallet, this contains the details of the card wallet.
  */
 wallet?: Schemas.payment_method_details_card_wallet | null
}

/**
 * @title payment_method_details_card_checks
 */
export type payment_method_details_card_checks = {
 /**
  * @description If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  */
 address_line1_check?: string | null
 /**
  * @description If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  */
 address_postal_code_check?: string | null
 /**
  * @description If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  */
 cvc_check?: string | null
}

/**
 * @title payment_method_details_card_installments
 */
export type payment_method_details_card_installments = {
 /**
  * @description Installment plan selected for the payment.
  */
 plan?: Schemas.payment_method_details_card_installments_plan | null
}

/**
 * @title payment_method_details_card_installments_plan
 */
export type payment_method_details_card_installments_plan = {
 /**
  * @description For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card.
  */
 count?: number | null
 /**
  * @description For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
  * One of `month`.
  */
 interval?: 'month' | null
 /**
  * @description Type of installment plan, one of `fixed_count`, `bonus`, or `revolving`.
  */
 type: ('bonus' | 'fixed_count' | 'revolving')
}

/**
 * @title payment_method_details_card_network_token
 */
export type payment_method_details_card_network_token = {
 /**
  * @description Indicates if Stripe used a network token, either user provided or Stripe managed when processing the transaction.
  */
 used: boolean
}

/**
 * @title payment_method_details_card_present
 */
export type payment_method_details_card_present = {
 /**
  * @description The authorized amount
  */
 amount_authorized?: number | null
 /**
  * @description Card brand. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa` or `unknown`.
  */
 brand?: string | null
 /**
  * @description The [product code](https://stripe.com/docs/card-product-codes) that identifies the specific program or product associated with a card.
  */
 brand_product?: string | null
 /**
  * @description When using manual capture, a future timestamp after which the charge will be automatically refunded if uncaptured.
  */
 capture_before?: number
 /**
  * @description The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
  */
 cardholder_name?: string | null
 /**
  * @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  */
 country?: string | null
 /**
  * @description A high-level description of the type of cards issued in this range.
  */
 description?: string | null
 /**
  * @description Authorization response cryptogram.
  */
 emv_auth_data?: string | null
 /**
  * @description Two-digit number representing the card's expiration month.
  */
 exp_month: number
 /**
  * @description Four-digit number representing the card's expiration year.
  */
 exp_year: number
 /**
  * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  * 
  * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
  */
 fingerprint?: string | null
 /**
  * @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
  */
 funding?: string | null
 /**
  * @description ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
  */
 generated_card?: string | null
 /**
  * @description Whether this [PaymentIntent](https://stripe.com/docs/api/payment_intents) is eligible for incremental authorizations. Request support using [request_incremental_authorization_support](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-request_incremental_authorization_support).
  */
 incremental_authorization_supported: boolean
 /**
  * @description The name of the card's issuing bank.
  */
 issuer?: string | null
 /**
  * @description The last four digits of the card.
  */
 last4?: string | null
 /**
  * @description Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  */
 network?: string | null
 /**
  * @description This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. This value will be present if it is returned by the financial network in the authorization response, and null otherwise.
  */
 network_transaction_id?: string | null
 /**
  * @description Details about payments collected offline.
  */
 offline?: Schemas.payment_method_details_card_present_offline | null
 /**
  * @description Defines whether the authorized amount can be over-captured or not
  */
 overcapture_supported: boolean
 /**
  * @description The languages that the issuing bank recommends using for localizing any customer-facing text, as read from the card. Referenced from EMV tag 5F2D, data encoded on the card's chip.
  */
 preferred_locales?: string[] | null
 /**
  * @description How card details were read in this transaction.
  */
 read_method?: ('contact_emv' | 'contactless_emv' | 'contactless_magstripe_mode' | 'magnetic_stripe_fallback' | 'magnetic_stripe_track2') | null
 /**
  * @description A collection of fields required to be displayed on receipts. Only required for EMV transactions.
  */
 receipt?: Schemas.payment_method_details_card_present_receipt | null
 /**
  * @title PaymentFlowsPrivatePaymentMethodsCardPresentCommonWallet
  */
 wallet?: Schemas.payment_flows_private_payment_methods_card_present_common_wallet
}

/**
 * @title payment_method_details_card_present_offline
 */
export type payment_method_details_card_present_offline = {
 /**
  * @description Time at which the payment was collected while offline
  */
 stored_at?: number | null
 /**
  * @description The method used to process this payment method offline. Only deferred is allowed.
  */
 type?: 'deferred' | null
}

/**
 * @title payment_method_details_card_present_receipt
 */
export type payment_method_details_card_present_receipt = {
 /**
  * @description The type of account being debited or credited
  */
 account_type?: ('checking' | 'credit' | 'prepaid' | 'unknown')
 /**
  * @description The Application Cryptogram, a unique value generated by the card to authenticate the transaction with issuers.
  */
 application_cryptogram?: string | null
 /**
  * @description The Application Identifier (AID) on the card used to determine which networks are eligible to process the transaction. Referenced from EMV tag 9F12, data encoded on the card's chip.
  */
 application_preferred_name?: string | null
 /**
  * @description Identifier for this transaction.
  */
 authorization_code?: string | null
 /**
  * @description EMV tag 8A. A code returned by the card issuer.
  */
 authorization_response_code?: string | null
 /**
  * @description Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`.
  */
 cardholder_verification_method?: string | null
 /**
  * @description Similar to the application_preferred_name, identifying the applications (AIDs) available on the card. Referenced from EMV tag 84.
  */
 dedicated_file_name?: string | null
 /**
  * @description A 5-byte string that records the checks and validations that occur between the card and the terminal. These checks determine how the terminal processes the transaction and what risk tolerance is acceptable. Referenced from EMV Tag 95.
  */
 terminal_verification_results?: string | null
 /**
  * @description An indication of which steps were completed during the card read process. Referenced from EMV Tag 9B.
  */
 transaction_status_information?: string | null
}

/**
 * @title payment_method_details_card_wallet
 */
export type payment_method_details_card_wallet = {
 /**
  * @title payment_method_details_card_wallet_amex_express_checkout
  */
 amex_express_checkout?: Schemas.payment_method_details_card_wallet_amex_express_checkout
 /**
  * @title payment_method_details_card_wallet_apple_pay
  */
 apple_pay?: Schemas.payment_method_details_card_wallet_apple_pay
 /**
  * @description (For tokenized numbers only.) The last four digits of the device account number.
  */
 dynamic_last4?: string | null
 /**
  * @title payment_method_details_card_wallet_google_pay
  */
 google_pay?: Schemas.payment_method_details_card_wallet_google_pay
 /**
  * @title payment_method_details_card_wallet_link
  */
 link?: Schemas.payment_method_details_card_wallet_link
 /**
  * @title payment_method_details_card_wallet_masterpass
  */
 masterpass?: Schemas.payment_method_details_card_wallet_masterpass
 /**
  * @title payment_method_details_card_wallet_samsung_pay
  */
 samsung_pay?: Schemas.payment_method_details_card_wallet_samsung_pay
 /**
  * @description The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, `visa_checkout`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
  */
 type: ('amex_express_checkout' | 'apple_pay' | 'google_pay' | 'link' | 'masterpass' | 'samsung_pay' | 'visa_checkout')
 /**
  * @title payment_method_details_card_wallet_visa_checkout
  */
 visa_checkout?: Schemas.payment_method_details_card_wallet_visa_checkout
}

/**
 * @title payment_method_details_card_wallet_amex_express_checkout
 */
export type payment_method_details_card_wallet_amex_express_checkout = unknown

/**
 * @title payment_method_details_card_wallet_apple_pay
 */
export type payment_method_details_card_wallet_apple_pay = unknown

/**
 * @title payment_method_details_card_wallet_google_pay
 */
export type payment_method_details_card_wallet_google_pay = unknown

/**
 * @title payment_method_details_card_wallet_link
 */
export type payment_method_details_card_wallet_link = unknown

/**
 * @title payment_method_details_card_wallet_masterpass
 */
export type payment_method_details_card_wallet_masterpass = {
 /**
  * @description Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 billing_address?: Schemas.address | null
 /**
  * @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 email?: string | null
 /**
  * @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 name?: string | null
 /**
  * @description Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 shipping_address?: Schemas.address | null
}

/**
 * @title payment_method_details_card_wallet_samsung_pay
 */
export type payment_method_details_card_wallet_samsung_pay = unknown

/**
 * @title payment_method_details_card_wallet_visa_checkout
 */
export type payment_method_details_card_wallet_visa_checkout = {
 /**
  * @description Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 billing_address?: Schemas.address | null
 /**
  * @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 email?: string | null
 /**
  * @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 name?: string | null
 /**
  * @description Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 shipping_address?: Schemas.address | null
}

/**
 * @title payment_method_details_cashapp
 */
export type payment_method_details_cashapp = {
 /**
  * @description A unique and immutable identifier assigned by Cash App to every buyer.
  */
 buyer_id?: string | null
 /**
  * @description A public identifier for buyers using Cash App.
  */
 cashtag?: string | null
 /**
  * @description A unique and immutable identifier of payments assigned by Cash App
  */
 transaction_id?: string | null
}

/**
 * @title payment_method_details_crypto
 */
export type payment_method_details_crypto = {
 /**
  * @description The wallet address of the customer.
  */
 buyer_address?: string
 /**
  * @description The blockchain network that the transaction was sent on.
  */
 network?: ('base' | 'ethereum' | 'polygon')
 /**
  * @description The token currency that the transaction was sent with.
  */
 token_currency?: ('usdc' | 'usdg' | 'usdp')
 /**
  * @description The blockchain transaction hash of the crypto payment.
  */
 transaction_hash?: string
}

/**
 * @title payment_method_details_customer_balance
 */
export type payment_method_details_customer_balance = unknown

/**
 * @title payment_method_details_eps
 */
export type payment_method_details_eps = {
 /**
  * @description The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `deutsche_bank_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
  */
 bank?: ('arzte_und_apotheker_bank' | 'austrian_anadi_bank_ag' | 'bank_austria' | 'bankhaus_carl_spangler' | 'bankhaus_schelhammer_und_schattera_ag' | 'bawag_psk_ag' | 'bks_bank_ag' | 'brull_kallmus_bank_ag' | 'btv_vier_lander_bank' | 'capital_bank_grawe_gruppe_ag' | 'deutsche_bank_ag' | 'dolomitenbank' | 'easybank_ag' | 'erste_bank_und_sparkassen' | 'hypo_alpeadriabank_international_ag' | 'hypo_bank_burgenland_aktiengesellschaft' | 'hypo_noe_lb_fur_niederosterreich_u_wien' | 'hypo_oberosterreich_salzburg_steiermark' | 'hypo_tirol_bank_ag' | 'hypo_vorarlberg_bank_ag' | 'marchfelder_bank' | 'oberbank_ag' | 'raiffeisen_bankengruppe_osterreich' | 'schoellerbank_ag' | 'sparda_bank_wien' | 'volksbank_gruppe' | 'volkskreditbank_ag' | 'vr_bank_braunau') | null
 /**
  * @description Owner's verified full name. Values are verified or provided by EPS directly
  * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  * EPS rarely provides this information so the attribute is usually empty.
  */
 verified_name?: string | null
}

/**
 * @title payment_method_details_fpx
 */
export type payment_method_details_fpx = {
 /**
  * @description The customer's bank. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, `pb_enterprise`, or `bank_of_china`.
  */
 bank: ('affin_bank' | 'agrobank' | 'alliance_bank' | 'ambank' | 'bank_islam' | 'bank_muamalat' | 'bank_of_china' | 'bank_rakyat' | 'bsn' | 'cimb' | 'deutsche_bank' | 'hong_leong_bank' | 'hsbc' | 'kfh' | 'maybank2e' | 'maybank2u' | 'ocbc' | 'pb_enterprise' | 'public_bank' | 'rhb' | 'standard_chartered' | 'uob')
 /**
  * @description Unique transaction id generated by FPX for every request from the merchant
  */
 transaction_id?: string | null
}

/**
 * @title payment_method_details_giropay
 */
export type payment_method_details_giropay = {
 /**
  * @description Bank code of bank associated with the bank account.
  */
 bank_code?: string | null
 /**
  * @description Name of the bank associated with the bank account.
  */
 bank_name?: string | null
 /**
  * @description Bank Identifier Code of the bank associated with the bank account.
  */
 bic?: string | null
 /**
  * @description Owner's verified full name. Values are verified or provided by Giropay directly
  * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  * Giropay rarely provides this information so the attribute is usually empty.
  */
 verified_name?: string | null
}

/**
 * @title payment_method_details_grabpay
 */
export type payment_method_details_grabpay = {
 /**
  * @description Unique transaction id generated by GrabPay
  */
 transaction_id?: string | null
}

/**
 * @title payment_method_details_ideal
 */
export type payment_method_details_ideal = {
 /**
  * @description The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `buut`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`.
  */
 bank?: ('abn_amro' | 'asn_bank' | 'bunq' | 'buut' | 'handelsbanken' | 'ing' | 'knab' | 'moneyou' | 'n26' | 'nn' | 'rabobank' | 'regiobank' | 'revolut' | 'sns_bank' | 'triodos_bank' | 'van_lanschot' | 'yoursafe') | null
 /**
  * @description The Bank Identifier Code of the customer's bank.
  */
 bic?: ('ABNANL2A' | 'ASNBNL21' | 'BITSNL2A' | 'BUNQNL2A' | 'BUUTNL2A' | 'FVLBNL22' | 'HANDNL2A' | 'INGBNL2A' | 'KNABNL2H' | 'MOYONL21' | 'NNBANL2G' | 'NTSBDEB1' | 'RABONL2U' | 'RBRBNL21' | 'REVOIE23' | 'REVOLT21' | 'SNSBNL2A' | 'TRIONL2U') | null
 /**
  * @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
  */
 generated_sepa_debit?: (string | Schemas.payment_method) | null
 /**
  * @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
  */
 generated_sepa_debit_mandate?: (string | Schemas.mandate) | null
 /**
  * @description Last four characters of the IBAN.
  */
 iban_last4?: string | null
 /**
  * @description Owner's verified full name. Values are verified or provided by iDEAL directly
  * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 verified_name?: string | null
}

/**
 * @title payment_method_details_interac_present
 */
export type payment_method_details_interac_present = {
 /**
  * @description Card brand. Can be `interac`, `mastercard` or `visa`.
  */
 brand?: string | null
 /**
  * @description The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
  */
 cardholder_name?: string | null
 /**
  * @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  */
 country?: string | null
 /**
  * @description A high-level description of the type of cards issued in this range.
  */
 description?: string | null
 /**
  * @description Authorization response cryptogram.
  */
 emv_auth_data?: string | null
 /**
  * @description Two-digit number representing the card's expiration month.
  */
 exp_month: number
 /**
  * @description Four-digit number representing the card's expiration year.
  */
 exp_year: number
 /**
  * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  * 
  * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
  */
 fingerprint?: string | null
 /**
  * @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
  */
 funding?: string | null
 /**
  * @description ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
  */
 generated_card?: string | null
 /**
  * @description The name of the card's issuing bank.
  */
 issuer?: string | null
 /**
  * @description The last four digits of the card.
  */
 last4?: string | null
 /**
  * @description Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  */
 network?: string | null
 /**
  * @description This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. This value will be present if it is returned by the financial network in the authorization response, and null otherwise.
  */
 network_transaction_id?: string | null
 /**
  * @description The languages that the issuing bank recommends using for localizing any customer-facing text, as read from the card. Referenced from EMV tag 5F2D, data encoded on the card's chip.
  */
 preferred_locales?: string[] | null
 /**
  * @description How card details were read in this transaction.
  */
 read_method?: ('contact_emv' | 'contactless_emv' | 'contactless_magstripe_mode' | 'magnetic_stripe_fallback' | 'magnetic_stripe_track2') | null
 /**
  * @description A collection of fields required to be displayed on receipts. Only required for EMV transactions.
  */
 receipt?: Schemas.payment_method_details_interac_present_receipt | null
}

/**
 * @title payment_method_details_interac_present_receipt
 */
export type payment_method_details_interac_present_receipt = {
 /**
  * @description The type of account being debited or credited
  */
 account_type?: ('checking' | 'savings' | 'unknown')
 /**
  * @description The Application Cryptogram, a unique value generated by the card to authenticate the transaction with issuers.
  */
 application_cryptogram?: string | null
 /**
  * @description The Application Identifier (AID) on the card used to determine which networks are eligible to process the transaction. Referenced from EMV tag 9F12, data encoded on the card's chip.
  */
 application_preferred_name?: string | null
 /**
  * @description Identifier for this transaction.
  */
 authorization_code?: string | null
 /**
  * @description EMV tag 8A. A code returned by the card issuer.
  */
 authorization_response_code?: string | null
 /**
  * @description Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`.
  */
 cardholder_verification_method?: string | null
 /**
  * @description Similar to the application_preferred_name, identifying the applications (AIDs) available on the card. Referenced from EMV tag 84.
  */
 dedicated_file_name?: string | null
 /**
  * @description A 5-byte string that records the checks and validations that occur between the card and the terminal. These checks determine how the terminal processes the transaction and what risk tolerance is acceptable. Referenced from EMV Tag 95.
  */
 terminal_verification_results?: string | null
 /**
  * @description An indication of which steps were completed during the card read process. Referenced from EMV Tag 9B.
  */
 transaction_status_information?: string | null
}

/**
 * @title payment_method_details_kakao_pay
 */
export type payment_method_details_kakao_pay = {
 /**
  * @description A unique identifier for the buyer as determined by the local payment processor.
  */
 buyer_id?: string | null
 /**
  * @description The Kakao Pay transaction ID associated with this payment.
  */
 transaction_id?: string | null
}

/**
 * @title payment_method_details_klarna
 */
export type payment_method_details_klarna = {
 /**
  * @description The payer details for this transaction.
  */
 payer_details?: Schemas.klarna_payer_details | null
 /**
  * @description The Klarna payment method used for this transaction.
  * Can be one of `pay_later`, `pay_now`, `pay_with_financing`, or `pay_in_installments`
  */
 payment_method_category?: string | null
 /**
  * @description Preferred language of the Klarna authorization page that the customer is redirected to.
  * Can be one of `de-AT`, `en-AT`, `nl-BE`, `fr-BE`, `en-BE`, `de-DE`, `en-DE`, `da-DK`, `en-DK`, `es-ES`, `en-ES`, `fi-FI`, `sv-FI`, `en-FI`, `en-GB`, `en-IE`, `it-IT`, `en-IT`, `nl-NL`, `en-NL`, `nb-NO`, `en-NO`, `sv-SE`, `en-SE`, `en-US`, `es-US`, `fr-FR`, `en-FR`, `cs-CZ`, `en-CZ`, `ro-RO`, `en-RO`, `el-GR`, `en-GR`, `en-AU`, `en-NZ`, `en-CA`, `fr-CA`, `pl-PL`, `en-PL`, `pt-PT`, `en-PT`, `de-CH`, `fr-CH`, `it-CH`, or `en-CH`
  */
 preferred_locale?: string | null
}

/**
 * @title payment_method_details_konbini
 */
export type payment_method_details_konbini = {
 /**
  * @description If the payment succeeded, this contains the details of the convenience store where the payment was completed.
  */
 store?: Schemas.payment_method_details_konbini_store | null
}

/**
 * @title payment_method_details_konbini_store
 */
export type payment_method_details_konbini_store = {
 /**
  * @description The name of the convenience store chain where the payment was completed.
  */
 chain?: ('familymart' | 'lawson' | 'ministop' | 'seicomart') | null
}

/**
 * @title payment_method_details_kr_card
 */
export type payment_method_details_kr_card = {
 /**
  * @description The local credit or debit card brand.
  */
 brand?: ('bc' | 'citi' | 'hana' | 'hyundai' | 'jeju' | 'jeonbuk' | 'kakaobank' | 'kbank' | 'kdbbank' | 'kookmin' | 'kwangju' | 'lotte' | 'mg' | 'nh' | 'post' | 'samsung' | 'savingsbank' | 'shinhan' | 'shinhyup' | 'suhyup' | 'tossbank' | 'woori') | null
 /**
  * @description A unique identifier for the buyer as determined by the local payment processor.
  */
 buyer_id?: string | null
 /**
  * @description The last four digits of the card. This may not be present for American Express cards.
  */
 last4?: string | null
 /**
  * @description The Korean Card transaction ID associated with this payment.
  */
 transaction_id?: string | null
}

/**
 * @title payment_method_details_link
 */
export type payment_method_details_link = {
 /**
  * @description Two-letter ISO code representing the funding source country beneath the Link payment.
  * You could use this attribute to get a sense of international fees.
  */
 country?: string | null
}

/**
 * @title payment_method_details_mobilepay
 */
export type payment_method_details_mobilepay = {
 /**
  * @description Internal card details
  */
 card?: Schemas.internal_card | null
}

/**
 * @title payment_method_details_multibanco
 */
export type payment_method_details_multibanco = {
 /**
  * @description Entity number associated with this Multibanco payment.
  */
 entity?: string | null
 /**
  * @description Reference number associated with this Multibanco payment.
  */
 reference?: string | null
}

/**
 * @title payment_method_details_naver_pay
 */
export type payment_method_details_naver_pay = {
 /**
  * @description A unique identifier for the buyer as determined by the local payment processor.
  */
 buyer_id?: string | null
 /**
  * @description The Naver Pay transaction ID associated with this payment.
  */
 transaction_id?: string | null
}

/**
 * @title payment_method_details_nz_bank_account
 */
export type payment_method_details_nz_bank_account = {
 /**
  * @description The name on the bank account. Only present if the account holder name is different from the name of the authorized signatory collected in the PaymentMethod’s billing details.
  */
 account_holder_name?: string | null
 /**
  * @description The numeric code for the bank account's bank.
  */
 bank_code: string
 /**
  * @description The name of the bank.
  */
 bank_name: string
 /**
  * @description The numeric code for the bank account's bank branch.
  */
 branch_code: string
 /**
  * @description Last four digits of the bank account number.
  */
 last4: string
 /**
  * @description The suffix of the bank account number.
  */
 suffix?: string | null
}

/**
 * @title payment_method_details_oxxo
 */
export type payment_method_details_oxxo = {
 /**
  * @description OXXO reference number
  */
 number?: string | null
}

/**
 * @title payment_method_details_p24
 */
export type payment_method_details_p24 = {
 /**
  * @description The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `velobank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`.
  */
 bank?: ('alior_bank' | 'bank_millennium' | 'bank_nowy_bfg_sa' | 'bank_pekao_sa' | 'banki_spbdzielcze' | 'blik' | 'bnp_paribas' | 'boz' | 'citi_handlowy' | 'credit_agricole' | 'envelobank' | 'etransfer_pocztowy24' | 'getin_bank' | 'ideabank' | 'ing' | 'inteligo' | 'mbank_mtransfer' | 'nest_przelew' | 'noble_pay' | 'pbac_z_ipko' | 'plus_bank' | 'santander_przelew24' | 'tmobile_usbugi_bankowe' | 'toyota_bank' | 'velobank' | 'volkswagen_bank') | null
 /**
  * @description Unique reference for this Przelewy24 payment.
  */
 reference?: string | null
 /**
  * @description Owner's verified full name. Values are verified or provided by Przelewy24 directly
  * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  * Przelewy24 rarely provides this information so the attribute is usually empty.
  */
 verified_name?: string | null
}

/**
 * @title payment_method_details_passthrough_card
 */
export type payment_method_details_passthrough_card = {
 /**
  * @description Card brand. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa` or `unknown`.
  */
 brand?: string | null
 /**
  * @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  */
 country?: string | null
 /**
  * @description Two-digit number representing the card's expiration month.
  */
 exp_month?: number | null
 /**
  * @description Four-digit number representing the card's expiration year.
  */
 exp_year?: number | null
 /**
  * @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
  */
 funding?: string | null
 /**
  * @description The last four digits of the card.
  */
 last4?: string | null
}

/**
 * @title payment_method_details_pay_by_bank
 */
export type payment_method_details_pay_by_bank = unknown

/**
 * @title payment_method_details_payco
 */
export type payment_method_details_payco = {
 /**
  * @description A unique identifier for the buyer as determined by the local payment processor.
  */
 buyer_id?: string | null
 /**
  * @description The Payco transaction ID associated with this payment.
  */
 transaction_id?: string | null
}

/**
 * @title payment_method_details_paynow
 */
export type payment_method_details_paynow = {
 /**
  * @description ID of the [location](https://stripe.com/docs/api/terminal/locations) that this transaction's reader is assigned to.
  */
 location?: string
 /**
  * @description ID of the [reader](https://stripe.com/docs/api/terminal/readers) this transaction was made on.
  */
 reader?: string
 /**
  * @description Reference number associated with this PayNow payment
  */
 reference?: string | null
}

/**
 * @title payment_method_details_paypal
 */
export type payment_method_details_paypal = {
 /**
  * @description Two-letter ISO code representing the buyer's country. Values are provided by PayPal directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 country?: string | null
 /**
  * @description Owner's email. Values are provided by PayPal directly
  * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 payer_email?: string | null
 /**
  * @description PayPal account PayerID. This identifier uniquely identifies the PayPal customer.
  */
 payer_id?: string | null
 /**
  * @description Owner's full name. Values provided by PayPal directly
  * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 payer_name?: string | null
 /**
  * @description The level of protection offered as defined by PayPal Seller Protection for Merchants, for this transaction.
  */
 seller_protection?: Schemas.paypal_seller_protection | null
 /**
  * @description A unique ID generated by PayPal for this transaction.
  */
 transaction_id?: string | null
}

/**
 * @title payment_method_details_pix
 */
export type payment_method_details_pix = {
 /**
  * @description Unique transaction id generated by BCB
  */
 bank_transaction_id?: string | null
}

/**
 * @title payment_method_details_promptpay
 */
export type payment_method_details_promptpay = {
 /**
  * @description Bill reference generated by PromptPay
  */
 reference?: string | null
}

/**
 * @title payment_method_details_revolut_pay
 */
export type payment_method_details_revolut_pay = {
 /**
  * @title revolut_pay_underlying_payment_method_funding_details
  */
 funding?: Schemas.revolut_pay_underlying_payment_method_funding_details
 /**
  * @description The Revolut Pay transaction ID associated with this payment.
  */
 transaction_id?: string | null
}

/**
 * @title payment_method_details_samsung_pay
 */
export type payment_method_details_samsung_pay = {
 /**
  * @description A unique identifier for the buyer as determined by the local payment processor.
  */
 buyer_id?: string | null
 /**
  * @description The Samsung Pay transaction ID associated with this payment.
  */
 transaction_id?: string | null
}

/**
 * @title payment_method_details_satispay
 */
export type payment_method_details_satispay = {
 /**
  * @description The Satispay transaction ID associated with this payment.
  */
 transaction_id?: string | null
}

/**
 * @title payment_method_details_sepa_debit
 */
export type payment_method_details_sepa_debit = {
 /**
  * @description Bank code of bank associated with the bank account.
  */
 bank_code?: string | null
 /**
  * @description Branch code of bank associated with the bank account.
  */
 branch_code?: string | null
 /**
  * @description Two-letter ISO code representing the country the bank account is located in.
  */
 country?: string | null
 /**
  * @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  */
 fingerprint?: string | null
 /**
  * @description Last four characters of the IBAN.
  */
 last4?: string | null
 /**
  * @description Find the ID of the mandate used for this payment under the [payment_method_details.sepa_debit.mandate](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-sepa_debit-mandate) property on the Charge. Use this mandate ID to [retrieve the Mandate](https://stripe.com/docs/api/mandates/retrieve).
  */
 mandate?: string | null
}

/**
 * @title payment_method_details_sofort
 */
export type payment_method_details_sofort = {
 /**
  * @description Bank code of bank associated with the bank account.
  */
 bank_code?: string | null
 /**
  * @description Name of the bank associated with the bank account.
  */
 bank_name?: string | null
 /**
  * @description Bank Identifier Code of the bank associated with the bank account.
  */
 bic?: string | null
 /**
  * @description Two-letter ISO code representing the country the bank account is located in.
  */
 country?: string | null
 /**
  * @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
  */
 generated_sepa_debit?: (string | Schemas.payment_method) | null
 /**
  * @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
  */
 generated_sepa_debit_mandate?: (string | Schemas.mandate) | null
 /**
  * @description Last four characters of the IBAN.
  */
 iban_last4?: string | null
 /**
  * @description Preferred language of the SOFORT authorization page that the customer is redirected to.
  * Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
  */
 preferred_language?: ('de' | 'en' | 'es' | 'fr' | 'it' | 'nl' | 'pl') | null
 /**
  * @description Owner's verified full name. Values are verified or provided by SOFORT directly
  * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 verified_name?: string | null
}

/**
 * @title payment_method_details_stripe_account
 */
export type payment_method_details_stripe_account = unknown

/**
 * @title payment_method_details_swish
 */
export type payment_method_details_swish = {
 /**
  * @description Uniquely identifies the payer's Swish account. You can use this attribute to check whether two Swish transactions were paid for by the same payer
  */
 fingerprint?: string | null
 /**
  * @description Payer bank reference number for the payment
  */
 payment_reference?: string | null
 /**
  * @description The last four digits of the Swish account phone number
  */
 verified_phone_last4?: string | null
}

/**
 * @title payment_method_details_twint
 */
export type payment_method_details_twint = unknown

/**
 * @title payment_method_details_us_bank_account
 */
export type payment_method_details_us_bank_account = {
 /**
  * @description Account holder type: individual or company.
  */
 account_holder_type?: ('company' | 'individual') | null
 /**
  * @description Account type: checkings or savings. Defaults to checking if omitted.
  */
 account_type?: ('checking' | 'savings') | null
 /**
  * @description Name of the bank associated with the bank account.
  */
 bank_name?: string | null
 /**
  * @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  */
 fingerprint?: string | null
 /**
  * @description Last four digits of the bank account number.
  */
 last4?: string | null
 /**
  * @description ID of the mandate used to make this payment.
  */
 mandate?: (string | Schemas.mandate)
 /**
  * @description Reference number to locate ACH payments with customer's bank.
  */
 payment_reference?: string | null
 /**
  * @description Routing number of the bank account.
  */
 routing_number?: string | null
}

/**
 * @title payment_method_details_wechat
 */
export type payment_method_details_wechat = unknown

/**
 * @title payment_method_details_wechat_pay
 */
export type payment_method_details_wechat_pay = {
 /**
  * @description Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same.
  */
 fingerprint?: string | null
 /**
  * @description ID of the [location](https://stripe.com/docs/api/terminal/locations) that this transaction's reader is assigned to.
  */
 location?: string
 /**
  * @description ID of the [reader](https://stripe.com/docs/api/terminal/readers) this transaction was made on.
  */
 reader?: string
 /**
  * @description Transaction ID of this particular WeChat Pay transaction.
  */
 transaction_id?: string | null
}

/**
 * @title payment_method_details_zip
 */
export type payment_method_details_zip = unknown

/**
 * @title PaymentMethodDomainResourcePaymentMethodDomain
 * @description A payment method domain represents a web domain that you have registered with Stripe.
 * Stripe Elements use registered payment method domains to control where certain payment methods are shown.
 * 
 * Related guide: [Payment method domains](https://stripe.com/docs/payments/payment-methods/pmd-registration).
 */
export type payment_method_domain = {
 /**
  * @title PaymentMethodDomainResourcePaymentMethodStatus
  * @description Indicates the status of a specific payment method on a payment method domain.
  */
 amazon_pay: Schemas.payment_method_domain_resource_payment_method_status
 /**
  * @title PaymentMethodDomainResourcePaymentMethodStatus
  * @description Indicates the status of a specific payment method on a payment method domain.
  */
 apple_pay: Schemas.payment_method_domain_resource_payment_method_status
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description The domain name that this payment method domain object represents.
  */
 domain_name: string
 /**
  * @description Whether this payment method domain is enabled. If the domain is not enabled, payment methods that require a payment method domain will not appear in Elements.
  */
 enabled: boolean
 /**
  * @title PaymentMethodDomainResourcePaymentMethodStatus
  * @description Indicates the status of a specific payment method on a payment method domain.
  */
 google_pay: Schemas.payment_method_domain_resource_payment_method_status
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @title PaymentMethodDomainResourcePaymentMethodStatus
  * @description Indicates the status of a specific payment method on a payment method domain.
  */
 klarna: Schemas.payment_method_domain_resource_payment_method_status
 /**
  * @title PaymentMethodDomainResourcePaymentMethodStatus
  * @description Indicates the status of a specific payment method on a payment method domain.
  */
 link: Schemas.payment_method_domain_resource_payment_method_status
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'payment_method_domain'
 /**
  * @title PaymentMethodDomainResourcePaymentMethodStatus
  * @description Indicates the status of a specific payment method on a payment method domain.
  */
 paypal: Schemas.payment_method_domain_resource_payment_method_status
}

/**
 * @title PaymentMethodDomainResourcePaymentMethodStatus
 * @description Indicates the status of a specific payment method on a payment method domain.
 */
export type payment_method_domain_resource_payment_method_status = {
 /**
  * @description The status of the payment method on the domain.
  */
 status: ('active' | 'inactive')
 /**
  * @title PaymentMethodDomainResourcePaymentMethodStatusDetails
  * @description Contains additional details about the status of a payment method for a specific payment method domain.
  */
 status_details?: Schemas.payment_method_domain_resource_payment_method_status_details
}

/**
 * @title PaymentMethodDomainResourcePaymentMethodStatusDetails
 * @description Contains additional details about the status of a payment method for a specific payment method domain.
 */
export type payment_method_domain_resource_payment_method_status_details = {
 /**
  * @description The error message associated with the status of the payment method on the domain.
  */
 error_message: string
}

/**
 * @title payment_method_eps
 */
export type payment_method_eps = {
 /**
  * @description The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `deutsche_bank_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
  */
 bank?: ('arzte_und_apotheker_bank' | 'austrian_anadi_bank_ag' | 'bank_austria' | 'bankhaus_carl_spangler' | 'bankhaus_schelhammer_und_schattera_ag' | 'bawag_psk_ag' | 'bks_bank_ag' | 'brull_kallmus_bank_ag' | 'btv_vier_lander_bank' | 'capital_bank_grawe_gruppe_ag' | 'deutsche_bank_ag' | 'dolomitenbank' | 'easybank_ag' | 'erste_bank_und_sparkassen' | 'hypo_alpeadriabank_international_ag' | 'hypo_bank_burgenland_aktiengesellschaft' | 'hypo_noe_lb_fur_niederosterreich_u_wien' | 'hypo_oberosterreich_salzburg_steiermark' | 'hypo_tirol_bank_ag' | 'hypo_vorarlberg_bank_ag' | 'marchfelder_bank' | 'oberbank_ag' | 'raiffeisen_bankengruppe_osterreich' | 'schoellerbank_ag' | 'sparda_bank_wien' | 'volksbank_gruppe' | 'volkskreditbank_ag' | 'vr_bank_braunau') | null
}

/**
 * @title payment_method_fpx
 */
export type payment_method_fpx = {
 /**
  * @description The customer's bank, if provided. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, `pb_enterprise`, or `bank_of_china`.
  */
 bank: ('affin_bank' | 'agrobank' | 'alliance_bank' | 'ambank' | 'bank_islam' | 'bank_muamalat' | 'bank_of_china' | 'bank_rakyat' | 'bsn' | 'cimb' | 'deutsche_bank' | 'hong_leong_bank' | 'hsbc' | 'kfh' | 'maybank2e' | 'maybank2u' | 'ocbc' | 'pb_enterprise' | 'public_bank' | 'rhb' | 'standard_chartered' | 'uob')
}

/**
 * @title payment_method_giropay
 */
export type payment_method_giropay = unknown

/**
 * @title payment_method_grabpay
 */
export type payment_method_grabpay = unknown

/**
 * @title payment_method_ideal
 */
export type payment_method_ideal = {
 /**
  * @description The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `buut`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`.
  */
 bank?: ('abn_amro' | 'asn_bank' | 'bunq' | 'buut' | 'handelsbanken' | 'ing' | 'knab' | 'moneyou' | 'n26' | 'nn' | 'rabobank' | 'regiobank' | 'revolut' | 'sns_bank' | 'triodos_bank' | 'van_lanschot' | 'yoursafe') | null
 /**
  * @description The Bank Identifier Code of the customer's bank, if the bank was provided.
  */
 bic?: ('ABNANL2A' | 'ASNBNL21' | 'BITSNL2A' | 'BUNQNL2A' | 'BUUTNL2A' | 'FVLBNL22' | 'HANDNL2A' | 'INGBNL2A' | 'KNABNL2H' | 'MOYONL21' | 'NNBANL2G' | 'NTSBDEB1' | 'RABONL2U' | 'RBRBNL21' | 'REVOIE23' | 'REVOLT21' | 'SNSBNL2A' | 'TRIONL2U') | null
}

/**
 * @title payment_method_interac_present
 */
export type payment_method_interac_present = {
 /**
  * @description Card brand. Can be `interac`, `mastercard` or `visa`.
  */
 brand?: string | null
 /**
  * @description The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
  */
 cardholder_name?: string | null
 /**
  * @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  */
 country?: string | null
 /**
  * @description A high-level description of the type of cards issued in this range.
  */
 description?: string | null
 /**
  * @description Two-digit number representing the card's expiration month.
  */
 exp_month: number
 /**
  * @description Four-digit number representing the card's expiration year.
  */
 exp_year: number
 /**
  * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  * 
  * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
  */
 fingerprint?: string | null
 /**
  * @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
  */
 funding?: string | null
 /**
  * @description The name of the card's issuing bank.
  */
 issuer?: string | null
 /**
  * @description The last four digits of the card.
  */
 last4?: string | null
 /**
  * @description Contains information about card networks that can be used to process the payment.
  */
 networks?: Schemas.payment_method_card_present_networks | null
 /**
  * @description The languages that the issuing bank recommends using for localizing any customer-facing text, as read from the card. Referenced from EMV tag 5F2D, data encoded on the card's chip.
  */
 preferred_locales?: string[] | null
 /**
  * @description How card details were read in this transaction.
  */
 read_method?: ('contact_emv' | 'contactless_emv' | 'contactless_magstripe_mode' | 'magnetic_stripe_fallback' | 'magnetic_stripe_track2') | null
}

/**
 * @title payment_method_kakao_pay
 */
export type payment_method_kakao_pay = unknown

/**
 * @title payment_method_klarna
 */
export type payment_method_klarna = {
 /**
  * @description The customer's date of birth, if provided.
  */
 dob?: Schemas.payment_flows_private_payment_methods_klarna_dob | null
}

/**
 * @title payment_method_konbini
 */
export type payment_method_konbini = unknown

/**
 * @title payment_method_kr_card
 */
export type payment_method_kr_card = {
 /**
  * @description The local credit or debit card brand.
  */
 brand?: ('bc' | 'citi' | 'hana' | 'hyundai' | 'jeju' | 'jeonbuk' | 'kakaobank' | 'kbank' | 'kdbbank' | 'kookmin' | 'kwangju' | 'lotte' | 'mg' | 'nh' | 'post' | 'samsung' | 'savingsbank' | 'shinhan' | 'shinhyup' | 'suhyup' | 'tossbank' | 'woori') | null
 /**
  * @description The last four digits of the card. This may not be present for American Express cards.
  */
 last4?: string | null
}

/**
 * @title payment_method_link
 */
export type payment_method_link = {
 /**
  * @description Account owner's email address.
  */
 email?: string | null
}

/**
 * @title payment_method_mobilepay
 */
export type payment_method_mobilepay = unknown

/**
 * @title payment_method_multibanco
 */
export type payment_method_multibanco = unknown

/**
 * @title payment_method_naver_pay
 */
export type payment_method_naver_pay = {
 /**
  * @description Uniquely identifies this particular Naver Pay account. You can use this attribute to check whether two Naver Pay accounts are the same.
  */
 buyer_id?: string | null
 /**
  * @description Whether to fund this transaction with Naver Pay points or a card.
  */
 funding: ('card' | 'points')
}

/**
 * @title payment_method_nz_bank_account
 */
export type payment_method_nz_bank_account = {
 /**
  * @description The name on the bank account. Only present if the account holder name is different from the name of the authorized signatory collected in the PaymentMethod’s billing details.
  */
 account_holder_name?: string | null
 /**
  * @description The numeric code for the bank account's bank.
  */
 bank_code: string
 /**
  * @description The name of the bank.
  */
 bank_name: string
 /**
  * @description The numeric code for the bank account's bank branch.
  */
 branch_code: string
 /**
  * @description Last four digits of the bank account number.
  */
 last4: string
 /**
  * @description The suffix of the bank account number.
  */
 suffix?: string | null
}

/**
 * @title payment_method_options_affirm
 */
export type payment_method_options_affirm = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
 /**
  * @description Preferred language of the Affirm authorization page that the customer is redirected to.
  */
 preferred_locale?: string
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_method_options_afterpay_clearpay
 */
export type payment_method_options_afterpay_clearpay = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
 /**
  * @description An internal identifier or reference that this payment corresponds to. You must limit the identifier to 128 characters, and it can only contain letters, numbers, underscores, backslashes, and dashes.
  * This field differs from the statement descriptor and item name.
  */
 reference?: string | null
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_method_options_alipay
 */
export type payment_method_options_alipay = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session')
}

/**
 * @title payment_method_options_alma
 */
export type payment_method_options_alma = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
}

/**
 * @title payment_method_options_amazon_pay
 */
export type payment_method_options_amazon_pay = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session')
}

/**
 * @title payment_method_options_bancontact
 */
export type payment_method_options_bancontact = {
 /**
  * @description Preferred language of the Bancontact authorization page that the customer is redirected to.
  */
 preferred_language: ('de' | 'en' | 'fr' | 'nl')
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session')
}

/**
 * @title payment_method_options_billie
 */
export type payment_method_options_billie = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
}

/**
 * @title payment_method_options_boleto
 */
export type payment_method_options_boleto = {
 /**
  * @description The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time.
  */
 expires_after_days: number
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session' | 'on_session')
}

/**
 * @title payment_method_options_card_installments
 */
export type payment_method_options_card_installments = {
 /**
  * @description Installment plans that may be selected for this PaymentIntent.
  */
 available_plans?: Schemas.payment_method_details_card_installments_plan[] | null
 /**
  * @description Whether Installments are enabled for this PaymentIntent.
  */
 enabled: boolean
 /**
  * @description Installment plan selected for this PaymentIntent.
  */
 plan?: Schemas.payment_method_details_card_installments_plan | null
}

/**
 * @title payment_method_options_card_mandate_options
 */
export type payment_method_options_card_mandate_options = {
 /**
  * @description Amount to be charged for future payments.
  */
 amount: number
 /**
  * @description One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
  */
 amount_type: ('fixed' | 'maximum')
 /**
  * @description A description of the mandate or subscription that is meant to be displayed to the customer.
  */
 description?: string | null
 /**
  * @description End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date.
  */
 end_date?: number | null
 /**
  * @description Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`.
  */
 interval: ('day' | 'month' | 'sporadic' | 'week' | 'year')
 /**
  * @description The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`.
  */
 interval_count?: number | null
 /**
  * @description Unique identifier for the mandate or subscription.
  */
 reference: string
 /**
  * @description Start date of the mandate or subscription. Start date should not be lesser than yesterday.
  */
 start_date: number
 /**
  * @description Specifies the type of mandates supported. Possible values are `india`.
  */
 supported_types?: 'india'[] | null
}

/**
 * @title payment_method_options_card_present
 */
export type payment_method_options_card_present = {
 /**
  * @description Request ability to capture this payment beyond the standard [authorization validity window](https://stripe.com/docs/terminal/features/extended-authorizations#authorization-validity)
  */
 request_extended_authorization?: boolean | null
 /**
  * @description Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support.
  */
 request_incremental_authorization_support?: boolean | null
 /**
  * @title payment_method_options_card_present_routing
  */
 routing?: Schemas.payment_method_options_card_present_routing
}

/**
 * @title payment_method_options_card_present_routing
 */
export type payment_method_options_card_present_routing = {
 /**
  * @description Requested routing priority
  */
 requested_priority?: ('domestic' | 'international') | null
}

/**
 * @title payment_method_options_cashapp
 */
export type payment_method_options_cashapp = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session' | 'on_session')
}

/**
 * @title payment_method_options_crypto
 */
export type payment_method_options_crypto = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_method_options_customer_balance
 */
export type payment_method_options_customer_balance = {
 /**
  * @title payment_method_options_customer_balance_bank_transfer
  */
 bank_transfer?: Schemas.payment_method_options_customer_balance_bank_transfer
 /**
  * @description The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
  */
 funding_type?: 'bank_transfer' | null
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_method_options_customer_balance_bank_transfer
 */
export type payment_method_options_customer_balance_bank_transfer = {
 /**
  * @title payment_method_options_customer_balance_eu_bank_account
  */
 eu_bank_transfer?: Schemas.payment_method_options_customer_balance_eu_bank_account
 /**
  * @description List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned.
  * 
  * Permitted values include: `sort_code`, `zengin`, `iban`, or `spei`.
  */
 requested_address_types?: ('aba' | 'iban' | 'sepa' | 'sort_code' | 'spei' | 'swift' | 'zengin')[]
 /**
  * @description The bank transfer type that this PaymentIntent is allowed to use for funding Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
  */
 type?: ('eu_bank_transfer' | 'gb_bank_transfer' | 'jp_bank_transfer' | 'mx_bank_transfer' | 'us_bank_transfer') | null
}

/**
 * @title payment_method_options_customer_balance_eu_bank_account
 */
export type payment_method_options_customer_balance_eu_bank_account = {
 /**
  * @description The desired country code of the bank account information. Permitted values include: `BE`, `DE`, `ES`, `FR`, `IE`, or `NL`.
  */
 country: ('BE' | 'DE' | 'ES' | 'FR' | 'IE' | 'NL')
}

/**
 * @title payment_method_options_fpx
 */
export type payment_method_options_fpx = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_method_options_giropay
 */
export type payment_method_options_giropay = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_method_options_grabpay
 */
export type payment_method_options_grabpay = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_method_options_ideal
 */
export type payment_method_options_ideal = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session')
}

/**
 * @title payment_method_options_interac_present
 */
export type payment_method_options_interac_present = unknown

/**
 * @title payment_method_options_klarna
 */
export type payment_method_options_klarna = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
 /**
  * @description Preferred locale of the Klarna checkout page that the customer is redirected to.
  */
 preferred_locale?: string | null
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session' | 'on_session')
}

/**
 * @title payment_method_options_konbini
 */
export type payment_method_options_konbini = {
 /**
  * @description An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores.
  */
 confirmation_number?: string | null
 /**
  * @description The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST.
  */
 expires_after_days?: number | null
 /**
  * @description The timestamp at which the Konbini payment instructions will expire. Only one of `expires_after_days` or `expires_at` may be set.
  */
 expires_at?: number | null
 /**
  * @description A product descriptor of up to 22 characters, which will appear to customers at the convenience store.
  */
 product_description?: string | null
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_method_options_kr_card
 */
export type payment_method_options_kr_card = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session')
}

/**
 * @title payment_method_options_multibanco
 */
export type payment_method_options_multibanco = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_method_options_oxxo
 */
export type payment_method_options_oxxo = {
 /**
  * @description The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.
  */
 expires_after_days: number
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_method_options_p24
 */
export type payment_method_options_p24 = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_method_options_pay_by_bank
 */
export type payment_method_options_pay_by_bank = unknown

/**
 * @title payment_method_options_paynow
 */
export type payment_method_options_paynow = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_method_options_paypal
 */
export type payment_method_options_paypal = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
 /**
  * @description Preferred locale of the PayPal checkout page that the customer is redirected to.
  */
 preferred_locale?: string | null
 /**
  * @description A reference of the PayPal transaction visible to customer which is mapped to PayPal's invoice ID. This must be a globally unique ID if you have configured in your PayPal settings to block multiple payments per invoice ID.
  */
 reference?: string | null
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session')
}

/**
 * @title payment_method_options_pix
 */
export type payment_method_options_pix = {
 /**
  * @description Determines if the amount includes the IOF tax.
  */
 amount_includes_iof?: ('always' | 'never')
 /**
  * @description The number of seconds (between 10 and 1209600) after which Pix payment will expire.
  */
 expires_after_seconds?: number | null
 /**
  * @description The timestamp at which the Pix expires.
  */
 expires_at?: number | null
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_method_options_promptpay
 */
export type payment_method_options_promptpay = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_method_options_revolut_pay
 */
export type payment_method_options_revolut_pay = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session')
}

/**
 * @title payment_method_options_satispay
 */
export type payment_method_options_satispay = {
 /**
  * @description Controls when the funds will be captured from the customer's account.
  */
 capture_method?: 'manual'
}

/**
 * @title payment_method_options_sofort
 */
export type payment_method_options_sofort = {
 /**
  * @description Preferred language of the SOFORT authorization page that the customer is redirected to.
  */
 preferred_language?: ('de' | 'en' | 'es' | 'fr' | 'it' | 'nl' | 'pl') | null
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: ('none' | 'off_session')
}

/**
 * @title payment_method_options_twint
 */
export type payment_method_options_twint = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_method_options_us_bank_account_mandate_options
 */
export type payment_method_options_us_bank_account_mandate_options = {
 /**
  * @description Mandate collection method
  */
 collection_method?: 'paper'
}

/**
 * @title payment_method_options_wechat_pay
 */
export type payment_method_options_wechat_pay = {
 /**
  * @description The app ID registered with WeChat Pay. Only required when client is ios or android.
  */
 app_id?: string | null
 /**
  * @description The client type that the end customer will pay from
  */
 client?: ('android' | 'ios' | 'web') | null
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_method_options_zip
 */
export type payment_method_options_zip = {
 /**
  * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
  * 
  * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
  * 
  * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
  * 
  * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  */
 setup_future_usage?: 'none'
}

/**
 * @title payment_method_oxxo
 */
export type payment_method_oxxo = unknown

/**
 * @title payment_method_p24
 */
export type payment_method_p24 = {
 /**
  * @description The customer's bank, if provided.
  */
 bank?: ('alior_bank' | 'bank_millennium' | 'bank_nowy_bfg_sa' | 'bank_pekao_sa' | 'banki_spbdzielcze' | 'blik' | 'bnp_paribas' | 'boz' | 'citi_handlowy' | 'credit_agricole' | 'envelobank' | 'etransfer_pocztowy24' | 'getin_bank' | 'ideabank' | 'ing' | 'inteligo' | 'mbank_mtransfer' | 'nest_przelew' | 'noble_pay' | 'pbac_z_ipko' | 'plus_bank' | 'santander_przelew24' | 'tmobile_usbugi_bankowe' | 'toyota_bank' | 'velobank' | 'volkswagen_bank') | null
}

/**
 * @title payment_method_pay_by_bank
 */
export type payment_method_pay_by_bank = unknown

/**
 * @title payment_method_payco
 */
export type payment_method_payco = unknown

/**
 * @title payment_method_paynow
 */
export type payment_method_paynow = unknown

/**
 * @title payment_method_paypal
 */
export type payment_method_paypal = {
 /**
  * @description Two-letter ISO code representing the buyer's country. Values are provided by PayPal directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 country?: string | null
 /**
  * @description Owner's email. Values are provided by PayPal directly
  * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 payer_email?: string | null
 /**
  * @description PayPal account PayerID. This identifier uniquely identifies the PayPal customer.
  */
 payer_id?: string | null
}

/**
 * @title payment_method_pix
 */
export type payment_method_pix = unknown

/**
 * @title payment_method_promptpay
 */
export type payment_method_promptpay = unknown

/**
 * @title payment_method_revolut_pay
 */
export type payment_method_revolut_pay = unknown

/**
 * @title payment_method_samsung_pay
 */
export type payment_method_samsung_pay = unknown

/**
 * @title payment_method_satispay
 */
export type payment_method_satispay = unknown

/**
 * @title payment_method_sepa_debit
 */
export type payment_method_sepa_debit = {
 /**
  * @description Bank code of bank associated with the bank account.
  */
 bank_code?: string | null
 /**
  * @description Branch code of bank associated with the bank account.
  */
 branch_code?: string | null
 /**
  * @description Two-letter ISO code representing the country the bank account is located in.
  */
 country?: string | null
 /**
  * @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  */
 fingerprint?: string | null
 /**
  * @description Information about the object that generated this PaymentMethod.
  */
 generated_from?: Schemas.sepa_debit_generated_from | null
 /**
  * @description Last four characters of the IBAN.
  */
 last4?: string | null
}

/**
 * @title payment_method_sofort
 */
export type payment_method_sofort = {
 /**
  * @description Two-letter ISO code representing the country the bank account is located in.
  */
 country?: string | null
}

/**
 * @title payment_method_swish
 */
export type payment_method_swish = unknown

/**
 * @title payment_method_twint
 */
export type payment_method_twint = unknown

/**
 * @title payment_method_us_bank_account
 */
export type payment_method_us_bank_account = {
 /**
  * @description Account holder type: individual or company.
  */
 account_holder_type?: ('company' | 'individual') | null
 /**
  * @description Account type: checkings or savings. Defaults to checking if omitted.
  */
 account_type?: ('checking' | 'savings') | null
 /**
  * @description The name of the bank.
  */
 bank_name?: string | null
 /**
  * @description The ID of the Financial Connections Account used to create the payment method.
  */
 financial_connections_account?: string | null
 /**
  * @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
  */
 fingerprint?: string | null
 /**
  * @description Last four digits of the bank account number.
  */
 last4?: string | null
 /**
  * @description Contains information about US bank account networks that can be used.
  */
 networks?: Schemas.us_bank_account_networks | null
 /**
  * @description Routing number of the bank account.
  */
 routing_number?: string | null
 /**
  * @description Contains information about the future reusability of this PaymentMethod.
  */
 status_details?: Schemas.payment_method_us_bank_account_status_details | null
}

/**
 * @title payment_method_us_bank_account_blocked
 */
export type payment_method_us_bank_account_blocked = {
 /**
  * @description The ACH network code that resulted in this block.
  */
 network_code?: ('R02' | 'R03' | 'R04' | 'R05' | 'R07' | 'R08' | 'R10' | 'R11' | 'R16' | 'R20' | 'R29' | 'R31') | null
 /**
  * @description The reason why this PaymentMethod's fingerprint has been blocked
  */
 reason?: ('bank_account_closed' | 'bank_account_frozen' | 'bank_account_invalid_details' | 'bank_account_restricted' | 'bank_account_unusable' | 'debit_not_authorized') | null
}

/**
 * @title payment_method_us_bank_account_status_details
 */
export type payment_method_us_bank_account_status_details = {
 /**
  * @title payment_method_us_bank_account_blocked
  */
 blocked?: Schemas.payment_method_us_bank_account_blocked
}

/**
 * @title payment_method_wechat_pay
 */
export type payment_method_wechat_pay = unknown

/**
 * @title payment_method_zip
 */
export type payment_method_zip = unknown

/**
 * @title PaymentPagesCheckoutSessionAdaptivePricing
 */
export type payment_pages_checkout_session_adaptive_pricing = {
 /**
  * @description If enabled, Adaptive Pricing is available on [eligible sessions](https://docs.stripe.com/payments/currencies/localize-prices/adaptive-pricing?payment-ui=stripe-hosted#restrictions).
  */
 enabled: boolean
}

/**
 * @title PaymentPagesCheckoutSessionAfterExpiration
 */
export type payment_pages_checkout_session_after_expiration = {
 /**
  * @description When set, configuration used to recover the Checkout Session on expiry.
  */
 recovery?: Schemas.payment_pages_checkout_session_after_expiration_recovery | null
}

/**
 * @title PaymentPagesCheckoutSessionAfterExpirationRecovery
 */
export type payment_pages_checkout_session_after_expiration_recovery = {
 /**
  * @description Enables user redeemable promotion codes on the recovered Checkout Sessions. Defaults to `false`
  */
 allow_promotion_codes: boolean
 /**
  * @description If `true`, a recovery url will be generated to recover this Checkout Session if it
  * expires before a transaction is completed. It will be attached to the
  * Checkout Session object upon expiration.
  */
 enabled: boolean
 /**
  * @description The timestamp at which the recovery URL will expire.
  */
 expires_at?: number | null
 /**
  * @description URL that creates a new Checkout Session when clicked that is a copy of this expired Checkout Session
  */
 url?: string | null
}

/**
 * @title PaymentPagesCheckoutSessionAutomaticTax
 */
export type payment_pages_checkout_session_automatic_tax = {
 /**
  * @description Indicates whether automatic tax is enabled for the session
  */
 enabled: boolean
 /**
  * @description The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
  */
 liability?: Schemas.connect_account_reference | null
 /**
  * @description The tax provider powering automatic tax.
  */
 provider?: string | null
 /**
  * @description The status of the most recent automated tax calculation for this session.
  */
 status?: ('complete' | 'failed' | 'requires_location_inputs') | null
}

/**
 * @title PaymentPagesCheckoutSessionCheckoutAddressDetails
 */
export type payment_pages_checkout_session_checkout_address_details = {
 /**
  * @title Address
  */
 address: Schemas.address
 /**
  * @description Customer name.
  */
 name: string
}

/**
 * @title PaymentPagesCheckoutSessionCollectedInformation
 */
export type payment_pages_checkout_session_collected_information = {
 /**
  * @description Shipping information for this Checkout Session.
  */
 shipping_details?: Schemas.payment_pages_checkout_session_checkout_address_details | null
}

/**
 * @title PaymentPagesCheckoutSessionConsent
 */
export type payment_pages_checkout_session_consent = {
 /**
  * @description If `opt_in`, the customer consents to receiving promotional communications
  * from the merchant about this Checkout Session.
  */
 promotions?: ('opt_in' | 'opt_out') | null
 /**
  * @description If `accepted`, the customer in this Checkout Session has agreed to the merchant's terms of service.
  */
 terms_of_service?: 'accepted' | null
}

/**
 * @title PaymentPagesCheckoutSessionConsentCollection
 */
export type payment_pages_checkout_session_consent_collection = {
 /**
  * @description If set to `hidden`, it will hide legal text related to the reuse of a payment method.
  */
 payment_method_reuse_agreement?: Schemas.payment_pages_checkout_session_payment_method_reuse_agreement | null
 /**
  * @description If set to `auto`, enables the collection of customer consent for promotional communications. The Checkout
  * Session will determine whether to display an option to opt into promotional communication
  * from the merchant depending on the customer's locale. Only available to US merchants.
  */
 promotions?: ('auto' | 'none') | null
 /**
  * @description If set to `required`, it requires customers to accept the terms of service before being able to pay.
  */
 terms_of_service?: ('none' | 'required') | null
}

/**
 * @title PaymentPagesCheckoutSessionCurrencyConversion
 */
export type payment_pages_checkout_session_currency_conversion = {
 /**
  * @description Total of all items in source currency before discounts or taxes are applied.
  */
 amount_subtotal: number
 /**
  * @description Total of all items in source currency after discounts and taxes are applied.
  */
 amount_total: number
 /**
  * @description Exchange rate used to convert source currency amounts to customer currency amounts
  */
 fx_rate: string
 /**
  * @description Creation currency of the CheckoutSession before localization
  */
 source_currency: string
}

/**
 * @title PaymentPagesCheckoutSessionCustomFields
 */
export type payment_pages_checkout_session_custom_fields = {
 /**
  * @title PaymentPagesCheckoutSessionCustomFieldsDropdown
  */
 dropdown?: Schemas.payment_pages_checkout_session_custom_fields_dropdown
 /**
  * @description String of your choice that your integration can use to reconcile this field. Must be unique to this field, alphanumeric, and up to 200 characters.
  */
 key: string
 /**
  * @title PaymentPagesCheckoutSessionCustomFieldsLabel
  */
 label: Schemas.payment_pages_checkout_session_custom_fields_label
 /**
  * @title PaymentPagesCheckoutSessionCustomFieldsNumeric
  */
 numeric?: Schemas.payment_pages_checkout_session_custom_fields_numeric
 /**
  * @description Whether the customer is required to complete the field before completing the Checkout Session. Defaults to `false`.
  */
 optional: boolean
 /**
  * @title PaymentPagesCheckoutSessionCustomFieldsText
  */
 text?: Schemas.payment_pages_checkout_session_custom_fields_text
 /**
  * @description The type of the field.
  */
 type: ('dropdown' | 'numeric' | 'text')
}

/**
 * @title PaymentPagesCheckoutSessionCustomFieldsDropdown
 */
export type payment_pages_checkout_session_custom_fields_dropdown = {
 /**
  * @description The value that will pre-fill on the payment page.
  */
 default_value?: string | null
 /**
  * @description The options available for the customer to select. Up to 200 options allowed.
  */
 options: Schemas.payment_pages_checkout_session_custom_fields_option[]
 /**
  * @description The option selected by the customer. This will be the `value` for the option.
  */
 value?: string | null
}

/**
 * @title PaymentPagesCheckoutSessionCustomFieldsLabel
 */
export type payment_pages_checkout_session_custom_fields_label = {
 /**
  * @description Custom text for the label, displayed to the customer. Up to 50 characters.
  */
 custom?: string | null
 /**
  * @description The type of the label.
  */
 type: 'custom'
}

/**
 * @title PaymentPagesCheckoutSessionCustomFieldsNumeric
 */
export type payment_pages_checkout_session_custom_fields_numeric = {
 /**
  * @description The value that will pre-fill the field on the payment page.
  */
 default_value?: string | null
 /**
  * @description The maximum character length constraint for the customer's input.
  */
 maximum_length?: number | null
 /**
  * @description The minimum character length requirement for the customer's input.
  */
 minimum_length?: number | null
 /**
  * @description The value entered by the customer, containing only digits.
  */
 value?: string | null
}

/**
 * @title PaymentPagesCheckoutSessionCustomFieldsOption
 */
export type payment_pages_checkout_session_custom_fields_option = {
 /**
  * @description The label for the option, displayed to the customer. Up to 100 characters.
  */
 label: string
 /**
  * @description The value for this option, not displayed to the customer, used by your integration to reconcile the option selected by the customer. Must be unique to this option, alphanumeric, and up to 100 characters.
  */
 value: string
}

/**
 * @title PaymentPagesCheckoutSessionCustomFieldsText
 */
export type payment_pages_checkout_session_custom_fields_text = {
 /**
  * @description The value that will pre-fill the field on the payment page.
  */
 default_value?: string | null
 /**
  * @description The maximum character length constraint for the customer's input.
  */
 maximum_length?: number | null
 /**
  * @description The minimum character length requirement for the customer's input.
  */
 minimum_length?: number | null
 /**
  * @description The value entered by the customer.
  */
 value?: string | null
}

/**
 * @title PaymentPagesCheckoutSessionCustomText
 */
export type payment_pages_checkout_session_custom_text = {
 /**
  * @description Custom text that should be displayed after the payment confirmation button.
  */
 after_submit?: Schemas.payment_pages_checkout_session_custom_text_position | null
 /**
  * @description Custom text that should be displayed alongside shipping address collection.
  */
 shipping_address?: Schemas.payment_pages_checkout_session_custom_text_position | null
 /**
  * @description Custom text that should be displayed alongside the payment confirmation button.
  */
 submit?: Schemas.payment_pages_checkout_session_custom_text_position | null
 /**
  * @description Custom text that should be displayed in place of the default terms of service agreement text.
  */
 terms_of_service_acceptance?: Schemas.payment_pages_checkout_session_custom_text_position | null
}

/**
 * @title PaymentPagesCheckoutSessionCustomTextPosition
 */
export type payment_pages_checkout_session_custom_text_position = {
 /**
  * @description Text may be up to 1200 characters in length.
  */
 message: string
}

/**
 * @title PaymentPagesCheckoutSessionCustomerDetails
 */
export type payment_pages_checkout_session_customer_details = {
 /**
  * @description The customer's address after a completed Checkout Session. Note: This property is populated only for sessions on or after March 30, 2022.
  */
 address?: Schemas.address | null
 /**
  * @description The email associated with the Customer, if one exists, on the Checkout Session after a completed Checkout Session or at time of session expiry.
  * Otherwise, if the customer has consented to promotional content, this value is the most recent valid email provided by the customer on the Checkout form.
  */
 email?: string | null
 /**
  * @description The customer's name after a completed Checkout Session. Note: This property is populated only for sessions on or after March 30, 2022.
  */
 name?: string | null
 /**
  * @description The customer's phone number after a completed Checkout Session.
  */
 phone?: string | null
 /**
  * @description The customer’s tax exempt status after a completed Checkout Session.
  */
 tax_exempt?: ('exempt' | 'none' | 'reverse') | null
 /**
  * @description The customer’s tax IDs after a completed Checkout Session.
  */
 tax_ids?: Schemas.payment_pages_checkout_session_tax_id[] | null
}

/**
 * @title PaymentPagesCheckoutSessionDiscount
 */
export type payment_pages_checkout_session_discount = {
 /**
  * @description Coupon attached to the Checkout Session.
  */
 coupon?: (string | Schemas.coupon) | null
 /**
  * @description Promotion code attached to the Checkout Session.
  */
 promotion_code?: (string | Schemas.promotion_code) | null
}

/**
 * @title PaymentPagesCheckoutSessionInvoiceCreation
 */
export type payment_pages_checkout_session_invoice_creation = {
 /**
  * @description Indicates whether invoice creation is enabled for the Checkout Session.
  */
 enabled: boolean
 /**
  * @title PaymentPagesCheckoutSessionInvoiceSettings
  */
 invoice_data: Schemas.payment_pages_checkout_session_invoice_settings
}

/**
 * @title PaymentPagesCheckoutSessionInvoiceSettings
 */
export type payment_pages_checkout_session_invoice_settings = {
 /**
  * @description The account tax IDs associated with the invoice.
  */
 account_tax_ids?: (string | Schemas.tax_id | Schemas.deleted_tax_id)[] | null
 /**
  * @description Custom fields displayed on the invoice.
  */
 custom_fields?: Schemas.invoice_setting_custom_field[] | null
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description?: string | null
 /**
  * @description Footer displayed on the invoice.
  */
 footer?: string | null
 /**
  * @description The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
  */
 issuer?: Schemas.connect_account_reference | null
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description Options for invoice PDF rendering.
  */
 rendering_options?: Schemas.invoice_setting_checkout_rendering_options | null
}

/**
 * @title PaymentPagesCheckoutSessionOptionalItem
 */
export type payment_pages_checkout_session_optional_item = {
 adjustable_quantity?: Schemas.payment_pages_checkout_session_optional_item_adjustable_quantity | null
 price: string
 quantity: number
}

/**
 * @title PaymentPagesCheckoutSessionOptionalItemAdjustableQuantity
 */
export type payment_pages_checkout_session_optional_item_adjustable_quantity = {
 /**
  * @description Set to true if the quantity can be adjusted to any non-negative integer.
  */
 enabled: boolean
 /**
  * @description The maximum quantity of this item the customer can purchase. By default this value is 99. You can specify a value up to 999999.
  */
 maximum?: number | null
 /**
  * @description The minimum quantity of this item the customer must purchase, if they choose to purchase it. Because this item is optional, the customer will always be able to remove it from their order, even if the `minimum` configured here is greater than 0. By default this value is 0.
  */
 minimum?: number | null
}

/**
 * @title PaymentPagesCheckoutSessionPaymentMethodReuseAgreement
 */
export type payment_pages_checkout_session_payment_method_reuse_agreement = {
 /**
  * @description Determines the position and visibility of the payment method reuse agreement in the UI. When set to `auto`, Stripe's defaults will be used.
  * 
  * When set to `hidden`, the payment method reuse agreement text will always be hidden in the UI.
  */
 position: ('auto' | 'hidden')
}

/**
 * @title PaymentPagesCheckoutSessionPermissions
 */
export type payment_pages_checkout_session_permissions = {
 /**
  * @description Determines which entity is allowed to update the shipping details.
  * 
  * Default is `client_only`. Stripe Checkout client will automatically update the shipping details. If set to `server_only`, only your server is allowed to update the shipping details.
  * 
  * When set to `server_only`, you must add the onShippingDetailsChange event handler when initializing the Stripe Checkout client and manually update the shipping details from your server using the Stripe API.
  */
 update_shipping_details?: ('client_only' | 'server_only') | null
}

/**
 * @title PaymentPagesCheckoutSessionPhoneNumberCollection
 */
export type payment_pages_checkout_session_phone_number_collection = {
 /**
  * @description Indicates whether phone number collection is enabled for the session
  */
 enabled: boolean
}

/**
 * @title PaymentPagesCheckoutSessionSavedPaymentMethodOptions
 */
export type payment_pages_checkout_session_saved_payment_method_options = {
 /**
  * @description Uses the `allow_redisplay` value of each saved payment method to filter the set presented to a returning customer. By default, only saved payment methods with ’allow_redisplay: ‘always’ are shown in Checkout.
  */
 allow_redisplay_filters?: ('always' | 'limited' | 'unspecified')[] | null
 /**
  * @description Enable customers to choose if they wish to remove their saved payment methods. Disabled by default.
  */
 payment_method_remove?: ('disabled' | 'enabled') | null
 /**
  * @description Enable customers to choose if they wish to save their payment method for future use. Disabled by default.
  */
 payment_method_save?: ('disabled' | 'enabled') | null
}

/**
 * @title PaymentPagesCheckoutSessionShippingAddressCollection
 */
export type payment_pages_checkout_session_shipping_address_collection = {
 /**
  * @description An array of two-letter ISO country codes representing which countries Checkout should provide as options for
  * shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SY, UM, VI`.
  */
 allowed_countries: ('AC' | 'AD' | 'AE' | 'AF' | 'AG' | 'AI' | 'AL' | 'AM' | 'AO' | 'AQ' | 'AR' | 'AT' | 'AU' | 'AW' | 'AX' | 'AZ' | 'BA' | 'BB' | 'BD' | 'BE' | 'BF' | 'BG' | 'BH' | 'BI' | 'BJ' | 'BL' | 'BM' | 'BN' | 'BO' | 'BQ' | 'BR' | 'BS' | 'BT' | 'BV' | 'BW' | 'BY' | 'BZ' | 'CA' | 'CD' | 'CF' | 'CG' | 'CH' | 'CI' | 'CK' | 'CL' | 'CM' | 'CN' | 'CO' | 'CR' | 'CV' | 'CW' | 'CY' | 'CZ' | 'DE' | 'DJ' | 'DK' | 'DM' | 'DO' | 'DZ' | 'EC' | 'EE' | 'EG' | 'EH' | 'ER' | 'ES' | 'ET' | 'FI' | 'FJ' | 'FK' | 'FO' | 'FR' | 'GA' | 'GB' | 'GD' | 'GE' | 'GF' | 'GG' | 'GH' | 'GI' | 'GL' | 'GM' | 'GN' | 'GP' | 'GQ' | 'GR' | 'GS' | 'GT' | 'GU' | 'GW' | 'GY' | 'HK' | 'HN' | 'HR' | 'HT' | 'HU' | 'ID' | 'IE' | 'IL' | 'IM' | 'IN' | 'IO' | 'IQ' | 'IS' | 'IT' | 'JE' | 'JM' | 'JO' | 'JP' | 'KE' | 'KG' | 'KH' | 'KI' | 'KM' | 'KN' | 'KR' | 'KW' | 'KY' | 'KZ' | 'LA' | 'LB' | 'LC' | 'LI' | 'LK' | 'LR' | 'LS' | 'LT' | 'LU' | 'LV' | 'LY' | 'MA' | 'MC' | 'MD' | 'ME' | 'MF' | 'MG' | 'MK' | 'ML' | 'MM' | 'MN' | 'MO' | 'MQ' | 'MR' | 'MS' | 'MT' | 'MU' | 'MV' | 'MW' | 'MX' | 'MY' | 'MZ' | 'NA' | 'NC' | 'NE' | 'NG' | 'NI' | 'NL' | 'NO' | 'NP' | 'NR' | 'NU' | 'NZ' | 'OM' | 'PA' | 'PE' | 'PF' | 'PG' | 'PH' | 'PK' | 'PL' | 'PM' | 'PN' | 'PR' | 'PS' | 'PT' | 'PY' | 'QA' | 'RE' | 'RO' | 'RS' | 'RU' | 'RW' | 'SA' | 'SB' | 'SC' | 'SD' | 'SE' | 'SG' | 'SH' | 'SI' | 'SJ' | 'SK' | 'SL' | 'SM' | 'SN' | 'SO' | 'SR' | 'SS' | 'ST' | 'SV' | 'SX' | 'SZ' | 'TA' | 'TC' | 'TD' | 'TF' | 'TG' | 'TH' | 'TJ' | 'TK' | 'TL' | 'TM' | 'TN' | 'TO' | 'TR' | 'TT' | 'TV' | 'TW' | 'TZ' | 'UA' | 'UG' | 'US' | 'UY' | 'UZ' | 'VA' | 'VC' | 'VE' | 'VG' | 'VN' | 'VU' | 'WF' | 'WS' | 'XK' | 'YE' | 'YT' | 'ZA' | 'ZM' | 'ZW' | 'ZZ')[]
}

/**
 * @title PaymentPagesCheckoutSessionShippingCost
 */
export type payment_pages_checkout_session_shipping_cost = {
 /**
  * @description Total shipping cost before any discounts or taxes are applied.
  */
 amount_subtotal: number
 /**
  * @description Total tax amount applied due to shipping costs. If no tax was applied, defaults to 0.
  */
 amount_tax: number
 /**
  * @description Total shipping cost after discounts and taxes are applied.
  */
 amount_total: number
 /**
  * @description The ID of the ShippingRate for this order.
  */
 shipping_rate?: (string | Schemas.shipping_rate) | null
 /**
  * @description The taxes applied to the shipping rate.
  */
 taxes?: Schemas.line_items_tax_amount[]
}

/**
 * @title PaymentPagesCheckoutSessionShippingOption
 */
export type payment_pages_checkout_session_shipping_option = {
 /**
  * @description A non-negative integer in cents representing how much to charge.
  */
 shipping_amount: number
 /**
  * @description The shipping rate.
  */
 shipping_rate: (string | Schemas.shipping_rate)
}

/**
 * @title PaymentPagesCheckoutSessionTaxID
 */
export type payment_pages_checkout_session_tax_id = {
 /**
  * @description The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `hr_oib`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `no_voec`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `li_vat`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, `al_tin`, `bh_vat`, `kz_bin`, `ng_tin`, `om_vat`, `de_stn`, `ch_uid`, `tz_vat`, `uz_vat`, `uz_tin`, `md_vat`, `ma_vat`, `by_tin`, `ao_tin`, `bs_tin`, `bb_tin`, `cd_nif`, `mr_nif`, `me_pib`, `zw_tin`, `ba_tin`, `gn_nif`, `mk_vat`, `sr_fin`, `sn_ninea`, `am_tin`, `np_pan`, `tj_tin`, `ug_tin`, `zm_tin`, `kh_tin`, `aw_tin`, `az_tin`, `bd_bin`, `bj_ifu`, `et_tin`, `kg_tin`, `la_tin`, `cm_niu`, `cv_nif`, `bf_ifu`, or `unknown`
  */
 type: ('ad_nrt' | 'ae_trn' | 'al_tin' | 'am_tin' | 'ao_tin' | 'ar_cuit' | 'au_abn' | 'au_arn' | 'aw_tin' | 'az_tin' | 'ba_tin' | 'bb_tin' | 'bd_bin' | 'bf_ifu' | 'bg_uic' | 'bh_vat' | 'bj_ifu' | 'bo_tin' | 'br_cnpj' | 'br_cpf' | 'bs_tin' | 'by_tin' | 'ca_bn' | 'ca_gst_hst' | 'ca_pst_bc' | 'ca_pst_mb' | 'ca_pst_sk' | 'ca_qst' | 'cd_nif' | 'ch_uid' | 'ch_vat' | 'cl_tin' | 'cm_niu' | 'cn_tin' | 'co_nit' | 'cr_tin' | 'cv_nif' | 'de_stn' | 'do_rcn' | 'ec_ruc' | 'eg_tin' | 'es_cif' | 'et_tin' | 'eu_oss_vat' | 'eu_vat' | 'gb_vat' | 'ge_vat' | 'gn_nif' | 'hk_br' | 'hr_oib' | 'hu_tin' | 'id_npwp' | 'il_vat' | 'in_gst' | 'is_vat' | 'jp_cn' | 'jp_rn' | 'jp_trn' | 'ke_pin' | 'kg_tin' | 'kh_tin' | 'kr_brn' | 'kz_bin' | 'la_tin' | 'li_uid' | 'li_vat' | 'ma_vat' | 'md_vat' | 'me_pib' | 'mk_vat' | 'mr_nif' | 'mx_rfc' | 'my_frp' | 'my_itn' | 'my_sst' | 'ng_tin' | 'no_vat' | 'no_voec' | 'np_pan' | 'nz_gst' | 'om_vat' | 'pe_ruc' | 'ph_tin' | 'ro_tin' | 'rs_pib' | 'ru_inn' | 'ru_kpp' | 'sa_vat' | 'sg_gst' | 'sg_uen' | 'si_tin' | 'sn_ninea' | 'sr_fin' | 'sv_nit' | 'th_vat' | 'tj_tin' | 'tr_tin' | 'tw_vat' | 'tz_vat' | 'ua_vat' | 'ug_tin' | 'unknown' | 'us_ein' | 'uy_ruc' | 'uz_tin' | 'uz_vat' | 've_rif' | 'vn_tin' | 'za_vat' | 'zm_tin' | 'zw_tin')
 /**
  * @description The value of the tax ID.
  */
 value?: string | null
}

/**
 * @title PaymentPagesCheckoutSessionTaxIDCollection
 */
export type payment_pages_checkout_session_tax_id_collection = {
 /**
  * @description Indicates whether tax ID collection is enabled for the session
  */
 enabled: boolean
 /**
  * @description Indicates whether a tax ID is required on the payment page
  */
 required: ('if_supported' | 'never')
}

/**
 * @title PaymentPagesCheckoutSessionTotalDetails
 */
export type payment_pages_checkout_session_total_details = {
 /**
  * @description This is the sum of all the discounts.
  */
 amount_discount: number
 /**
  * @description This is the sum of all the shipping amounts.
  */
 amount_shipping?: number | null
 /**
  * @description This is the sum of all the tax amounts.
  */
 amount_tax: number
 /**
  * @title PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown
  */
 breakdown?: Schemas.payment_pages_checkout_session_total_details_resource_breakdown
}

/**
 * @title PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown
 */
export type payment_pages_checkout_session_total_details_resource_breakdown = {
 /**
  * @description The aggregated discounts.
  */
 discounts: Schemas.line_items_discount_amount[]
 /**
  * @description The aggregated tax amounts by rate.
  */
 taxes: Schemas.line_items_tax_amount[]
}

/**
 * @title PaymentPagesPrivateCardPaymentMethodOptionsResourceRestrictions
 */
export type payment_pages_private_card_payment_method_options_resource_restrictions = {
 /**
  * @description Specify the card brands to block in the Checkout Session. If a customer enters or selects a card belonging to a blocked brand, they can't complete the Session.
  */
 brands_blocked?: ('american_express' | 'discover_global_network' | 'mastercard' | 'visa')[]
}

/**
 * @title Polymorphic
 */
export type payment_source = (Schemas.account | Schemas.bank_account | Schemas.card | Schemas.source)

/**
 * @title Payout
 * @description A `Payout` object is created when you receive funds from Stripe, or when you
 * initiate a payout to either a bank account or debit card of a [connected
 * Stripe account](/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts,
 * and list all payouts. Payouts are made on [varying
 * schedules](/docs/connect/manage-payout-schedule), depending on your country and
 * industry.
 * 
 * Related guide: [Receiving payouts](https://stripe.com/docs/payouts)
 */
export type payout = {
 /**
  * @description The amount (in cents (or local equivalent)) that transfers to your bank account or debit card.
  */
 amount: number
 /**
  * @description The application fee (if any) for the payout. [See the Connect documentation](https://stripe.com/docs/connect/instant-payouts#monetization-and-fees) for details.
  */
 application_fee?: (string | Schemas.application_fee) | null
 /**
  * @description The amount of the application fee (if any) requested for the payout. [See the Connect documentation](https://stripe.com/docs/connect/instant-payouts#monetization-and-fees) for details.
  */
 application_fee_amount?: number | null
 /**
  * @description Date that you can expect the payout to arrive in the bank. This factors in delays to account for weekends or bank holidays.
  */
 arrival_date: number
 /**
  * @description Returns `true` if the payout is created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule) and `false` if it's [requested manually](https://stripe.com/docs/payouts#manual-payouts).
  */
 automatic: boolean
 /**
  * @description ID of the balance transaction that describes the impact of this payout on your account balance.
  */
 balance_transaction?: (string | Schemas.balance_transaction) | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description?: string | null
 /**
  * @description ID of the bank account or card the payout is sent to.
  */
 destination?: (string | Schemas.bank_account | Schemas.card | Schemas.deleted_bank_account | Schemas.deleted_card) | null
 /**
  * @description If the payout fails or cancels, this is the ID of the balance transaction that reverses the initial balance transaction and returns the funds from the failed payout back in your balance.
  */
 failure_balance_transaction?: (string | Schemas.balance_transaction) | null
 /**
  * @description Error code that provides a reason for a payout failure, if available. View our [list of failure codes](https://stripe.com/docs/api#payout_failures).
  */
 failure_code?: string | null
 /**
  * @description Message that provides the reason for a payout failure, if available.
  */
 failure_message?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description The method used to send this payout, which can be `standard` or `instant`. `instant` is supported for payouts to debit cards and bank accounts in certain countries. Learn more about [bank support for Instant Payouts](https://stripe.com/docs/payouts/instant-payouts-banks).
  */
 method: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'payout'
 /**
  * @description If the payout reverses another, this is the ID of the original payout.
  */
 original_payout?: (string | Schemas.payout) | null
 /**
  * @description ID of the v2 FinancialAccount the funds are sent to.
  */
 payout_method?: string | null
 /**
  * @description If `completed`, you can use the [Balance Transactions API](https://stripe.com/docs/api/balance_transactions/list#balance_transaction_list-payout) to list all balance transactions that are paid out in this payout.
  */
 reconciliation_status: ('completed' | 'in_progress' | 'not_applicable')
 /**
  * @description If the payout reverses, this is the ID of the payout that reverses this payout.
  */
 reversed_by?: (string | Schemas.payout) | null
 /**
  * @description The source balance this payout came from, which can be one of the following: `card`, `fpx`, or `bank_account`.
  */
 source_type: string
 /**
  * @description Extra information about a payout that displays on the user's bank statement.
  */
 statement_descriptor?: string | null
 /**
  * @description Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it's submitted to the bank, when it becomes `in_transit`. The status changes to `paid` if the transaction succeeds, or to `failed` or `canceled` (within 5 business days). Some payouts that fail might initially show as `paid`, then change to `failed`.
  */
 status: string
 /**
  * @description A value that generates from the beneficiary's bank that allows users to track payouts with their bank. Banks might call this a "reference number" or something similar.
  */
 trace_id?: Schemas.payouts_trace_id | null
 /**
  * @description Can be `bank_account` or `card`.
  */
 type: ('bank_account' | 'card')
}

/**
 * @title PayoutsTraceID
 */
export type payouts_trace_id = {
 /**
  * @description Possible values are `pending`, `supported`, and `unsupported`. When `payout.status` is `pending` or `in_transit`, this will be `pending`. When the payout transitions to `paid`, `failed`, or `canceled`, this status will become `supported` or `unsupported` shortly after in most cases. In some cases, this may appear as `pending` for up to 10 days after `arrival_date` until transitioning to `supported` or `unsupported`.
  */
 status: string
 /**
  * @description The trace ID value if `trace_id.status` is `supported`, otherwise `nil`.
  */
 value?: string | null
}

/**
 * @title paypal_seller_protection
 */
export type paypal_seller_protection = {
 /**
  * @description An array of conditions that are covered for the transaction, if applicable.
  */
 dispute_categories?: ('fraudulent' | 'product_not_received')[] | null
 /**
  * @description Indicates whether the transaction is eligible for PayPal's seller protection.
  */
 status: ('eligible' | 'not_eligible' | 'partially_eligible')
}

/**
 * @title Person
 * @description This is an object representing a person associated with a Stripe account.
 * 
 * A platform can only access a subset of data in a person for an account where [account.controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`, which includes Standard and Express accounts, after creating an Account Link or Account Session to start Connect onboarding.
 * 
 * See the [Standard onboarding](/connect/standard-accounts) or [Express onboarding](/connect/express-accounts) documentation for information about prefilling information and account onboarding steps. Learn more about [handling identity verification with the API](/connect/handling-api-verification#person-information).
 */
export type person = {
 /**
  * @description The account the person is associated with.
  */
 account: string
 /**
  * @title PersonAdditionalTOSAcceptances
  */
 additional_tos_acceptances?: Schemas.person_additional_tos_acceptances
 /**
  * @title Address
  */
 address?: Schemas.address
 address_kana?: Schemas.legal_entity_japan_address | null
 address_kanji?: Schemas.legal_entity_japan_address | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @title LegalEntityDOB
  */
 dob?: Schemas.legal_entity_dob
 /**
  * @description The person's email address. Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
  */
 email?: string | null
 /**
  * @description The person's first name. Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
  */
 first_name?: string | null
 /**
  * @description The Kana variation of the person's first name (Japan only). Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
  */
 first_name_kana?: string | null
 /**
  * @description The Kanji variation of the person's first name (Japan only). Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
  */
 first_name_kanji?: string | null
 /**
  * @description A list of alternate names or aliases that the person is known by. Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
  */
 full_name_aliases?: string[]
 future_requirements?: Schemas.person_future_requirements | null
 /**
  * @description The person's gender.
  */
 gender?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Whether the person's `id_number` was provided. True if either the full ID number was provided or if only the required part of the ID number was provided (ex. last four of an individual's SSN for the US indicated by `ssn_last_4_provided`).
  */
 id_number_provided?: boolean
 /**
  * @description Whether the person's `id_number_secondary` was provided.
  */
 id_number_secondary_provided?: boolean
 /**
  * @description The person's last name. Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
  */
 last_name?: string | null
 /**
  * @description The Kana variation of the person's last name (Japan only). Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
  */
 last_name_kana?: string | null
 /**
  * @description The Kanji variation of the person's last name (Japan only). Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
  */
 last_name_kanji?: string | null
 /**
  * @description The person's maiden name.
  */
 maiden_name?: string | null
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string>
 /**
  * @description The country where the person is a national.
  */
 nationality?: string | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'person'
 /**
  * @description The person's phone number.
  */
 phone?: string | null
 /**
  * @description Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
  */
 political_exposure?: ('existing' | 'none')
 /**
  * @title Address
  */
 registered_address?: Schemas.address
 /**
  * @title PersonRelationship
  */
 relationship?: Schemas.person_relationship
 requirements?: Schemas.person_requirements | null
 /**
  * @description Whether the last four digits of the person's Social Security number have been provided (U.S. only).
  */
 ssn_last_4_provided?: boolean
 /**
  * @description Demographic data related to the person.
  */
 us_cfpb_data?: Schemas.person_us_cfpb_data | null
 /**
  * @title LegalEntityPersonVerification
  */
 verification?: Schemas.legal_entity_person_verification
}

/**
 * @title PersonAdditionalTOSAcceptance
 */
export type person_additional_tos_acceptance = {
 /**
  * @description The Unix timestamp marking when the legal guardian accepted the service agreement.
  */
 date?: number | null
 /**
  * @description The IP address from which the legal guardian accepted the service agreement.
  */
 ip?: string | null
 /**
  * @description The user agent of the browser from which the legal guardian accepted the service agreement.
  */
 user_agent?: string | null
}

/**
 * @title PersonAdditionalTOSAcceptances
 */
export type person_additional_tos_acceptances = {
 /**
  * @description Details on the legal guardian's acceptance of the main Stripe service agreement.
  */
 account?: Schemas.person_additional_tos_acceptance | null
}

/**
 * @title PersonEthnicityDetails
 */
export type person_ethnicity_details = {
 /**
  * @description The persons ethnicity
  */
 ethnicity?: ('cuban' | 'hispanic_or_latino' | 'mexican' | 'not_hispanic_or_latino' | 'other_hispanic_or_latino' | 'prefer_not_to_answer' | 'puerto_rican')[] | null
 /**
  * @description Please specify your origin, when other is selected.
  */
 ethnicity_other?: string | null
}

/**
 * @title PersonFutureRequirements
 */
export type person_future_requirements = {
 /**
  * @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  */
 alternatives?: Schemas.account_requirements_alternative[] | null
 /**
  * @description Fields that need to be collected to keep the person's account enabled. If not collected by the account's `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash, and may immediately become `past_due`, but the account may also be given a grace period depending on the account's enablement state prior to transition.
  */
 currently_due: string[]
 /**
  * @description Fields that are `currently_due` and need to be collected again because validation or verification failed.
  */
 errors: Schemas.account_requirements_error[]
 /**
  * @description Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `future_requirements[current_deadline]` becomes set.
  */
 eventually_due: string[]
 /**
  * @description Fields that weren't collected by the account's `requirements.current_deadline`. These fields need to be collected to enable the person's account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`.
  */
 past_due: string[]
 /**
  * @description Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. Fields might appear in `eventually_due` or `currently_due` and in `pending_verification` if verification fails but another verification is still pending.
  */
 pending_verification: string[]
}

/**
 * @title PersonRaceDetails
 */
export type person_race_details = {
 /**
  * @description The persons race.
  */
 race?: ('african_american' | 'american_indian_or_alaska_native' | 'asian' | 'asian_indian' | 'black_or_african_american' | 'chinese' | 'ethiopian' | 'filipino' | 'guamanian_or_chamorro' | 'haitian' | 'jamaican' | 'japanese' | 'korean' | 'native_hawaiian' | 'native_hawaiian_or_other_pacific_islander' | 'nigerian' | 'other_asian' | 'other_black_or_african_american' | 'other_pacific_islander' | 'prefer_not_to_answer' | 'samoan' | 'somali' | 'vietnamese' | 'white')[] | null
 /**
  * @description Please specify your race, when other is selected.
  */
 race_other?: string | null
}

/**
 * @title PersonRelationship
 */
export type person_relationship = {
 /**
  * @description Whether the person is the authorizer of the account's representative.
  */
 authorizer?: boolean | null
 /**
  * @description Whether the person is a director of the account's legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations.
  */
 director?: boolean | null
 /**
  * @description Whether the person has significant responsibility to control, manage, or direct the organization.
  */
 executive?: boolean | null
 /**
  * @description Whether the person is the legal guardian of the account's representative.
  */
 legal_guardian?: boolean | null
 /**
  * @description Whether the person is an owner of the account’s legal entity.
  */
 owner?: boolean | null
 /**
  * @description The percent owned by the person of the account's legal entity.
  */
 percent_ownership?: number | null
 /**
  * @description Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account.
  */
 representative?: boolean | null
 /**
  * @description The person's title (e.g., CEO, Support Engineer).
  */
 title?: string | null
}

/**
 * @title PersonRequirements
 */
export type person_requirements = {
 /**
  * @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
  */
 alternatives?: Schemas.account_requirements_alternative[] | null
 /**
  * @description Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
  */
 currently_due: string[]
 /**
  * @description Fields that are `currently_due` and need to be collected again because validation or verification failed.
  */
 errors: Schemas.account_requirements_error[]
 /**
  * @description Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set.
  */
 eventually_due: string[]
 /**
  * @description Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account.
  */
 past_due: string[]
 /**
  * @description Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending.
  */
 pending_verification: string[]
}

/**
 * @title PersonUSCfpbData
 */
export type person_us_cfpb_data = {
 /**
  * @description The persons ethnicity details
  */
 ethnicity_details?: Schemas.person_ethnicity_details | null
 /**
  * @description The persons race details
  */
 race_details?: Schemas.person_race_details | null
 /**
  * @description The persons self-identified gender
  */
 self_identified_gender?: string | null
}

/**
 * @title Plan
 * @description You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.
 * 
 * Plans define the base price, currency, and billing cycle for recurring purchases of products.
 * [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.
 * 
 * For example, you might have a single "gold" product that has plans for $10/month, $100/year, €9/month, and €90/year.
 * 
 * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and prices](https://stripe.com/docs/products-prices/overview).
 */
export type plan = {
 /**
  * @description Whether the plan can be used for new purchases.
  */
 active: boolean
 /**
  * @description The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
  */
 amount?: number | null
 /**
  * @description The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
  */
 amount_decimal?: string | null
 /**
  * @description Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
  */
 billing_scheme: ('per_unit' | 'tiered')
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
  */
 interval: ('day' | 'month' | 'week' | 'year')
 /**
  * @description The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
  */
 interval_count: number
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description The meter tracking the usage of a metered price
  */
 meter?: string | null
 /**
  * @description A brief description of the plan, hidden from customers.
  */
 nickname?: string | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'plan'
 /**
  * @description The product whose pricing this plan determines.
  */
 product?: (string | Schemas.product | Schemas.deleted_product) | null
 /**
  * @description Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
  */
 tiers?: Schemas.plan_tier[]
 /**
  * @description Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
  */
 tiers_mode?: ('graduated' | 'volume') | null
 /**
  * @description Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.
  */
 transform_usage?: Schemas.transform_usage | null
 /**
  * @description Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
  */
 trial_period_days?: number | null
 /**
  * @description Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
  */
 usage_type: ('licensed' | 'metered')
}

/**
 * @title PlanTier
 */
export type plan_tier = {
 /**
  * @description Price for the entire tier.
  */
 flat_amount?: number | null
 /**
  * @description Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
  */
 flat_amount_decimal?: string | null
 /**
  * @description Per unit price for units relevant to the tier.
  */
 unit_amount?: number | null
 /**
  * @description Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
  */
 unit_amount_decimal?: string | null
 /**
  * @description Up to and including to this quantity will be contained in the tier.
  */
 up_to?: number | null
}

/**
 * @title PlatformEarningFeeSource
 */
export type platform_earning_fee_source = {
 /**
  * @description Charge ID that created this application fee.
  */
 charge?: string
 /**
  * @description Payout ID that created this application fee.
  */
 payout?: string
 /**
  * @description Type of object that created the application fee.
  */
 type: ('charge' | 'payout')
}

/**
 * @title PortalBusinessProfile
 */
export type portal_business_profile = {
 /**
  * @description The messaging shown to customers in the portal.
  */
 headline?: string | null
 /**
  * @description A link to the business’s publicly available privacy policy.
  */
 privacy_policy_url?: string | null
 /**
  * @description A link to the business’s publicly available terms of service.
  */
 terms_of_service_url?: string | null
}

/**
 * @title PortalCustomerUpdate
 */
export type portal_customer_update = {
 /**
  * @description The types of customer updates that are supported. When empty, customers are not updateable.
  */
 allowed_updates: ('address' | 'email' | 'name' | 'phone' | 'shipping' | 'tax_id')[]
 /**
  * @description Whether the feature is enabled.
  */
 enabled: boolean
}

/**
 * @title PortalFeatures
 */
export type portal_features = {
 /**
  * @title PortalCustomerUpdate
  */
 customer_update: Schemas.portal_customer_update
 /**
  * @title PortalInvoiceList
  */
 invoice_history: Schemas.portal_invoice_list
 /**
  * @title PortalPaymentMethodUpdate
  */
 payment_method_update: Schemas.portal_payment_method_update
 /**
  * @title PortalSubscriptionCancel
  */
 subscription_cancel: Schemas.portal_subscription_cancel
 /**
  * @title PortalSubscriptionUpdate
  */
 subscription_update: Schemas.portal_subscription_update
}

/**
 * @title PortalFlowsAfterCompletionHostedConfirmation
 */
export type portal_flows_after_completion_hosted_confirmation = {
 /**
  * @description A custom message to display to the customer after the flow is completed.
  */
 custom_message?: string | null
}

/**
 * @title PortalFlowsAfterCompletionRedirect
 */
export type portal_flows_after_completion_redirect = {
 /**
  * @description The URL the customer will be redirected to after the flow is completed.
  */
 return_url: string
}

/**
 * @title PortalFlowsCouponOffer
 */
export type portal_flows_coupon_offer = {
 /**
  * @description The ID of the coupon to be offered.
  */
 coupon: string
}

/**
 * @title PortalFlowsFlow
 */
export type portal_flows_flow = {
 /**
  * @title PortalFlowsFlowAfterCompletion
  */
 after_completion: Schemas.portal_flows_flow_after_completion
 /**
  * @description Configuration when `flow.type=subscription_cancel`.
  */
 subscription_cancel?: Schemas.portal_flows_flow_subscription_cancel | null
 /**
  * @description Configuration when `flow.type=subscription_update`.
  */
 subscription_update?: Schemas.portal_flows_flow_subscription_update | null
 /**
  * @description Configuration when `flow.type=subscription_update_confirm`.
  */
 subscription_update_confirm?: Schemas.portal_flows_flow_subscription_update_confirm | null
 /**
  * @description Type of flow that the customer will go through.
  */
 type: ('payment_method_update' | 'subscription_cancel' | 'subscription_update' | 'subscription_update_confirm')
}

/**
 * @title PortalFlowsFlowAfterCompletion
 */
export type portal_flows_flow_after_completion = {
 /**
  * @description Configuration when `after_completion.type=hosted_confirmation`.
  */
 hosted_confirmation?: Schemas.portal_flows_after_completion_hosted_confirmation | null
 /**
  * @description Configuration when `after_completion.type=redirect`.
  */
 redirect?: Schemas.portal_flows_after_completion_redirect | null
 /**
  * @description The specified type of behavior after the flow is completed.
  */
 type: ('hosted_confirmation' | 'portal_homepage' | 'redirect')
}

/**
 * @title PortalFlowsFlowSubscriptionCancel
 */
export type portal_flows_flow_subscription_cancel = {
 /**
  * @description Specify a retention strategy to be used in the cancellation flow.
  */
 retention?: Schemas.portal_flows_retention | null
 /**
  * @description The ID of the subscription to be canceled.
  */
 subscription: string
}

/**
 * @title PortalFlowsFlowSubscriptionUpdate
 */
export type portal_flows_flow_subscription_update = {
 /**
  * @description The ID of the subscription to be updated.
  */
 subscription: string
}

/**
 * @title PortalFlowsFlowSubscriptionUpdateConfirm
 */
export type portal_flows_flow_subscription_update_confirm = {
 /**
  * @description The coupon or promotion code to apply to this subscription update.
  */
 discounts?: Schemas.portal_flows_subscription_update_confirm_discount[] | null
 /**
  * @description The [subscription item](https://stripe.com/docs/api/subscription_items) to be updated through this flow. Currently, only up to one may be specified and subscriptions with multiple items are not updatable.
  */
 items: Schemas.portal_flows_subscription_update_confirm_item[]
 /**
  * @description The ID of the subscription to be updated.
  */
 subscription: string
}

/**
 * @title PortalFlowsRetention
 */
export type portal_flows_retention = {
 /**
  * @description Configuration when `retention.type=coupon_offer`.
  */
 coupon_offer?: Schemas.portal_flows_coupon_offer | null
 /**
  * @description Type of retention strategy that will be used.
  */
 type: 'coupon_offer'
}

/**
 * @title PortalFlowsSubscriptionUpdateConfirmDiscount
 */
export type portal_flows_subscription_update_confirm_discount = {
 /**
  * @description The ID of the coupon to apply to this subscription update.
  */
 coupon?: string | null
 /**
  * @description The ID of a promotion code to apply to this subscription update.
  */
 promotion_code?: string | null
}

/**
 * @title PortalFlowsSubscriptionUpdateConfirmItem
 */
export type portal_flows_subscription_update_confirm_item = {
 /**
  * @description The ID of the [subscription item](https://stripe.com/docs/api/subscriptions/object#subscription_object-items-data-id) to be updated.
  */
 id?: string | null
 /**
  * @description The price the customer should subscribe to through this flow. The price must also be included in the configuration's [`features.subscription_update.products`](https://stripe.com/docs/api/customer_portal/configuration#portal_configuration_object-features-subscription_update-products).
  */
 price?: string | null
 /**
  * @description [Quantity](https://stripe.com/docs/subscriptions/quantities) for this item that the customer should subscribe to through this flow.
  */
 quantity?: number
}

/**
 * @title PortalInvoiceList
 */
export type portal_invoice_list = {
 /**
  * @description Whether the feature is enabled.
  */
 enabled: boolean
}

/**
 * @title PortalLoginPage
 */
export type portal_login_page = {
 /**
  * @description If `true`, a shareable `url` will be generated that will take your customers to a hosted login page for the customer portal.
  * 
  * If `false`, the previously generated `url`, if any, will be deactivated.
  */
 enabled: boolean
 /**
  * @description A shareable URL to the hosted portal login page. Your customers will be able to log in with their [email](https://stripe.com/docs/api/customers/object#customer_object-email) and receive a link to their customer portal.
  */
 url?: string | null
}

/**
 * @title PortalPaymentMethodUpdate
 */
export type portal_payment_method_update = {
 /**
  * @description Whether the feature is enabled.
  */
 enabled: boolean
}

/**
 * @title PortalResourceScheduleUpdateAtPeriodEnd
 */
export type portal_resource_schedule_update_at_period_end = {
 /**
  * @description List of conditions. When any condition is true, an update will be scheduled at the end of the current period.
  */
 conditions: Schemas.portal_resource_schedule_update_at_period_end_condition[]
}

/**
 * @title PortalResourceScheduleUpdateAtPeriodEndCondition
 */
export type portal_resource_schedule_update_at_period_end_condition = {
 /**
  * @description The type of condition.
  */
 type: ('decreasing_item_amount' | 'shortening_interval')
}

/**
 * @title PortalSubscriptionCancel
 */
export type portal_subscription_cancel = {
 /**
  * @title PortalSubscriptionCancellationReason
  */
 cancellation_reason: Schemas.portal_subscription_cancellation_reason
 /**
  * @description Whether the feature is enabled.
  */
 enabled: boolean
 /**
  * @description Whether to cancel subscriptions immediately or at the end of the billing period.
  */
 mode: ('at_period_end' | 'immediately')
 /**
  * @description Whether to create prorations when canceling subscriptions. Possible values are `none` and `create_prorations`.
  */
 proration_behavior: ('always_invoice' | 'create_prorations' | 'none')
}

/**
 * @title PortalSubscriptionCancellationReason
 */
export type portal_subscription_cancellation_reason = {
 /**
  * @description Whether the feature is enabled.
  */
 enabled: boolean
 /**
  * @description Which cancellation reasons will be given as options to the customer.
  */
 options: ('customer_service' | 'low_quality' | 'missing_features' | 'other' | 'switched_service' | 'too_complex' | 'too_expensive' | 'unused')[]
}

/**
 * @title PortalSubscriptionUpdate
 */
export type portal_subscription_update = {
 /**
  * @description The types of subscription updates that are supported for items listed in the `products` attribute. When empty, subscriptions are not updateable.
  */
 default_allowed_updates: ('price' | 'promotion_code' | 'quantity')[]
 /**
  * @description Whether the feature is enabled.
  */
 enabled: boolean
 /**
  * @description The list of up to 10 products that support subscription updates.
  */
 products?: Schemas.portal_subscription_update_product[] | null
 /**
  * @description Determines how to handle prorations resulting from subscription updates. Valid values are `none`, `create_prorations`, and `always_invoice`. Defaults to a value of `none` if you don't set it during creation.
  */
 proration_behavior: ('always_invoice' | 'create_prorations' | 'none')
 /**
  * @title PortalResourceScheduleUpdateAtPeriodEnd
  */
 schedule_at_period_end: Schemas.portal_resource_schedule_update_at_period_end
}

/**
 * @title PortalSubscriptionUpdateProduct
 */
export type portal_subscription_update_product = {
 /**
  * @title PortalSubscriptionUpdateProductAdjustableQuantity
  */
 adjustable_quantity: Schemas.portal_subscription_update_product_adjustable_quantity
 /**
  * @description The list of price IDs which, when subscribed to, a subscription can be updated.
  */
 prices: string[]
 /**
  * @description The product ID.
  */
 product: string
}

/**
 * @title PortalSubscriptionUpdateProductAdjustableQuantity
 */
export type portal_subscription_update_product_adjustable_quantity = {
 /**
  * @description If true, the quantity can be adjusted to any non-negative integer.
  */
 enabled: boolean
 /**
  * @description The maximum quantity that can be set for the product.
  */
 maximum?: number | null
 /**
  * @description The minimum quantity that can be set for the product.
  */
 minimum: number
}

/**
 * @title Price
 * @description Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
 * [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
 * 
 * For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
 * 
 * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview).
 */
export type price = {
 /**
  * @description Whether the price can be used for new purchases.
  */
 active: boolean
 /**
  * @description Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
  */
 billing_scheme: ('per_unit' | 'tiered')
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
  */
 currency_options?: Record<string, Schemas.currency_option>
 /**
  * @description When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
  */
 custom_unit_amount?: Schemas.custom_unit_amount | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
  */
 lookup_key?: string | null
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description A brief description of the price, hidden from customers.
  */
 nickname?: string | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'price'
 /**
  * @description The ID of the product this price is associated with.
  */
 product: (string | Schemas.product | Schemas.deleted_product)
 /**
  * @description The recurring components of a price such as `interval` and `usage_type`.
  */
 recurring?: Schemas.recurring | null
 /**
  * @description Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
  */
 tax_behavior?: ('exclusive' | 'inclusive' | 'unspecified') | null
 /**
  * @description Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
  */
 tiers?: Schemas.price_tier[]
 /**
  * @description Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
  */
 tiers_mode?: ('graduated' | 'volume') | null
 /**
  * @description Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.
  */
 transform_quantity?: Schemas.transform_quantity | null
 /**
  * @description One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
  */
 type: ('one_time' | 'recurring')
 /**
  * @description The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
  */
 unit_amount?: number | null
 /**
  * @description The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
  */
 unit_amount_decimal?: string | null
}

/**
 * @title PriceTier
 */
export type price_tier = {
 /**
  * @description Price for the entire tier.
  */
 flat_amount?: number | null
 /**
  * @description Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
  */
 flat_amount_decimal?: string | null
 /**
  * @description Per unit price for units relevant to the tier.
  */
 unit_amount?: number | null
 /**
  * @description Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
  */
 unit_amount_decimal?: string | null
 /**
  * @description Up to and including to this quantity will be contained in the tier.
  */
 up_to?: number | null
}

/**
 * @title Product
 * @description Products describe the specific goods or services you offer to your customers.
 * For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
 * They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Payment Links, Checkout, and Subscriptions.
 * 
 * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription),
 * [share a Payment Link](https://stripe.com/docs/payment-links),
 * [accept payments with Checkout](https://stripe.com/docs/payments/accept-a-payment#create-product-prices-upfront),
 * and more about [Products and Prices](https://stripe.com/docs/products-prices/overview)
 */
export type product = {
 /**
  * @description Whether the product is currently available for purchase.
  */
 active: boolean
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description The ID of the [Price](https://stripe.com/docs/api/prices) object that is the default price for this product.
  */
 default_price?: (string | Schemas.price) | null
 /**
  * @description The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
  */
 description?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
  */
 images: string[]
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description A list of up to 15 marketing features for this product. These are displayed in [pricing tables](https://stripe.com/docs/payments/checkout/pricing-table).
  */
 marketing_features: Schemas.product_marketing_feature[]
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description The product's name, meant to be displayable to the customer.
  */
 name: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'product'
 /**
  * @description The dimensions of this product for shipping purposes.
  */
 package_dimensions?: Schemas.package_dimensions | null
 /**
  * @description Whether this product is shipped (i.e., physical goods).
  */
 shippable?: boolean | null
 /**
  * @description Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used. Only used for subscription payments.
  */
 statement_descriptor?: string | null
 /**
  * @description A [tax code](https://stripe.com/docs/tax/tax-categories) ID.
  */
 tax_code?: (string | Schemas.tax_code) | null
 /**
  * @description A label that represents units of this product. When set, this will be included in customers' receipts, invoices, Checkout, and the customer portal.
  */
 unit_label?: string | null
 /**
  * @description Time at which the object was last updated. Measured in seconds since the Unix epoch.
  */
 updated: number
 /**
  * @description A URL of a publicly-accessible webpage for this product.
  */
 url?: string | null
}

/**
 * @title ProductFeature
 * @description A product_feature represents an attachment between a feature and a product.
 * When a product is purchased that has a feature attached, Stripe will create an entitlement to the feature for the purchasing customer.
 */
export type product_feature = {
 /**
  * @title Feature
  * @description A feature represents a monetizable ability or functionality in your system.
  * Features can be assigned to products, and when those products are purchased, Stripe will create an entitlement to the feature for the purchasing customer.
  */
 entitlement_feature: Schemas.entitlementsfeature
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'product_feature'
}

/**
 * @title ProductMarketingFeature
 */
export type product_marketing_feature = {
 /**
  * @description The marketing feature name. Up to 80 characters long.
  */
 name?: string
}

/**
 * @title PromotionCode
 * @description A Promotion Code represents a customer-redeemable code for a [coupon](https://stripe.com/docs/api#coupons).
 * You can create multiple codes for a single coupon.
 * 
 * If you enable promotion codes in your [customer portal configuration](https://stripe.com/docs/customer-management/configure-portal), then customers can redeem a code themselves when updating a subscription in the portal.
 * Customers can also view the currently active promotion codes and coupons on each of their subscriptions in the portal.
 */
export type promotion_code = {
 /**
  * @description Whether the promotion code is currently active. A promotion code is only active if the coupon is also valid.
  */
 active: boolean
 /**
  * @description The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer. Valid characters are lower case letters (a-z), upper case letters (A-Z), and digits (0-9).
  */
 code: string
 /**
  * @title Coupon
  * @description A coupon contains information about a percent-off or amount-off discount you
  * might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),
  * [checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
  */
 coupon: Schemas.coupon
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description The customer that this promotion code can be used by.
  */
 customer?: (string | Schemas.customer | Schemas.deleted_customer) | null
 /**
  * @description Date at which the promotion code can no longer be redeemed.
  */
 expires_at?: number | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Maximum number of times this promotion code can be redeemed.
  */
 max_redemptions?: number | null
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'promotion_code'
 /**
  * @title PromotionCodesResourceRestrictions
  */
 restrictions: Schemas.promotion_codes_resource_restrictions
 /**
  * @description Number of times this promotion code has been used.
  */
 times_redeemed: number
}

/**
 * @title PromotionCodeCurrencyOption
 */
export type promotion_code_currency_option = {
 /**
  * @description Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work).
  */
 minimum_amount: number
}

/**
 * @title PromotionCodesResourceRestrictions
 */
export type promotion_codes_resource_restrictions = {
 /**
  * @description Promotion code restrictions defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
  */
 currency_options?: Record<string, Schemas.promotion_code_currency_option>
 /**
  * @description A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices
  */
 first_time_transaction: boolean
 /**
  * @description Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work).
  */
 minimum_amount?: number | null
 /**
  * @description Three-letter [ISO code](https://stripe.com/docs/currencies) for minimum_amount
  */
 minimum_amount_currency?: string | null
}

/**
 * @title Quote
 * @description A Quote is a way to model prices that you'd like to provide to a customer.
 * Once accepted, it will automatically create an invoice, subscription or subscription schedule.
 */
export type quote = {
 /**
  * @description Total before any discounts or taxes are applied.
  */
 amount_subtotal: number
 /**
  * @description Total after discounts and taxes are applied.
  */
 amount_total: number
 /**
  * @description ID of the Connect Application that created the quote.
  */
 application?: (string | Schemas.application | Schemas.deleted_application) | null
 /**
  * @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote.
  */
 application_fee_amount?: number | null
 /**
  * @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote.
  */
 application_fee_percent?: number | null
 /**
  * @title QuotesResourceAutomaticTax
  */
 automatic_tax: Schemas.quotes_resource_automatic_tax
 /**
  * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
  */
 collection_method: ('charge_automatically' | 'send_invoice')
 /**
  * @title QuotesResourceComputed
  */
 computed: Schemas.quotes_resource_computed
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency?: string | null
 /**
  * @description The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
  */
 customer?: (string | Schemas.customer | Schemas.deleted_customer) | null
 /**
  * @description The tax rates applied to this quote.
  */
 default_tax_rates?: (string | Schemas.tax_rate)[]
 /**
  * @description A description that will be displayed on the quote PDF.
  */
 description?: string | null
 /**
  * @description The discounts applied to this quote.
  */
 discounts: (string | Schemas.discount)[]
 /**
  * @description The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
  */
 expires_at: number
 /**
  * @description A footer that will be displayed on the quote PDF.
  */
 footer?: string | null
 /**
  * @description Details of the quote that was cloned. See the [cloning documentation](https://stripe.com/docs/quotes/clone) for more details.
  */
 from_quote?: Schemas.quotes_resource_from_quote | null
 /**
  * @description A header that will be displayed on the quote PDF.
  */
 header?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The invoice that was created from this quote.
  */
 invoice?: (string | Schemas.invoice | Schemas.deleted_invoice) | null
 /**
  * @title InvoiceSettingQuoteSetting
  */
 invoice_settings: Schemas.invoice_setting_quote_setting
 /**
  * @title QuotesResourceListLineItems
  * @description A list of items the customer is being quoted for.
  */
 line_items?: {
  /**
   * @description Details about each object.
   */
  data: Schemas.item[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 }
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize).
  */
 number?: string | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'quote'
 /**
  * @description The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details.
  */
 on_behalf_of?: (string | Schemas.account) | null
 /**
  * @description The status of the quote.
  */
 status: ('accepted' | 'canceled' | 'draft' | 'open')
 /**
  * @title QuotesResourceStatusTransitions
  */
 status_transitions: Schemas.quotes_resource_status_transitions
 /**
  * @description The subscription that was created or updated from this quote.
  */
 subscription?: (string | Schemas.subscription) | null
 /**
  * @title QuotesResourceSubscriptionDataSubscriptionData
  */
 subscription_data: Schemas.quotes_resource_subscription_data_subscription_data
 /**
  * @description The subscription schedule that was created or updated from this quote.
  */
 subscription_schedule?: (string | Schemas.subscription_schedule) | null
 /**
  * @description ID of the test clock this quote belongs to.
  */
 test_clock?: (string | Schemas.test_helperstest_clock) | null
 /**
  * @title QuotesResourceTotalDetails
  */
 total_details: Schemas.quotes_resource_total_details
 /**
  * @description The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices.
  */
 transfer_data?: Schemas.quotes_resource_transfer_data | null
}

/**
 * @title QuotesResourceAutomaticTax
 */
export type quotes_resource_automatic_tax = {
 /**
  * @description Automatically calculate taxes
  */
 enabled: boolean
 /**
  * @description The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
  */
 liability?: Schemas.connect_account_reference | null
 /**
  * @description The tax provider powering automatic tax.
  */
 provider?: string | null
 /**
  * @description The status of the most recent automated tax calculation for this quote.
  */
 status?: ('complete' | 'failed' | 'requires_location_inputs') | null
}

/**
 * @title QuotesResourceComputed
 */
export type quotes_resource_computed = {
 /**
  * @description The definitive totals and line items the customer will be charged on a recurring basis. Takes into account the line items with recurring prices and discounts with `duration=forever` coupons only. Defaults to `null` if no inputted line items with recurring prices.
  */
 recurring?: Schemas.quotes_resource_recurring | null
 /**
  * @title QuotesResourceUpfront
  */
 upfront: Schemas.quotes_resource_upfront
}

/**
 * @title QuotesResourceFromQuote
 */
export type quotes_resource_from_quote = {
 /**
  * @description Whether this quote is a revision of a different quote.
  */
 is_revision: boolean
 /**
  * @description The quote that was cloned.
  */
 quote: (string | Schemas.quote)
}

/**
 * @title QuotesResourceRecurring
 */
export type quotes_resource_recurring = {
 /**
  * @description Total before any discounts or taxes are applied.
  */
 amount_subtotal: number
 /**
  * @description Total after discounts and taxes are applied.
  */
 amount_total: number
 /**
  * @description The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
  */
 interval: ('day' | 'month' | 'week' | 'year')
 /**
  * @description The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
  */
 interval_count: number
 /**
  * @title QuotesResourceTotalDetails
  */
 total_details: Schemas.quotes_resource_total_details
}

/**
 * @title QuotesResourceStatusTransitions
 */
export type quotes_resource_status_transitions = {
 /**
  * @description The time that the quote was accepted. Measured in seconds since Unix epoch.
  */
 accepted_at?: number | null
 /**
  * @description The time that the quote was canceled. Measured in seconds since Unix epoch.
  */
 canceled_at?: number | null
 /**
  * @description The time that the quote was finalized. Measured in seconds since Unix epoch.
  */
 finalized_at?: number | null
}

/**
 * @title QuotesResourceSubscriptionDataBillingMode
 * @description The billing mode of the quote.
 */
export type quotes_resource_subscription_data_billing_mode = {
 /**
  * @description Controls how prorations and invoices for subscriptions are calculated and orchestrated.
  */
 type: ('classic' | 'flexible')
}

/**
 * @title QuotesResourceSubscriptionDataSubscriptionData
 */
export type quotes_resource_subscription_data_subscription_data = {
 /**
  * @title QuotesResourceSubscriptionDataBillingMode
  * @description The billing mode of the quote.
  */
 billing_mode: Schemas.quotes_resource_subscription_data_billing_mode
 /**
  * @description The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
  */
 description?: string | null
 /**
  * @description When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch.
  */
 effective_date?: number | null
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on the subscription or subscription schedule when the quote is accepted. If a recurring price is included in `line_items`, this field will be passed to the resulting subscription's `metadata` field. If `subscription_data.effective_date` is used, this field will be passed to the resulting subscription schedule's `phases.metadata` field. Unlike object-level metadata, this field is declarative. Updates will clear prior values.
  */
 metadata?: Record<string, string> | null
 /**
  * @description Integer representing the number of trial period days before the customer is charged for the first time.
  */
 trial_period_days?: number | null
}

/**
 * @title QuotesResourceTotalDetails
 */
export type quotes_resource_total_details = {
 /**
  * @description This is the sum of all the discounts.
  */
 amount_discount: number
 /**
  * @description This is the sum of all the shipping amounts.
  */
 amount_shipping?: number | null
 /**
  * @description This is the sum of all the tax amounts.
  */
 amount_tax: number
 /**
  * @title QuotesResourceTotalDetailsResourceBreakdown
  */
 breakdown?: Schemas.quotes_resource_total_details_resource_breakdown
}

/**
 * @title QuotesResourceTotalDetailsResourceBreakdown
 */
export type quotes_resource_total_details_resource_breakdown = {
 /**
  * @description The aggregated discounts.
  */
 discounts: Schemas.line_items_discount_amount[]
 /**
  * @description The aggregated tax amounts by rate.
  */
 taxes: Schemas.line_items_tax_amount[]
}

/**
 * @title QuotesResourceTransferData
 */
export type quotes_resource_transfer_data = {
 /**
  * @description The amount in cents (or local equivalent) that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.
  */
 amount?: number | null
 /**
  * @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount will be transferred to the destination.
  */
 amount_percent?: number | null
 /**
  * @description The account where funds from the payment will be transferred to upon payment success.
  */
 destination: (string | Schemas.account)
}

/**
 * @title QuotesResourceUpfront
 */
export type quotes_resource_upfront = {
 /**
  * @description Total before any discounts or taxes are applied.
  */
 amount_subtotal: number
 /**
  * @description Total after discounts and taxes are applied.
  */
 amount_total: number
 /**
  * @title QuotesResourceListLineItems
  * @description The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.
  */
 line_items?: {
  /**
   * @description Details about each object.
   */
  data: Schemas.item[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 }
 /**
  * @title QuotesResourceTotalDetails
  */
 total_details: Schemas.quotes_resource_total_details
}

/**
 * @title RadarEarlyFraudWarning
 * @description An early fraud warning indicates that the card issuer has notified us that a
 * charge may be fraudulent.
 * 
 * Related guide: [Early fraud warnings](https://stripe.com/docs/disputes/measuring#early-fraud-warnings)
 */
export type radarearly_fraud_warning = {
 /**
  * @description An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later.
  */
 actionable: boolean
 /**
  * @description ID of the charge this early fraud warning is for, optionally expanded.
  */
 charge: (string | Schemas.charge)
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`.
  */
 fraud_type: string
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'radar.early_fraud_warning'
 /**
  * @description ID of the Payment Intent this early fraud warning is for, optionally expanded.
  */
 payment_intent?: (string | Schemas.payment_intent)
}

/**
 * @title RadarListList
 * @description Value lists allow you to group values together which can then be referenced in rules.
 * 
 * Related guide: [Default Stripe lists](https://stripe.com/docs/radar/lists#managing-list-items)
 */
export type radarvalue_list = {
 /**
  * @description The name of the value list for use in rules.
  */
 alias: string
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description The name or email address of the user who created this value list.
  */
 created_by: string
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The type of items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, `customer_id`, `sepa_debit_fingerprint`, or `us_bank_account_fingerprint`.
  */
 item_type: ('card_bin' | 'card_fingerprint' | 'case_sensitive_string' | 'country' | 'customer_id' | 'email' | 'ip_address' | 'sepa_debit_fingerprint' | 'string' | 'us_bank_account_fingerprint')
 /**
  * @title RadarListListItemList
  * @description List of items contained within this value list.
  */
 list_items: {
  /**
   * @description Details about each object.
   */
  data: Schemas.radarvalue_list_item[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 }
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description The name of the value list.
  */
 name: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'radar.value_list'
}

/**
 * @title RadarListListItem
 * @description Value list items allow you to add specific values to a given Radar value list, which can then be used in rules.
 * 
 * Related guide: [Managing list items](https://stripe.com/docs/radar/lists#managing-list-items)
 */
export type radarvalue_list_item = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description The name or email address of the user who added this item to the value list.
  */
 created_by: string
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'radar.value_list_item'
 /**
  * @description The value of the item.
  */
 value: string
 /**
  * @description The identifier of the value list this item belongs to.
  */
 value_list: string
}

/**
 * @title RadarRadarOptions
 * @description Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information.
 */
export type radar_radar_options = {
 /**
  * @description A [Radar Session](https://stripe.com/docs/radar/radar-session) is a snapshot of the browser metadata and device details that help Radar make more accurate predictions on your payments.
  */
 session?: string
}

/**
 * @title RadarReviewResourceLocation
 */
export type radar_review_resource_location = {
 /**
  * @description The city where the payment originated.
  */
 city?: string | null
 /**
  * @description Two-letter ISO code representing the country where the payment originated.
  */
 country?: string | null
 /**
  * @description The geographic latitude where the payment originated.
  */
 latitude?: number | null
 /**
  * @description The geographic longitude where the payment originated.
  */
 longitude?: number | null
 /**
  * @description The state/county/province/region where the payment originated.
  */
 region?: string | null
}

/**
 * @title RadarReviewResourceSession
 */
export type radar_review_resource_session = {
 /**
  * @description The browser used in this browser session (e.g., `Chrome`).
  */
 browser?: string | null
 /**
  * @description Information about the device used for the browser session (e.g., `Samsung SM-G930T`).
  */
 device?: string | null
 /**
  * @description The platform for the browser session (e.g., `Macintosh`).
  */
 platform?: string | null
 /**
  * @description The version for the browser session (e.g., `61.0.3163.100`).
  */
 version?: string | null
}

/**
 * @title received_payment_method_details_financial_account
 */
export type received_payment_method_details_financial_account = {
 /**
  * @description The FinancialAccount ID.
  */
 id: string
 /**
  * @description The rails the ReceivedCredit was sent over. A FinancialAccount can only send funds over `stripe`.
  */
 network: 'stripe'
}

/**
 * @title Recurring
 */
export type recurring = {
 /**
  * @description The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
  */
 interval: ('day' | 'month' | 'week' | 'year')
 /**
  * @description The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
  */
 interval_count: number
 /**
  * @description The meter tracking the usage of a metered price
  */
 meter?: string | null
 /**
  * @description Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
  */
 usage_type: ('licensed' | 'metered')
}

/**
 * @title Refund
 * @description Refund objects allow you to refund a previously created charge that isn't
 * refunded yet. Funds are refunded to the credit or debit card that's
 * initially charged.
 * 
 * Related guide: [Refunds](https://stripe.com/docs/refunds)
 */
export type refund = {
 /**
  * @description Amount, in cents (or local equivalent).
  */
 amount: number
 /**
  * @description Balance transaction that describes the impact on your account balance.
  */
 balance_transaction?: (string | Schemas.balance_transaction) | null
 /**
  * @description ID of the charge that's refunded.
  */
 charge?: (string | Schemas.charge) | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description An arbitrary string attached to the object. You can use this for displaying to users (available on non-card refunds only).
  */
 description?: string
 /**
  * @title refund_destination_details
  */
 destination_details?: Schemas.refund_destination_details
 /**
  * @description After the refund fails, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
  */
 failure_balance_transaction?: (string | Schemas.balance_transaction)
 /**
  * @description Provides the reason for the refund failure. Possible values are: `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request`, or `unknown`.
  */
 failure_reason?: string
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description For payment methods without native refund support (for example, Konbini, PromptPay), provide an email address for the customer to receive refund instructions.
  */
 instructions_email?: string
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @title RefundNextAction
  */
 next_action?: Schemas.refund_next_action
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'refund'
 /**
  * @description ID of the PaymentIntent that's refunded.
  */
 payment_intent?: (string | Schemas.payment_intent) | null
 /**
  * @description Provides the reason for why the refund is pending. Possible values are: `processing`, `insufficient_funds`, or `charge_pending`.
  */
 pending_reason?: ('charge_pending' | 'insufficient_funds' | 'processing')
 /**
  * @title PaymentFlowsPaymentIntentPresentmentDetails
  */
 presentment_details?: Schemas.payment_flows_payment_intent_presentment_details
 /**
  * @description Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
  */
 reason?: ('duplicate' | 'expired_uncaptured_charge' | 'fraudulent' | 'requested_by_customer') | null
 /**
  * @description This is the transaction number that appears on email receipts sent for this refund.
  */
 receipt_number?: string | null
 /**
  * @description The transfer reversal that's associated with the refund. Only present if the charge came from another Stripe account.
  */
 source_transfer_reversal?: (string | Schemas.transfer_reversal) | null
 /**
  * @description Status of the refund. This can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Learn more about [failed refunds](https://stripe.com/docs/refunds#failed-refunds).
  */
 status?: string | null
 /**
  * @description This refers to the transfer reversal object if the accompanying transfer reverses. This is only applicable if the charge was created using the destination parameter.
  */
 transfer_reversal?: (string | Schemas.transfer_reversal) | null
}

/**
 * @title refund_destination_details
 */
export type refund_destination_details = {
 /**
  * @title destination_details_unimplemented
  */
 affirm?: Schemas.destination_details_unimplemented
 /**
  * @title destination_details_unimplemented
  */
 afterpay_clearpay?: Schemas.destination_details_unimplemented
 /**
  * @title destination_details_unimplemented
  */
 alipay?: Schemas.destination_details_unimplemented
 /**
  * @title destination_details_unimplemented
  */
 alma?: Schemas.destination_details_unimplemented
 /**
  * @title destination_details_unimplemented
  */
 amazon_pay?: Schemas.destination_details_unimplemented
 /**
  * @title destination_details_unimplemented
  */
 au_bank_transfer?: Schemas.destination_details_unimplemented
 /**
  * @title refund_destination_details_blik
  */
 blik?: Schemas.refund_destination_details_blik
 /**
  * @title refund_destination_details_br_bank_transfer
  */
 br_bank_transfer?: Schemas.refund_destination_details_br_bank_transfer
 /**
  * @title refund_destination_details_card
  */
 card?: Schemas.refund_destination_details_card
 /**
  * @title destination_details_unimplemented
  */
 cashapp?: Schemas.destination_details_unimplemented
 /**
  * @title destination_details_unimplemented
  */
 customer_cash_balance?: Schemas.destination_details_unimplemented
 /**
  * @title destination_details_unimplemented
  */
 eps?: Schemas.destination_details_unimplemented
 /**
  * @title refund_destination_details_eu_bank_transfer
  */
 eu_bank_transfer?: Schemas.refund_destination_details_eu_bank_transfer
 /**
  * @title refund_destination_details_gb_bank_transfer
  */
 gb_bank_transfer?: Schemas.refund_destination_details_gb_bank_transfer
 /**
  * @title destination_details_unimplemented
  */
 giropay?: Schemas.destination_details_unimplemented
 /**
  * @title destination_details_unimplemented
  */
 grabpay?: Schemas.destination_details_unimplemented
 /**
  * @title refund_destination_details_jp_bank_transfer
  */
 jp_bank_transfer?: Schemas.refund_destination_details_jp_bank_transfer
 /**
  * @title destination_details_unimplemented
  */
 klarna?: Schemas.destination_details_unimplemented
 /**
  * @title refund_destination_details_multibanco
  */
 multibanco?: Schemas.refund_destination_details_multibanco
 /**
  * @title refund_destination_details_mx_bank_transfer
  */
 mx_bank_transfer?: Schemas.refund_destination_details_mx_bank_transfer
 /**
  * @title destination_details_unimplemented
  */
 nz_bank_transfer?: Schemas.destination_details_unimplemented
 /**
  * @title refund_destination_details_p24
  */
 p24?: Schemas.refund_destination_details_p24
 /**
  * @title destination_details_unimplemented
  */
 paynow?: Schemas.destination_details_unimplemented
 /**
  * @title refund_destination_details_paypal
  */
 paypal?: Schemas.refund_destination_details_paypal
 /**
  * @title destination_details_unimplemented
  */
 pix?: Schemas.destination_details_unimplemented
 /**
  * @title destination_details_unimplemented
  */
 revolut?: Schemas.destination_details_unimplemented
 /**
  * @title destination_details_unimplemented
  */
 sofort?: Schemas.destination_details_unimplemented
 /**
  * @title refund_destination_details_swish
  */
 swish?: Schemas.refund_destination_details_swish
 /**
  * @title refund_destination_details_th_bank_transfer
  */
 th_bank_transfer?: Schemas.refund_destination_details_th_bank_transfer
 /**
  * @description The type of transaction-specific details of the payment method used in the refund (e.g., `card`). An additional hash is included on `destination_details` with a name matching this value. It contains information specific to the refund transaction.
  */
 type: string
 /**
  * @title refund_destination_details_us_bank_transfer
  */
 us_bank_transfer?: Schemas.refund_destination_details_us_bank_transfer
 /**
  * @title destination_details_unimplemented
  */
 wechat_pay?: Schemas.destination_details_unimplemented
 /**
  * @title destination_details_unimplemented
  */
 zip?: Schemas.destination_details_unimplemented
}

/**
 * @title refund_destination_details_blik
 */
export type refund_destination_details_blik = {
 /**
  * @description For refunds declined by the network, a decline code provided by the network which indicates the reason the refund failed.
  */
 network_decline_code?: string | null
 /**
  * @description The reference assigned to the refund.
  */
 reference?: string | null
 /**
  * @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
  */
 reference_status?: string | null
}

/**
 * @title refund_destination_details_br_bank_transfer
 */
export type refund_destination_details_br_bank_transfer = {
 /**
  * @description The reference assigned to the refund.
  */
 reference?: string | null
 /**
  * @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
  */
 reference_status?: string | null
}

/**
 * @title refund_destination_details_card
 */
export type refund_destination_details_card = {
 /**
  * @description Value of the reference number assigned to the refund.
  */
 reference?: string
 /**
  * @description Status of the reference number on the refund. This can be `pending`, `available` or `unavailable`.
  */
 reference_status?: string
 /**
  * @description Type of the reference number assigned to the refund.
  */
 reference_type?: string
 /**
  * @description The type of refund. This can be `refund`, `reversal`, or `pending`.
  */
 type: ('pending' | 'refund' | 'reversal')
}

/**
 * @title refund_destination_details_eu_bank_transfer
 */
export type refund_destination_details_eu_bank_transfer = {
 /**
  * @description The reference assigned to the refund.
  */
 reference?: string | null
 /**
  * @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
  */
 reference_status?: string | null
}

/**
 * @title refund_destination_details_gb_bank_transfer
 */
export type refund_destination_details_gb_bank_transfer = {
 /**
  * @description The reference assigned to the refund.
  */
 reference?: string | null
 /**
  * @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
  */
 reference_status?: string | null
}

/**
 * @title refund_destination_details_jp_bank_transfer
 */
export type refund_destination_details_jp_bank_transfer = {
 /**
  * @description The reference assigned to the refund.
  */
 reference?: string | null
 /**
  * @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
  */
 reference_status?: string | null
}

/**
 * @title refund_destination_details_multibanco
 */
export type refund_destination_details_multibanco = {
 /**
  * @description The reference assigned to the refund.
  */
 reference?: string | null
 /**
  * @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
  */
 reference_status?: string | null
}

/**
 * @title refund_destination_details_mx_bank_transfer
 */
export type refund_destination_details_mx_bank_transfer = {
 /**
  * @description The reference assigned to the refund.
  */
 reference?: string | null
 /**
  * @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
  */
 reference_status?: string | null
}

/**
 * @title refund_destination_details_p24
 */
export type refund_destination_details_p24 = {
 /**
  * @description The reference assigned to the refund.
  */
 reference?: string | null
 /**
  * @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
  */
 reference_status?: string | null
}

/**
 * @title refund_destination_details_paypal
 */
export type refund_destination_details_paypal = {
 /**
  * @description For refunds declined by the network, a decline code provided by the network which indicates the reason the refund failed.
  */
 network_decline_code?: string | null
}

/**
 * @title refund_destination_details_swish
 */
export type refund_destination_details_swish = {
 /**
  * @description For refunds declined by the network, a decline code provided by the network which indicates the reason the refund failed.
  */
 network_decline_code?: string | null
 /**
  * @description The reference assigned to the refund.
  */
 reference?: string | null
 /**
  * @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
  */
 reference_status?: string | null
}

/**
 * @title refund_destination_details_th_bank_transfer
 */
export type refund_destination_details_th_bank_transfer = {
 /**
  * @description The reference assigned to the refund.
  */
 reference?: string | null
 /**
  * @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
  */
 reference_status?: string | null
}

/**
 * @title refund_destination_details_us_bank_transfer
 */
export type refund_destination_details_us_bank_transfer = {
 /**
  * @description The reference assigned to the refund.
  */
 reference?: string | null
 /**
  * @description Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
  */
 reference_status?: string | null
}

/**
 * @title RefundNextAction
 */
export type refund_next_action = {
 /**
  * @title RefundNextActionDisplayDetails
  */
 display_details?: Schemas.refund_next_action_display_details
 /**
  * @description Type of the next action to perform.
  */
 type: string
}

/**
 * @title RefundNextActionDisplayDetails
 */
export type refund_next_action_display_details = {
 /**
  * @title EmailSent
  */
 email_sent: Schemas.email_sent
 /**
  * @description The expiry timestamp.
  */
 expires_at: number
}

/**
 * @title reporting_report_run
 * @description The Report Run object represents an instance of a report type generated with
 * specific run parameters. Once the object is created, Stripe begins processing the report.
 * When the report has finished running, it will give you a reference to a file
 * where you can retrieve your results. For an overview, see
 * [API Access to Reports](https://stripe.com/docs/reporting/statements/api).
 * 
 * Note that certain report types can only be run based on your live-mode data (not test-mode
 * data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
 */
export type reportingreport_run = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description If something should go wrong during the run, a message about the failure (populated when
  *  `status=failed`).
  */
 error?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description `true` if the report is run on live mode data and `false` if it is run on test mode data.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'reporting.report_run'
 /**
  * @title FinancialReportingFinanceReportRunRunParameters
  */
 parameters: Schemas.financial_reporting_finance_report_run_run_parameters
 /**
  * @description The ID of the [report type](https://stripe.com/docs/reports/report-types) to run, such as `"balance.summary.1"`.
  */
 report_type: string
 /**
  * @description The file object representing the result of the report run (populated when
  *  `status=succeeded`).
  */
 result?: Schemas.file | null
 /**
  * @description Status of this report run. This will be `pending` when the run is initially created.
  *  When the run finishes, this will be set to `succeeded` and the `result` field will be populated.
  *  Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.
  */
 status: string
 /**
  * @description Timestamp at which this run successfully finished (populated when
  *  `status=succeeded`). Measured in seconds since the Unix epoch.
  */
 succeeded_at?: number | null
}

/**
 * @title reporting_report_type
 * @description The Report Type resource corresponds to a particular type of report, such as
 * the "Activity summary" or "Itemized payouts" reports. These objects are
 * identified by an ID belonging to a set of enumerated values. See
 * [API Access to Reports documentation](https://stripe.com/docs/reporting/statements/api)
 * for those Report Type IDs, along with required and optional parameters.
 * 
 * Note that certain report types can only be run based on your live-mode data (not test-mode
 * data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
 */
export type reportingreport_type = {
 /**
  * @description Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch.
  */
 data_available_end: number
 /**
  * @description Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch.
  */
 data_available_start: number
 /**
  * @description List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.)
  */
 default_columns?: string[] | null
 /**
  * @description The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Human-readable name of the Report Type
  */
 name: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'reporting.report_type'
 /**
  * @description When this Report Type was latest updated. Measured in seconds since the Unix epoch.
  */
 updated: number
 /**
  * @description Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas.
  */
 version: number
}

/**
 * @title ReserveTransaction
 */
export type reserve_transaction = {
 amount: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'reserve_transaction'
}

/**
 * @title RadarReview
 * @description Reviews can be used to supplement automated fraud detection with human expertise.
 * 
 * Learn more about [Radar](/radar) and reviewing payments
 * [here](https://stripe.com/docs/radar/reviews).
 */
export type review = {
 /**
  * @description The ZIP or postal code of the card used, if applicable.
  */
 billing_zip?: string | null
 /**
  * @description The charge associated with this review.
  */
 charge?: (string | Schemas.charge) | null
 /**
  * @description The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, `redacted`, `canceled`, `payment_never_settled`, or `acknowledged`.
  */
 closed_reason?: ('approved' | 'canceled' | 'disputed' | 'redacted' | 'refunded' | 'refunded_as_fraud') | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The IP address where the payment originated.
  */
 ip_address?: string | null
 /**
  * @description Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address.
  */
 ip_address_location?: Schemas.radar_review_resource_location | null
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'review'
 /**
  * @description If `true`, the review needs action.
  */
 open: boolean
 /**
  * @description The reason the review was opened. One of `rule` or `manual`.
  */
 opened_reason: ('manual' | 'rule')
 /**
  * @description The PaymentIntent ID associated with this review, if one exists.
  */
 payment_intent?: (string | Schemas.payment_intent)
 /**
  * @description The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, `redacted`, `canceled`, `payment_never_settled`, or `acknowledged`.
  */
 reason: string
 /**
  * @description Information related to the browsing session of the user who initiated the payment.
  */
 session?: Schemas.radar_review_resource_session | null
}

/**
 * @title revolut_pay_underlying_payment_method_funding_details
 */
export type revolut_pay_underlying_payment_method_funding_details = {
 /**
  * @title payment_method_details_passthrough_card
  */
 card?: Schemas.payment_method_details_passthrough_card
 /**
  * @description funding type of the underlying payment method.
  */
 type?: 'card' | null
}

/**
 * @title RadarRule
 */
export type rule = {
 /**
  * @description The action taken on the payment.
  */
 action: string
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The predicate to evaluate the payment against.
  */
 predicate: string
}

/**
 * @title ScheduledQueryRun
 * @description If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll
 * receive a `sigma.scheduled_query_run.created` webhook each time the query
 * runs. The webhook contains a `ScheduledQueryRun` object, which you can use to
 * retrieve the query results.
 */
export type scheduled_query_run = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description When the query was run, Sigma contained a snapshot of your Stripe data at this time.
  */
 data_load_time: number
 /**
  * @title SigmaScheduledQueryRunError
  */
 error?: Schemas.sigma_scheduled_query_run_error
 /**
  * @description The file object representing the results of the query.
  */
 file?: Schemas.file | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'scheduled_query_run'
 /**
  * @description Time at which the result expires and is no longer available for download.
  */
 result_available_until: number
 /**
  * @description SQL for the query.
  */
 sql: string
 /**
  * @description The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise.
  */
 status: string
 /**
  * @description Title of the query.
  */
 title: string
}

/**
 * @title SchedulesPhaseAutomaticTax
 */
export type schedules_phase_automatic_tax = {
 /**
  * @description If Stripe disabled automatic tax, this enum describes why.
  */
 disabled_reason?: 'requires_location_inputs' | null
 /**
  * @description Whether Stripe automatically computes tax on invoices created during this phase.
  */
 enabled: boolean
 /**
  * @description The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
  */
 liability?: Schemas.connect_account_reference | null
}

/**
 * @title SecretServiceResourceScope
 */
export type secret_service_resource_scope = {
 /**
  * @description The secret scope type.
  */
 type: ('account' | 'user')
 /**
  * @description The user ID, if type is set to "user"
  */
 user?: string
}

/**
 * @title sepa_debit_generated_from
 */
export type sepa_debit_generated_from = {
 /**
  * @description The ID of the Charge that generated this PaymentMethod, if any.
  */
 charge?: (string | Schemas.charge) | null
 /**
  * @description The ID of the SetupAttempt that generated this PaymentMethod, if any.
  */
 setup_attempt?: (string | Schemas.setup_attempt) | null
}

/**
 * @title PaymentFlowsSetupIntentSetupAttempt
 * @description A SetupAttempt describes one attempted confirmation of a SetupIntent,
 * whether that confirmation is successful or unsuccessful. You can use
 * SetupAttempts to inspect details of a specific attempt at setting up a
 * payment method using a SetupIntent.
 */
export type setup_attempt = {
 /**
  * @description The value of [application](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-application) on the SetupIntent at the time of this confirmation.
  */
 application?: (string | Schemas.application) | null
 /**
  * @description If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.
  * 
  * It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
  */
 attach_to_self?: boolean
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description The value of [customer](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-customer) on the SetupIntent at the time of this confirmation.
  */
 customer?: (string | Schemas.customer | Schemas.deleted_customer) | null
 /**
  * @description Indicates the directions of money movement for which this payment method is intended to be used.
  * 
  * Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
  */
 flow_directions?: ('inbound' | 'outbound')[] | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'setup_attempt'
 /**
  * @description The value of [on_behalf_of](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-on_behalf_of) on the SetupIntent at the time of this confirmation.
  */
 on_behalf_of?: (string | Schemas.account) | null
 /**
  * @description ID of the payment method used with this SetupAttempt.
  */
 payment_method: (string | Schemas.payment_method)
 /**
  * @title SetupAttemptPaymentMethodDetails
  */
 payment_method_details: Schemas.setup_attempt_payment_method_details
 /**
  * @description The error encountered during this attempt to confirm the SetupIntent, if any.
  */
 setup_error?: Schemas.api_errors | null
 /**
  * @description ID of the SetupIntent that this attempt belongs to.
  */
 setup_intent: (string | Schemas.setup_intent)
 /**
  * @description Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`.
  */
 status: string
 /**
  * @description The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`.
  */
 usage: string
}

/**
 * @title SetupAttemptPaymentMethodDetails
 */
export type setup_attempt_payment_method_details = {
 /**
  * @title setup_attempt_payment_method_details_acss_debit
  */
 acss_debit?: Schemas.setup_attempt_payment_method_details_acss_debit
 /**
  * @title setup_attempt_payment_method_details_amazon_pay
  */
 amazon_pay?: Schemas.setup_attempt_payment_method_details_amazon_pay
 /**
  * @title setup_attempt_payment_method_details_au_becs_debit
  */
 au_becs_debit?: Schemas.setup_attempt_payment_method_details_au_becs_debit
 /**
  * @title setup_attempt_payment_method_details_bacs_debit
  */
 bacs_debit?: Schemas.setup_attempt_payment_method_details_bacs_debit
 /**
  * @title setup_attempt_payment_method_details_bancontact
  */
 bancontact?: Schemas.setup_attempt_payment_method_details_bancontact
 /**
  * @title setup_attempt_payment_method_details_boleto
  */
 boleto?: Schemas.setup_attempt_payment_method_details_boleto
 /**
  * @title setup_attempt_payment_method_details_card
  */
 card?: Schemas.setup_attempt_payment_method_details_card
 /**
  * @title setup_attempt_payment_method_details_card_present
  */
 card_present?: Schemas.setup_attempt_payment_method_details_card_present
 /**
  * @title setup_attempt_payment_method_details_cashapp
  */
 cashapp?: Schemas.setup_attempt_payment_method_details_cashapp
 /**
  * @title setup_attempt_payment_method_details_ideal
  */
 ideal?: Schemas.setup_attempt_payment_method_details_ideal
 /**
  * @title setup_attempt_payment_method_details_kakao_pay
  */
 kakao_pay?: Schemas.setup_attempt_payment_method_details_kakao_pay
 /**
  * @title setup_attempt_payment_method_details_klarna
  */
 klarna?: Schemas.setup_attempt_payment_method_details_klarna
 /**
  * @title setup_attempt_payment_method_details_kr_card
  */
 kr_card?: Schemas.setup_attempt_payment_method_details_kr_card
 /**
  * @title setup_attempt_payment_method_details_link
  */
 link?: Schemas.setup_attempt_payment_method_details_link
 /**
  * @title setup_attempt_payment_method_details_naver_pay
  */
 naver_pay?: Schemas.setup_attempt_payment_method_details_naver_pay
 /**
  * @title setup_attempt_payment_method_details_nz_bank_account
  */
 nz_bank_account?: Schemas.setup_attempt_payment_method_details_nz_bank_account
 /**
  * @title setup_attempt_payment_method_details_paypal
  */
 paypal?: Schemas.setup_attempt_payment_method_details_paypal
 /**
  * @title setup_attempt_payment_method_details_revolut_pay
  */
 revolut_pay?: Schemas.setup_attempt_payment_method_details_revolut_pay
 /**
  * @title setup_attempt_payment_method_details_sepa_debit
  */
 sepa_debit?: Schemas.setup_attempt_payment_method_details_sepa_debit
 /**
  * @title setup_attempt_payment_method_details_sofort
  */
 sofort?: Schemas.setup_attempt_payment_method_details_sofort
 /**
  * @description The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method.
  */
 type: string
 /**
  * @title setup_attempt_payment_method_details_us_bank_account
  */
 us_bank_account?: Schemas.setup_attempt_payment_method_details_us_bank_account
}

/**
 * @title setup_attempt_payment_method_details_acss_debit
 */
export type setup_attempt_payment_method_details_acss_debit = unknown

/**
 * @title setup_attempt_payment_method_details_amazon_pay
 */
export type setup_attempt_payment_method_details_amazon_pay = unknown

/**
 * @title setup_attempt_payment_method_details_au_becs_debit
 */
export type setup_attempt_payment_method_details_au_becs_debit = unknown

/**
 * @title setup_attempt_payment_method_details_bacs_debit
 */
export type setup_attempt_payment_method_details_bacs_debit = unknown

/**
 * @title setup_attempt_payment_method_details_bancontact
 */
export type setup_attempt_payment_method_details_bancontact = {
 /**
  * @description Bank code of bank associated with the bank account.
  */
 bank_code?: string | null
 /**
  * @description Name of the bank associated with the bank account.
  */
 bank_name?: string | null
 /**
  * @description Bank Identifier Code of the bank associated with the bank account.
  */
 bic?: string | null
 /**
  * @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
  */
 generated_sepa_debit?: (string | Schemas.payment_method) | null
 /**
  * @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
  */
 generated_sepa_debit_mandate?: (string | Schemas.mandate) | null
 /**
  * @description Last four characters of the IBAN.
  */
 iban_last4?: string | null
 /**
  * @description Preferred language of the Bancontact authorization page that the customer is redirected to.
  * Can be one of `en`, `de`, `fr`, or `nl`
  */
 preferred_language?: ('de' | 'en' | 'fr' | 'nl') | null
 /**
  * @description Owner's verified full name. Values are verified or provided by Bancontact directly
  * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 verified_name?: string | null
}

/**
 * @title setup_attempt_payment_method_details_boleto
 */
export type setup_attempt_payment_method_details_boleto = unknown

/**
 * @title setup_attempt_payment_method_details_card
 */
export type setup_attempt_payment_method_details_card = {
 /**
  * @description Card brand. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa` or `unknown`.
  */
 brand?: string | null
 /**
  * @description Check results by Card networks on Card address and CVC at the time of authorization
  */
 checks?: Schemas.setup_attempt_payment_method_details_card_checks | null
 /**
  * @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
  */
 country?: string | null
 /**
  * @description Two-digit number representing the card's expiration month.
  */
 exp_month?: number | null
 /**
  * @description Four-digit number representing the card's expiration year.
  */
 exp_year?: number | null
 /**
  * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  * 
  * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
  */
 fingerprint?: string | null
 /**
  * @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
  */
 funding?: string | null
 /**
  * @description The last four digits of the card.
  */
 last4?: string | null
 /**
  * @description Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.
  */
 network?: string | null
 /**
  * @description Populated if this authorization used 3D Secure authentication.
  */
 three_d_secure?: Schemas.three_d_secure_details | null
 /**
  * @description If this Card is part of a card wallet, this contains the details of the card wallet.
  */
 wallet?: Schemas.setup_attempt_payment_method_details_card_wallet | null
}

/**
 * @title setup_attempt_payment_method_details_card_checks
 */
export type setup_attempt_payment_method_details_card_checks = {
 /**
  * @description If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  */
 address_line1_check?: string | null
 /**
  * @description If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  */
 address_postal_code_check?: string | null
 /**
  * @description If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
  */
 cvc_check?: string | null
}

/**
 * @title setup_attempt_payment_method_details_card_present
 */
export type setup_attempt_payment_method_details_card_present = {
 /**
  * @description The ID of the Card PaymentMethod which was generated by this SetupAttempt.
  */
 generated_card?: (string | Schemas.payment_method) | null
 /**
  * @description Details about payments collected offline.
  */
 offline?: Schemas.payment_method_details_card_present_offline | null
}

/**
 * @title setup_attempt_payment_method_details_card_wallet
 */
export type setup_attempt_payment_method_details_card_wallet = {
 /**
  * @title payment_method_details_card_wallet_apple_pay
  */
 apple_pay?: Schemas.payment_method_details_card_wallet_apple_pay
 /**
  * @title payment_method_details_card_wallet_google_pay
  */
 google_pay?: Schemas.payment_method_details_card_wallet_google_pay
 /**
  * @description The type of the card wallet, one of `apple_pay`, `google_pay`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
  */
 type: ('apple_pay' | 'google_pay' | 'link')
}

/**
 * @title setup_attempt_payment_method_details_cashapp
 */
export type setup_attempt_payment_method_details_cashapp = unknown

/**
 * @title setup_attempt_payment_method_details_ideal
 */
export type setup_attempt_payment_method_details_ideal = {
 /**
  * @description The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `buut`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`.
  */
 bank?: ('abn_amro' | 'asn_bank' | 'bunq' | 'buut' | 'handelsbanken' | 'ing' | 'knab' | 'moneyou' | 'n26' | 'nn' | 'rabobank' | 'regiobank' | 'revolut' | 'sns_bank' | 'triodos_bank' | 'van_lanschot' | 'yoursafe') | null
 /**
  * @description The Bank Identifier Code of the customer's bank.
  */
 bic?: ('ABNANL2A' | 'ASNBNL21' | 'BITSNL2A' | 'BUNQNL2A' | 'BUUTNL2A' | 'FVLBNL22' | 'HANDNL2A' | 'INGBNL2A' | 'KNABNL2H' | 'MOYONL21' | 'NNBANL2G' | 'NTSBDEB1' | 'RABONL2U' | 'RBRBNL21' | 'REVOIE23' | 'REVOLT21' | 'SNSBNL2A' | 'TRIONL2U') | null
 /**
  * @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
  */
 generated_sepa_debit?: (string | Schemas.payment_method) | null
 /**
  * @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
  */
 generated_sepa_debit_mandate?: (string | Schemas.mandate) | null
 /**
  * @description Last four characters of the IBAN.
  */
 iban_last4?: string | null
 /**
  * @description Owner's verified full name. Values are verified or provided by iDEAL directly
  * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 verified_name?: string | null
}

/**
 * @title setup_attempt_payment_method_details_kakao_pay
 */
export type setup_attempt_payment_method_details_kakao_pay = unknown

/**
 * @title setup_attempt_payment_method_details_klarna
 */
export type setup_attempt_payment_method_details_klarna = unknown

/**
 * @title setup_attempt_payment_method_details_kr_card
 */
export type setup_attempt_payment_method_details_kr_card = unknown

/**
 * @title setup_attempt_payment_method_details_link
 */
export type setup_attempt_payment_method_details_link = unknown

/**
 * @title setup_attempt_payment_method_details_naver_pay
 */
export type setup_attempt_payment_method_details_naver_pay = {
 /**
  * @description Uniquely identifies this particular Naver Pay account. You can use this attribute to check whether two Naver Pay accounts are the same.
  */
 buyer_id?: string
}

/**
 * @title setup_attempt_payment_method_details_nz_bank_account
 */
export type setup_attempt_payment_method_details_nz_bank_account = unknown

/**
 * @title setup_attempt_payment_method_details_paypal
 */
export type setup_attempt_payment_method_details_paypal = unknown

/**
 * @title setup_attempt_payment_method_details_revolut_pay
 */
export type setup_attempt_payment_method_details_revolut_pay = unknown

/**
 * @title setup_attempt_payment_method_details_sepa_debit
 */
export type setup_attempt_payment_method_details_sepa_debit = unknown

/**
 * @title setup_attempt_payment_method_details_sofort
 */
export type setup_attempt_payment_method_details_sofort = {
 /**
  * @description Bank code of bank associated with the bank account.
  */
 bank_code?: string | null
 /**
  * @description Name of the bank associated with the bank account.
  */
 bank_name?: string | null
 /**
  * @description Bank Identifier Code of the bank associated with the bank account.
  */
 bic?: string | null
 /**
  * @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
  */
 generated_sepa_debit?: (string | Schemas.payment_method) | null
 /**
  * @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
  */
 generated_sepa_debit_mandate?: (string | Schemas.mandate) | null
 /**
  * @description Last four characters of the IBAN.
  */
 iban_last4?: string | null
 /**
  * @description Preferred language of the Sofort authorization page that the customer is redirected to.
  * Can be one of `en`, `de`, `fr`, or `nl`
  */
 preferred_language?: ('de' | 'en' | 'fr' | 'nl') | null
 /**
  * @description Owner's verified full name. Values are verified or provided by Sofort directly
  * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 verified_name?: string | null
}

/**
 * @title setup_attempt_payment_method_details_us_bank_account
 */
export type setup_attempt_payment_method_details_us_bank_account = unknown

/**
 * @title SetupIntent
 * @description A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
 * For example, you can use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
 * Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
 * 
 * Create a SetupIntent when you're ready to collect your customer's payment credentials.
 * Don't maintain long-lived, unconfirmed SetupIntents because they might not be valid.
 * The SetupIntent transitions through multiple [statuses](https://docs.stripe.com/payments/intents#intent-statuses) as it guides
 * you through the setup process.
 * 
 * Successful SetupIntents result in payment credentials that are optimized for future payments.
 * For example, cardholders in [certain regions](https://stripe.com/guides/strong-customer-authentication) might need to be run through
 * [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) during payment method collection
 * to streamline later [off-session payments](https://docs.stripe.com/payments/setup-intents).
 * If you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),
 * it automatically attaches the resulting payment method to that Customer after successful setup.
 * We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
 * PaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.
 * 
 * By using SetupIntents, you can reduce friction for your customers, even as regulations change over time.
 * 
 * Related guide: [Setup Intents API](https://docs.stripe.com/payments/setup-intents)
 */
export type setup_intent = {
 /**
  * @description ID of the Connect application that created the SetupIntent.
  */
 application?: (string | Schemas.application) | null
 /**
  * @description If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.
  * 
  * It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
  */
 attach_to_self?: boolean
 /**
  * @description Settings for dynamic payment methods compatible with this Setup Intent
  */
 automatic_payment_methods?: Schemas.payment_flows_automatic_payment_methods_setup_intent | null
 /**
  * @description Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`.
  */
 cancellation_reason?: ('abandoned' | 'duplicate' | 'requested_by_customer') | null
 /**
  * @description The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
  * 
  * The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
  */
 client_secret?: string | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description ID of the Customer this SetupIntent belongs to, if one exists.
  * 
  * If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
  */
 customer?: (string | Schemas.customer | Schemas.deleted_customer) | null
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description?: string | null
 /**
  * @description Indicates the directions of money movement for which this payment method is intended to be used.
  * 
  * Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
  */
 flow_directions?: ('inbound' | 'outbound')[] | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The error encountered in the previous SetupIntent confirmation.
  */
 last_setup_error?: Schemas.api_errors | null
 /**
  * @description The most recent SetupAttempt for this SetupIntent.
  */
 latest_attempt?: (string | Schemas.setup_attempt) | null
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description ID of the multi use Mandate generated by the SetupIntent.
  */
 mandate?: (string | Schemas.mandate) | null
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description If present, this property tells you what actions you need to take in order for your customer to continue payment setup.
  */
 next_action?: Schemas.setup_intent_next_action | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'setup_intent'
 /**
  * @description The account (if any) for which the setup is intended.
  */
 on_behalf_of?: (string | Schemas.account) | null
 /**
  * @description ID of the payment method used with this SetupIntent. If the payment method is `card_present` and isn't a digital wallet, then the [generated_card](https://docs.stripe.com/api/setup_attempts/object#setup_attempt_object-payment_method_details-card_present-generated_card) associated with the `latest_attempt` is attached to the Customer instead.
  */
 payment_method?: (string | Schemas.payment_method) | null
 /**
  * @description Information about the [payment method configuration](https://stripe.com/docs/api/payment_method_configurations) used for this Setup Intent.
  */
 payment_method_configuration_details?: Schemas.payment_method_config_biz_payment_method_configuration_details | null
 /**
  * @description Payment method-specific configuration for this SetupIntent.
  */
 payment_method_options?: Schemas.setup_intent_payment_method_options | null
 /**
  * @description The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. A list of valid payment method types can be found [here](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type).
  */
 payment_method_types: string[]
 /**
  * @description ID of the single_use Mandate generated by the SetupIntent.
  */
 single_use_mandate?: (string | Schemas.mandate) | null
 /**
  * @description [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`.
  */
 status: ('canceled' | 'processing' | 'requires_action' | 'requires_confirmation' | 'requires_payment_method' | 'succeeded')
 /**
  * @description Indicates how the payment method is intended to be used in the future.
  * 
  * Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
  */
 usage: string
}

/**
 * @title SetupIntentNextAction
 */
export type setup_intent_next_action = {
 /**
  * @title PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode
  */
 cashapp_handle_redirect_or_display_qr_code?: Schemas.payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code
 /**
  * @title SetupIntentNextActionRedirectToUrl
  */
 redirect_to_url?: Schemas.setup_intent_next_action_redirect_to_url
 /**
  * @description Type of the next action to perform. Refer to the other child attributes under `next_action` for available values. Examples include: `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`.
  */
 type: string
 /**
  * @description When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
  */
 use_stripe_sdk?: Record<string, unknown>
 /**
  * @title SetupIntentNextActionVerifyWithMicrodeposits
  */
 verify_with_microdeposits?: Schemas.setup_intent_next_action_verify_with_microdeposits
}

/**
 * @title SetupIntentNextActionRedirectToUrl
 */
export type setup_intent_next_action_redirect_to_url = {
 /**
  * @description If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
  */
 return_url?: string | null
 /**
  * @description The URL you must redirect your customer to in order to authenticate.
  */
 url?: string | null
}

/**
 * @title SetupIntentNextActionVerifyWithMicrodeposits
 */
export type setup_intent_next_action_verify_with_microdeposits = {
 /**
  * @description The timestamp when the microdeposits are expected to land.
  */
 arrival_date: number
 /**
  * @description The URL for the hosted verification page, which allows customers to verify their bank account.
  */
 hosted_verification_url: string
 /**
  * @description The type of the microdeposit sent to the customer. Used to distinguish between different verification methods.
  */
 microdeposit_type?: ('amounts' | 'descriptor_code') | null
}

/**
 * @title SetupIntentPaymentMethodOptions
 */
export type setup_intent_payment_method_options = {
 acss_debit?: (Schemas.setup_intent_payment_method_options_acss_debit | Schemas.setup_intent_type_specific_payment_method_options_client)
 amazon_pay?: (Schemas.setup_intent_payment_method_options_amazon_pay | Schemas.setup_intent_type_specific_payment_method_options_client)
 bacs_debit?: (Schemas.setup_intent_payment_method_options_bacs_debit | Schemas.setup_intent_type_specific_payment_method_options_client)
 card?: (Schemas.setup_intent_payment_method_options_card | Schemas.setup_intent_type_specific_payment_method_options_client)
 card_present?: (Schemas.setup_intent_payment_method_options_card_present | Schemas.setup_intent_type_specific_payment_method_options_client)
 klarna?: (Schemas.setup_intent_payment_method_options_klarna | Schemas.setup_intent_type_specific_payment_method_options_client)
 link?: (Schemas.setup_intent_payment_method_options_link | Schemas.setup_intent_type_specific_payment_method_options_client)
 paypal?: (Schemas.setup_intent_payment_method_options_paypal | Schemas.setup_intent_type_specific_payment_method_options_client)
 sepa_debit?: (Schemas.setup_intent_payment_method_options_sepa_debit | Schemas.setup_intent_type_specific_payment_method_options_client)
 us_bank_account?: (Schemas.setup_intent_payment_method_options_us_bank_account | Schemas.setup_intent_type_specific_payment_method_options_client)
}

/**
 * @title setup_intent_payment_method_options_acss_debit
 */
export type setup_intent_payment_method_options_acss_debit = {
 /**
  * @description Currency supported by the bank account
  */
 currency?: ('cad' | 'usd') | null
 /**
  * @title setup_intent_payment_method_options_mandate_options_acss_debit
  */
 mandate_options?: Schemas.setup_intent_payment_method_options_mandate_options_acss_debit
 /**
  * @description Bank account verification method.
  */
 verification_method?: ('automatic' | 'instant' | 'microdeposits')
}

/**
 * @title setup_intent_payment_method_options_amazon_pay
 */
export type setup_intent_payment_method_options_amazon_pay = unknown

/**
 * @title setup_intent_payment_method_options_bacs_debit
 */
export type setup_intent_payment_method_options_bacs_debit = {
 /**
  * @title setup_intent_payment_method_options_mandate_options_bacs_debit
  */
 mandate_options?: Schemas.setup_intent_payment_method_options_mandate_options_bacs_debit
}

/**
 * @title setup_intent_payment_method_options_card
 */
export type setup_intent_payment_method_options_card = {
 /**
  * @description Configuration options for setting up an eMandate for cards issued in India.
  */
 mandate_options?: Schemas.setup_intent_payment_method_options_card_mandate_options | null
 /**
  * @description Selected network to process this SetupIntent on. Depends on the available networks of the card attached to the setup intent. Can be only set confirm-time.
  */
 network?: ('amex' | 'cartes_bancaires' | 'diners' | 'discover' | 'eftpos_au' | 'girocard' | 'interac' | 'jcb' | 'link' | 'mastercard' | 'unionpay' | 'unknown' | 'visa') | null
 /**
  * @description We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  */
 request_three_d_secure?: ('any' | 'automatic' | 'challenge') | null
}

/**
 * @title setup_intent_payment_method_options_card_mandate_options
 */
export type setup_intent_payment_method_options_card_mandate_options = {
 /**
  * @description Amount to be charged for future payments.
  */
 amount: number
 /**
  * @description One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
  */
 amount_type: ('fixed' | 'maximum')
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description A description of the mandate or subscription that is meant to be displayed to the customer.
  */
 description?: string | null
 /**
  * @description End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date.
  */
 end_date?: number | null
 /**
  * @description Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`.
  */
 interval: ('day' | 'month' | 'sporadic' | 'week' | 'year')
 /**
  * @description The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`.
  */
 interval_count?: number | null
 /**
  * @description Unique identifier for the mandate or subscription.
  */
 reference: string
 /**
  * @description Start date of the mandate or subscription. Start date should not be lesser than yesterday.
  */
 start_date: number
 /**
  * @description Specifies the type of mandates supported. Possible values are `india`.
  */
 supported_types?: 'india'[] | null
}

/**
 * @title setup_intent_payment_method_options_card_present
 */
export type setup_intent_payment_method_options_card_present = unknown

/**
 * @title setup_intent_payment_method_options_klarna
 */
export type setup_intent_payment_method_options_klarna = {
 /**
  * @description The currency of the setup intent. Three letter ISO currency code.
  */
 currency?: string | null
 /**
  * @description Preferred locale of the Klarna checkout page that the customer is redirected to.
  */
 preferred_locale?: string | null
}

/**
 * @title setup_intent_payment_method_options_link
 */
export type setup_intent_payment_method_options_link = unknown

/**
 * @title setup_intent_payment_method_options_mandate_options_acss_debit
 */
export type setup_intent_payment_method_options_mandate_options_acss_debit = {
 /**
  * @description A URL for custom mandate text
  */
 custom_mandate_url?: string
 /**
  * @description List of Stripe products where this mandate can be selected automatically.
  */
 default_for?: ('invoice' | 'subscription')[]
 /**
  * @description Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
  */
 interval_description?: string | null
 /**
  * @description Payment schedule for the mandate.
  */
 payment_schedule?: ('combined' | 'interval' | 'sporadic') | null
 /**
  * @description Transaction type of the mandate.
  */
 transaction_type?: ('business' | 'personal') | null
}

/**
 * @title setup_intent_payment_method_options_mandate_options_bacs_debit
 */
export type setup_intent_payment_method_options_mandate_options_bacs_debit = {
 /**
  * @description Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'DDIC' or 'STRIPE'.
  */
 reference_prefix?: string
}

/**
 * @title setup_intent_payment_method_options_mandate_options_sepa_debit
 */
export type setup_intent_payment_method_options_mandate_options_sepa_debit = {
 /**
  * @description Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'STRIPE'.
  */
 reference_prefix?: string
}

/**
 * @title setup_intent_payment_method_options_paypal
 */
export type setup_intent_payment_method_options_paypal = {
 /**
  * @description The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer.
  */
 billing_agreement_id?: string | null
}

/**
 * @title setup_intent_payment_method_options_sepa_debit
 */
export type setup_intent_payment_method_options_sepa_debit = {
 /**
  * @title setup_intent_payment_method_options_mandate_options_sepa_debit
  */
 mandate_options?: Schemas.setup_intent_payment_method_options_mandate_options_sepa_debit
}

/**
 * @title setup_intent_payment_method_options_us_bank_account
 */
export type setup_intent_payment_method_options_us_bank_account = {
 /**
  * @title linked_account_options_common
  */
 financial_connections?: Schemas.linked_account_options_common
 /**
  * @title payment_method_options_us_bank_account_mandate_options
  */
 mandate_options?: Schemas.payment_method_options_us_bank_account_mandate_options
 /**
  * @description Bank account verification method.
  */
 verification_method?: ('automatic' | 'instant' | 'microdeposits')
}

/**
 * @title SetupIntentTypeSpecificPaymentMethodOptionsClient
 */
export type setup_intent_type_specific_payment_method_options_client = {
 /**
  * @description Bank account verification method.
  */
 verification_method?: ('automatic' | 'instant' | 'microdeposits')
}

/**
 * @title Shipping
 */
export type shipping = {
 /**
  * @title Address
  */
 address?: Schemas.address
 /**
  * @description The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.
  */
 carrier?: string | null
 /**
  * @description Recipient name.
  */
 name?: string
 /**
  * @description Recipient phone (including extension).
  */
 phone?: string | null
 /**
  * @description The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
  */
 tracking_number?: string | null
}

/**
 * @title ShippingRate
 * @description Shipping rates describe the price of shipping presented to your customers and
 * applied to a purchase. For more information, see [Charge for shipping](https://stripe.com/docs/payments/during-payment/charge-shipping).
 */
export type shipping_rate = {
 /**
  * @description Whether the shipping rate can be used for new purchases. Defaults to `true`.
  */
 active: boolean
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions.
  */
 delivery_estimate?: Schemas.shipping_rate_delivery_estimate | null
 /**
  * @description The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.
  */
 display_name?: string | null
 /**
  * @title ShippingRateFixedAmount
  */
 fixed_amount?: Schemas.shipping_rate_fixed_amount
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'shipping_rate'
 /**
  * @description Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
  */
 tax_behavior?: ('exclusive' | 'inclusive' | 'unspecified') | null
 /**
  * @description A [tax code](https://stripe.com/docs/tax/tax-categories) ID. The Shipping tax code is `txcd_92010001`.
  */
 tax_code?: (string | Schemas.tax_code) | null
 /**
  * @description The type of calculation to use on the shipping rate.
  */
 type: 'fixed_amount'
}

/**
 * @title ShippingRateCurrencyOption
 */
export type shipping_rate_currency_option = {
 /**
  * @description A non-negative integer in cents representing how much to charge.
  */
 amount: number
 /**
  * @description Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
  */
 tax_behavior: ('exclusive' | 'inclusive' | 'unspecified')
}

/**
 * @title ShippingRateDeliveryEstimate
 */
export type shipping_rate_delivery_estimate = {
 /**
  * @description The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite.
  */
 maximum?: Schemas.shipping_rate_delivery_estimate_bound | null
 /**
  * @description The lower bound of the estimated range. If empty, represents no lower bound.
  */
 minimum?: Schemas.shipping_rate_delivery_estimate_bound | null
}

/**
 * @title ShippingRateDeliveryEstimateBound
 */
export type shipping_rate_delivery_estimate_bound = {
 /**
  * @description A unit of time.
  */
 unit: ('business_day' | 'day' | 'hour' | 'month' | 'week')
 /**
  * @description Must be greater than 0.
  */
 value: number
}

/**
 * @title ShippingRateFixedAmount
 */
export type shipping_rate_fixed_amount = {
 /**
  * @description A non-negative integer in cents representing how much to charge.
  */
 amount: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description Shipping rates defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
  */
 currency_options?: Record<string, Schemas.shipping_rate_currency_option>
}

/**
 * @title SigmaSigmaResourcesSigmaAPIQuery
 * @description A saved query object represents a query that can be executed for a run.
 */
export type sigmasigma_api_query = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description The name of the query.
  */
 name: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'sigma.sigma_api_query'
 /**
  * @description The sql statement for the query.
  */
 sql: string
}

/**
 * @title SigmaScheduledQueryRunError
 */
export type sigma_scheduled_query_run_error = {
 /**
  * @description Information about the run failure.
  */
 message: string
}

/**
 * @title Source
 * @description `Source` objects allow you to accept a variety of payment methods. They
 * represent a customer's payment instrument, and can be used with the Stripe API
 * just like a `Card` object: once chargeable, they can be charged, or can be
 * attached to customers.
 * 
 * Stripe doesn't recommend using the deprecated [Sources API](https://stripe.com/docs/api/sources).
 * We recommend that you adopt the [PaymentMethods API](https://stripe.com/docs/api/payment_methods).
 * This newer API provides access to our latest features and payment method types.
 * 
 * Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
 */
export type source = {
 ach_credit_transfer?: Schemas.source_type_ach_credit_transfer
 ach_debit?: Schemas.source_type_ach_debit
 acss_debit?: Schemas.source_type_acss_debit
 alipay?: Schemas.source_type_alipay
 /**
  * @description This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”.
  */
 allow_redisplay?: ('always' | 'limited' | 'unspecified') | null
 /**
  * @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
  */
 amount?: number | null
 au_becs_debit?: Schemas.source_type_au_becs_debit
 bancontact?: Schemas.source_type_bancontact
 card?: Schemas.source_type_card
 card_present?: Schemas.source_type_card_present
 /**
  * @description The client secret of the source. Used for client-side retrieval using a publishable key.
  */
 client_secret: string
 /**
  * @title SourceCodeVerificationFlow
  */
 code_verification?: Schemas.source_code_verification_flow
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.
  */
 currency?: string | null
 /**
  * @description The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.
  */
 customer?: string
 eps?: Schemas.source_type_eps
 /**
  * @description The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.
  */
 flow: string
 giropay?: Schemas.source_type_giropay
 /**
  * @description Unique identifier for the object.
  */
 id: string
 ideal?: Schemas.source_type_ideal
 klarna?: Schemas.source_type_klarna
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 multibanco?: Schemas.source_type_multibanco
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'source'
 /**
  * @description Information about the owner of the payment instrument that may be used or required by particular source types.
  */
 owner?: Schemas.source_owner | null
 p24?: Schemas.source_type_p24
 /**
  * @title SourceReceiverFlow
  */
 receiver?: Schemas.source_receiver_flow
 /**
  * @title SourceRedirectFlow
  */
 redirect?: Schemas.source_redirect_flow
 sepa_debit?: Schemas.source_type_sepa_debit
 sofort?: Schemas.source_type_sofort
 /**
  * @title SourceOrder
  */
 source_order?: Schemas.source_order
 /**
  * @description Extra information about a source. This will appear on your customer's statement every time you charge the source.
  */
 statement_descriptor?: string | null
 /**
  * @description The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.
  */
 status: string
 three_d_secure?: Schemas.source_type_three_d_secure
 /**
  * @description The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
  */
 type: ('ach_credit_transfer' | 'ach_debit' | 'acss_debit' | 'alipay' | 'au_becs_debit' | 'bancontact' | 'card' | 'card_present' | 'eps' | 'giropay' | 'ideal' | 'klarna' | 'multibanco' | 'p24' | 'sepa_debit' | 'sofort' | 'three_d_secure' | 'wechat')
 /**
  * @description Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
  */
 usage?: string | null
 wechat?: Schemas.source_type_wechat
}

/**
 * @title SourceCodeVerificationFlow
 */
export type source_code_verification_flow = {
 /**
  * @description The number of attempts remaining to authenticate the source object with a verification code.
  */
 attempts_remaining: number
 /**
  * @description The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0).
  */
 status: string
}

/**
 * @title SourceMandateNotification
 * @description Source mandate notifications should be created when a notification related to
 * a source mandate must be sent to the payer. They will trigger a webhook or
 * deliver an email to the customer.
 */
export type source_mandate_notification = {
 /**
  * @title SourceMandateNotificationAcssDebitData
  */
 acss_debit?: Schemas.source_mandate_notification_acss_debit_data
 /**
  * @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount associated with the mandate notification. The amount is expressed in the currency of the underlying source. Required if the notification type is `debit_initiated`.
  */
 amount?: number | null
 /**
  * @title SourceMandateNotificationBacsDebitData
  */
 bacs_debit?: Schemas.source_mandate_notification_bacs_debit_data
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'source_mandate_notification'
 /**
  * @description The reason of the mandate notification. Valid reasons are `mandate_confirmed` or `debit_initiated`.
  */
 reason: string
 /**
  * @title SourceMandateNotificationSepaDebitData
  */
 sepa_debit?: Schemas.source_mandate_notification_sepa_debit_data
 /**
  * @title Source
  * @description `Source` objects allow you to accept a variety of payment methods. They
  * represent a customer's payment instrument, and can be used with the Stripe API
  * just like a `Card` object: once chargeable, they can be charged, or can be
  * attached to customers.
  * 
  * Stripe doesn't recommend using the deprecated [Sources API](https://stripe.com/docs/api/sources).
  * We recommend that you adopt the [PaymentMethods API](https://stripe.com/docs/api/payment_methods).
  * This newer API provides access to our latest features and payment method types.
  * 
  * Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
  */
 source: Schemas.source
 /**
  * @description The status of the mandate notification. Valid statuses are `pending` or `submitted`.
  */
 status: string
 /**
  * @description The type of source this mandate notification is attached to. Should be the source type identifier code for the payment method, such as `three_d_secure`.
  */
 type: string
}

/**
 * @title SourceMandateNotificationAcssDebitData
 */
export type source_mandate_notification_acss_debit_data = {
 /**
  * @description The statement descriptor associate with the debit.
  */
 statement_descriptor?: string
}

/**
 * @title SourceMandateNotificationBacsDebitData
 */
export type source_mandate_notification_bacs_debit_data = {
 /**
  * @description Last 4 digits of the account number associated with the debit.
  */
 last4?: string
}

/**
 * @title SourceMandateNotificationSepaDebitData
 */
export type source_mandate_notification_sepa_debit_data = {
 /**
  * @description SEPA creditor ID.
  */
 creditor_identifier?: string
 /**
  * @description Last 4 digits of the account number associated with the debit.
  */
 last4?: string
 /**
  * @description Mandate reference associated with the debit.
  */
 mandate_reference?: string
}

/**
 * @title SourceOrder
 */
export type source_order = {
 /**
  * @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.
  */
 amount: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description The email address of the customer placing the order.
  */
 email?: string
 /**
  * @description List of items constituting the order.
  */
 items?: Schemas.source_order_item[] | null
 /**
  * @title Shipping
  */
 shipping?: Schemas.shipping
}

/**
 * @title SourceOrderItem
 */
export type source_order_item = {
 /**
  * @description The amount (price) for this order item.
  */
 amount?: number | null
 /**
  * @description This currency of this order item. Required when `amount` is present.
  */
 currency?: string | null
 /**
  * @description Human-readable description for this order item.
  */
 description?: string | null
 /**
  * @description The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU).
  */
 parent?: string | null
 /**
  * @description The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered.
  */
 quantity?: number
 /**
  * @description The type of this order item. Must be `sku`, `tax`, or `shipping`.
  */
 type?: string | null
}

/**
 * @title SourceOwner
 */
export type source_owner = {
 /**
  * @description Owner's address.
  */
 address?: Schemas.address | null
 /**
  * @description Owner's email address.
  */
 email?: string | null
 /**
  * @description Owner's full name.
  */
 name?: string | null
 /**
  * @description Owner's phone number (including extension).
  */
 phone?: string | null
 /**
  * @description Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 verified_address?: Schemas.address | null
 /**
  * @description Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 verified_email?: string | null
 /**
  * @description Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 verified_name?: string | null
 /**
  * @description Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
  */
 verified_phone?: string | null
}

/**
 * @title SourceReceiverFlow
 */
export type source_receiver_flow = {
 /**
  * @description The address of the receiver source. This is the value that should be communicated to the customer to send their funds to.
  */
 address?: string | null
 /**
  * @description The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency.
  */
 amount_charged: number
 /**
  * @description The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency.
  */
 amount_received: number
 /**
  * @description The total amount that was returned to the customer. The amount returned is expressed in the source's currency.
  */
 amount_returned: number
 /**
  * @description Type of refund attribute method, one of `email`, `manual`, or `none`.
  */
 refund_attributes_method: string
 /**
  * @description Type of refund attribute status, one of `missing`, `requested`, or `available`.
  */
 refund_attributes_status: string
}

/**
 * @title SourceRedirectFlow
 */
export type source_redirect_flow = {
 /**
  * @description The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`.
  */
 failure_reason?: string | null
 /**
  * @description The URL you provide to redirect the customer to after they authenticated their payment.
  */
 return_url: string
 /**
  * @description The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused).
  */
 status: string
 /**
  * @description The URL provided to you to redirect a customer to as part of a `redirect` authentication flow.
  */
 url: string
}

/**
 * @title SourceTransaction
 * @description Some payment methods have no required amount that a customer must send.
 * Customers can be instructed to send any amount, and it can be made up of
 * multiple transactions. As such, sources can have multiple associated
 * transactions.
 */
export type source_transaction = {
 /**
  * @title SourceTransactionAchCreditTransferData
  */
 ach_credit_transfer?: Schemas.source_transaction_ach_credit_transfer_data
 /**
  * @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver.
  */
 amount: number
 /**
  * @title SourceTransactionChfCreditTransferData
  */
 chf_credit_transfer?: Schemas.source_transaction_chf_credit_transfer_data
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @title SourceTransactionGbpCreditTransferData
  */
 gbp_credit_transfer?: Schemas.source_transaction_gbp_credit_transfer_data
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'source_transaction'
 /**
  * @title SourceTransactionPaperCheckData
  */
 paper_check?: Schemas.source_transaction_paper_check_data
 /**
  * @title SourceTransactionSepaCreditTransferData
  */
 sepa_credit_transfer?: Schemas.source_transaction_sepa_credit_transfer_data
 /**
  * @description The ID of the source this transaction is attached to.
  */
 source: string
 /**
  * @description The status of the transaction, one of `succeeded`, `pending`, or `failed`.
  */
 status: string
 /**
  * @description The type of source this transaction is attached to.
  */
 type: ('ach_credit_transfer' | 'ach_debit' | 'alipay' | 'bancontact' | 'card' | 'card_present' | 'eps' | 'giropay' | 'ideal' | 'klarna' | 'multibanco' | 'p24' | 'sepa_debit' | 'sofort' | 'three_d_secure' | 'wechat')
}

/**
 * @title SourceTransactionAchCreditTransferData
 */
export type source_transaction_ach_credit_transfer_data = {
 /**
  * @description Customer data associated with the transfer.
  */
 customer_data?: string
 /**
  * @description Bank account fingerprint associated with the transfer.
  */
 fingerprint?: string
 /**
  * @description Last 4 digits of the account number associated with the transfer.
  */
 last4?: string
 /**
  * @description Routing number associated with the transfer.
  */
 routing_number?: string
}

/**
 * @title SourceTransactionChfCreditTransferData
 */
export type source_transaction_chf_credit_transfer_data = {
 /**
  * @description Reference associated with the transfer.
  */
 reference?: string
 /**
  * @description Sender's country address.
  */
 sender_address_country?: string
 /**
  * @description Sender's line 1 address.
  */
 sender_address_line1?: string
 /**
  * @description Sender's bank account IBAN.
  */
 sender_iban?: string
 /**
  * @description Sender's name.
  */
 sender_name?: string
}

/**
 * @title SourceTransactionGbpCreditTransferData
 */
export type source_transaction_gbp_credit_transfer_data = {
 /**
  * @description Bank account fingerprint associated with the Stripe owned bank account receiving the transfer.
  */
 fingerprint?: string
 /**
  * @description The credit transfer rails the sender used to push this transfer. The possible rails are: Faster Payments, BACS, CHAPS, and wire transfers. Currently only Faster Payments is supported.
  */
 funding_method?: string
 /**
  * @description Last 4 digits of sender account number associated with the transfer.
  */
 last4?: string
 /**
  * @description Sender entered arbitrary information about the transfer.
  */
 reference?: string
 /**
  * @description Sender account number associated with the transfer.
  */
 sender_account_number?: string
 /**
  * @description Sender name associated with the transfer.
  */
 sender_name?: string
 /**
  * @description Sender sort code associated with the transfer.
  */
 sender_sort_code?: string
}

/**
 * @title SourceTransactionPaperCheckData
 */
export type source_transaction_paper_check_data = {
 /**
  * @description Time at which the deposited funds will be available for use. Measured in seconds since the Unix epoch.
  */
 available_at?: string
 /**
  * @description Comma-separated list of invoice IDs associated with the paper check.
  */
 invoices?: string
}

/**
 * @title SourceTransactionSepaCreditTransferData
 */
export type source_transaction_sepa_credit_transfer_data = {
 /**
  * @description Reference associated with the transfer.
  */
 reference?: string
 /**
  * @description Sender's bank account IBAN.
  */
 sender_iban?: string
 /**
  * @description Sender's name.
  */
 sender_name?: string
}

export type source_type_ach_credit_transfer = {
 account_number?: string | null
 bank_name?: string | null
 fingerprint?: string | null
 refund_account_holder_name?: string | null
 refund_account_holder_type?: string | null
 refund_routing_number?: string | null
 routing_number?: string | null
 swift_code?: string | null
}

export type source_type_ach_debit = {
 bank_name?: string | null
 country?: string | null
 fingerprint?: string | null
 last4?: string | null
 routing_number?: string | null
 type?: string | null
}

export type source_type_acss_debit = {
 bank_address_city?: string | null
 bank_address_line_1?: string | null
 bank_address_line_2?: string | null
 bank_address_postal_code?: string | null
 bank_name?: string | null
 category?: string | null
 country?: string | null
 fingerprint?: string | null
 last4?: string | null
 routing_number?: string | null
}

export type source_type_alipay = {
 data_string?: string | null
 native_url?: string | null
 statement_descriptor?: string | null
}

export type source_type_au_becs_debit = {
 bsb_number?: string | null
 fingerprint?: string | null
 last4?: string | null
}

export type source_type_bancontact = {
 bank_code?: string | null
 bank_name?: string | null
 bic?: string | null
 iban_last4?: string | null
 preferred_language?: string | null
 statement_descriptor?: string | null
}

export type source_type_card = {
 address_line1_check?: string | null
 address_zip_check?: string | null
 brand?: string | null
 country?: string | null
 cvc_check?: string | null
 dynamic_last4?: string | null
 exp_month?: number | null
 exp_year?: number | null
 fingerprint?: string
 funding?: string | null
 last4?: string | null
 name?: string | null
 three_d_secure?: string
 tokenization_method?: string | null
}

export type source_type_card_present = {
 application_cryptogram?: string
 application_preferred_name?: string
 authorization_code?: string | null
 authorization_response_code?: string
 brand?: string | null
 country?: string | null
 cvm_type?: string
 data_type?: string | null
 dedicated_file_name?: string
 emv_auth_data?: string
 evidence_customer_signature?: string | null
 evidence_transaction_certificate?: string | null
 exp_month?: number | null
 exp_year?: number | null
 fingerprint?: string
 funding?: string | null
 last4?: string | null
 pos_device_id?: string | null
 pos_entry_mode?: string
 read_method?: string | null
 reader?: string | null
 terminal_verification_results?: string
 transaction_status_information?: string
}

export type source_type_eps = {
 reference?: string | null
 statement_descriptor?: string | null
}

export type source_type_giropay = {
 bank_code?: string | null
 bank_name?: string | null
 bic?: string | null
 statement_descriptor?: string | null
}

export type source_type_ideal = {
 bank?: string | null
 bic?: string | null
 iban_last4?: string | null
 statement_descriptor?: string | null
}

export type source_type_klarna = {
 background_image_url?: string
 client_token?: string | null
 first_name?: string
 last_name?: string
 locale?: string
 logo_url?: string
 page_title?: string
 pay_later_asset_urls_descriptive?: string
 pay_later_asset_urls_standard?: string
 pay_later_name?: string
 pay_later_redirect_url?: string
 pay_now_asset_urls_descriptive?: string
 pay_now_asset_urls_standard?: string
 pay_now_name?: string
 pay_now_redirect_url?: string
 pay_over_time_asset_urls_descriptive?: string
 pay_over_time_asset_urls_standard?: string
 pay_over_time_name?: string
 pay_over_time_redirect_url?: string
 payment_method_categories?: string
 purchase_country?: string
 purchase_type?: string
 redirect_url?: string
 shipping_delay?: number
 shipping_first_name?: string
 shipping_last_name?: string
}

export type source_type_multibanco = {
 entity?: string | null
 reference?: string | null
 refund_account_holder_address_city?: string | null
 refund_account_holder_address_country?: string | null
 refund_account_holder_address_line1?: string | null
 refund_account_holder_address_line2?: string | null
 refund_account_holder_address_postal_code?: string | null
 refund_account_holder_address_state?: string | null
 refund_account_holder_name?: string | null
 refund_iban?: string | null
}

export type source_type_p24 = {
 reference?: string | null
}

export type source_type_sepa_debit = {
 bank_code?: string | null
 branch_code?: string | null
 country?: string | null
 fingerprint?: string | null
 last4?: string | null
 mandate_reference?: string | null
 mandate_url?: string | null
}

export type source_type_sofort = {
 bank_code?: string | null
 bank_name?: string | null
 bic?: string | null
 country?: string | null
 iban_last4?: string | null
 preferred_language?: string | null
 statement_descriptor?: string | null
}

export type source_type_three_d_secure = {
 address_line1_check?: string | null
 address_zip_check?: string | null
 authenticated?: boolean | null
 brand?: string | null
 card?: string | null
 country?: string | null
 customer?: string | null
 cvc_check?: string | null
 dynamic_last4?: string | null
 exp_month?: number | null
 exp_year?: number | null
 fingerprint?: string
 funding?: string | null
 last4?: string | null
 name?: string | null
 three_d_secure?: string
 tokenization_method?: string | null
}

export type source_type_wechat = {
 prepay_id?: string
 qr_code_url?: string | null
 statement_descriptor?: string
}

/**
 * @title Subscription
 * @description Subscriptions allow you to charge a customer on a recurring basis.
 * 
 * Related guide: [Creating subscriptions](https://stripe.com/docs/billing/subscriptions/creating)
 */
export type subscription = {
 /**
  * @description ID of the Connect Application that created the subscription.
  */
 application?: (string | Schemas.application | Schemas.deleted_application) | null
 /**
  * @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account.
  */
 application_fee_percent?: number | null
 /**
  * @title SubscriptionAutomaticTax
  */
 automatic_tax: Schemas.subscription_automatic_tax
 /**
  * @description The reference point that aligns future [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle) dates. It sets the day of week for `week` intervals, the day of month for `month` and `year` intervals, and the month of year for `year` intervals. The timestamp is in UTC format.
  */
 billing_cycle_anchor: number
 /**
  * @description The fixed values used to calculate the `billing_cycle_anchor`.
  */
 billing_cycle_anchor_config?: Schemas.subscriptions_resource_billing_cycle_anchor_config | null
 /**
  * @title SubscriptionsResourceBillingMode
  * @description The billing mode of the subscription.
  */
 billing_mode: Schemas.subscriptions_resource_billing_mode
 /**
  * @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
  */
 billing_thresholds?: Schemas.subscription_billing_thresholds | null
 /**
  * @description A date in the future at which the subscription will automatically get canceled
  */
 cancel_at?: number | null
 /**
  * @description Whether this subscription will (if `status=active`) or did (if `status=canceled`) cancel at the end of the current billing period.
  */
 cancel_at_period_end: boolean
 /**
  * @description If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
  */
 canceled_at?: number | null
 /**
  * @description Details about why this subscription was cancelled
  */
 cancellation_details?: Schemas.cancellation_details | null
 /**
  * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
  */
 collection_method: ('charge_automatically' | 'send_invoice')
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description ID of the customer who owns the subscription.
  */
 customer: (string | Schemas.customer | Schemas.deleted_customer)
 /**
  * @description Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.
  */
 days_until_due?: number | null
 /**
  * @description ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
  */
 default_payment_method?: (string | Schemas.payment_method) | null
 /**
  * @description ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
  */
 default_source?: (string | Schemas.bank_account | Schemas.card | Schemas.source) | null
 /**
  * @description The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription.
  */
 default_tax_rates?: Schemas.tax_rate[] | null
 /**
  * @description The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
  */
 description?: string | null
 /**
  * @description The discounts applied to the subscription. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount.
  */
 discounts: (string | Schemas.discount)[]
 /**
  * @description If the subscription has ended, the date the subscription ended.
  */
 ended_at?: number | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @title SubscriptionsResourceSubscriptionInvoiceSettings
  */
 invoice_settings: Schemas.subscriptions_resource_subscription_invoice_settings
 /**
  * @title SubscriptionItemList
  * @description List of subscription items, each with an attached price.
  */
 items: {
  /**
   * @description Details about each object.
   */
  data: Schemas.subscription_item[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 }
 /**
  * @description The most recent invoice this subscription has generated.
  */
 latest_invoice?: (string | Schemas.invoice) | null
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.
  */
 next_pending_invoice_item_invoice?: number | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'subscription'
 /**
  * @description The account (if any) the charge was made on behalf of for charges associated with this subscription. See the [Connect documentation](https://stripe.com/docs/connect/subscriptions#on-behalf-of) for details.
  */
 on_behalf_of?: (string | Schemas.account) | null
 /**
  * @description If specified, payment collection for this subscription will be paused. Note that the subscription status will be unchanged and will not be updated to `paused`. Learn more about [pausing collection](https://stripe.com/docs/billing/subscriptions/pause-payment).
  */
 pause_collection?: Schemas.subscriptions_resource_pause_collection | null
 /**
  * @description Payment settings passed on to invoices created by the subscription.
  */
 payment_settings?: Schemas.subscriptions_resource_payment_settings | null
 /**
  * @description Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval.
  */
 pending_invoice_item_interval?: Schemas.subscription_pending_invoice_item_interval | null
 /**
  * @description You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2).
  */
 pending_setup_intent?: (string | Schemas.setup_intent) | null
 /**
  * @description If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid.
  */
 pending_update?: Schemas.subscriptions_resource_pending_update | null
 /**
  * @description The schedule attached to the subscription
  */
 schedule?: (string | Schemas.subscription_schedule) | null
 /**
  * @description Date when the subscription was first created. The date might differ from the `created` date due to backdating.
  */
 start_date: number
 /**
  * @description Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, `unpaid`, or `paused`. 
  * 
  * For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this status can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` status. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal status, the open invoice will be voided and no further invoices will be generated. 
  * 
  * A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over. 
  * 
  * A subscription can only enter a `paused` status [when a trial ends without a payment method](https://stripe.com/docs/billing/subscriptions/trials#create-free-trials-without-payment). A `paused` subscription doesn't generate invoices and can be resumed after your customer adds their payment method. The `paused` status is different from [pausing collection](https://stripe.com/docs/billing/subscriptions/pause-payment), which still generates invoices and leaves the subscription's status unchanged. 
  * 
  * If subscription `collection_method=charge_automatically`, it becomes `past_due` when payment is required but cannot be paid (due to failed payment or awaiting additional user actions). Once Stripe has exhausted all payment retry attempts, the subscription will become `canceled` or `unpaid` (depending on your subscriptions settings). 
  * 
  * If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
  */
 status: ('active' | 'canceled' | 'incomplete' | 'incomplete_expired' | 'past_due' | 'paused' | 'trialing' | 'unpaid')
 /**
  * @description ID of the test clock this subscription belongs to.
  */
 test_clock?: (string | Schemas.test_helperstest_clock) | null
 /**
  * @description The account (if any) the subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
  */
 transfer_data?: Schemas.subscription_transfer_data | null
 /**
  * @description If the subscription has a trial, the end of that trial.
  */
 trial_end?: number | null
 /**
  * @description Settings related to subscription trials.
  */
 trial_settings?: Schemas.subscriptions_trials_resource_trial_settings | null
 /**
  * @description If the subscription has a trial, the beginning of that trial.
  */
 trial_start?: number | null
}

/**
 * @title SubscriptionAutomaticTax
 */
export type subscription_automatic_tax = {
 /**
  * @description If Stripe disabled automatic tax, this enum describes why.
  */
 disabled_reason?: 'requires_location_inputs' | null
 /**
  * @description Whether Stripe automatically computes tax on this subscription.
  */
 enabled: boolean
 /**
  * @description The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
  */
 liability?: Schemas.connect_account_reference | null
}

/**
 * @title SubscriptionBillingThresholds
 */
export type subscription_billing_thresholds = {
 /**
  * @description Monetary threshold that triggers the subscription to create an invoice
  */
 amount_gte?: number | null
 /**
  * @description Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`.
  */
 reset_billing_cycle_anchor?: boolean | null
}

/**
 * @title SubscriptionItem
 * @description Subscription items allow you to create customer subscriptions with more than
 * one plan, making it easy to represent complex billing relationships.
 */
export type subscription_item = {
 /**
  * @description Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period
  */
 billing_thresholds?: Schemas.subscription_item_billing_thresholds | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description The end time of this subscription item's current billing period.
  */
 current_period_end: number
 /**
  * @description The start time of this subscription item's current billing period.
  */
 current_period_start: number
 /**
  * @description The discounts applied to the subscription item. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount.
  */
 discounts: (string | Schemas.discount)[]
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'subscription_item'
 /**
  * @title Price
  * @description Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
  * [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
  * 
  * For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
  * 
  * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview).
  */
 price: Schemas.price
 /**
  * @description The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed.
  */
 quantity?: number
 /**
  * @description The `subscription` this `subscription_item` belongs to.
  */
 subscription: string
 /**
  * @description The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`.
  */
 tax_rates?: Schemas.tax_rate[] | null
}

/**
 * @title SubscriptionItemBillingThresholds
 */
export type subscription_item_billing_thresholds = {
 /**
  * @description Usage threshold that triggers the subscription to create an invoice
  */
 usage_gte?: number | null
}

/**
 * @title subscription_payment_method_options_card
 */
export type subscription_payment_method_options_card = {
 /**
  * @title invoice_mandate_options_card
  */
 mandate_options?: Schemas.invoice_mandate_options_card
 /**
  * @description Selected network to process this Subscription on. Depends on the available networks of the card attached to the Subscription. Can be only set confirm-time.
  */
 network?: ('amex' | 'cartes_bancaires' | 'diners' | 'discover' | 'eftpos_au' | 'girocard' | 'interac' | 'jcb' | 'link' | 'mastercard' | 'unionpay' | 'unknown' | 'visa') | null
 /**
  * @description We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
  */
 request_three_d_secure?: ('any' | 'automatic' | 'challenge') | null
}

/**
 * @title SubscriptionPendingInvoiceItemInterval
 */
export type subscription_pending_invoice_item_interval = {
 /**
  * @description Specifies invoicing frequency. Either `day`, `week`, `month` or `year`.
  */
 interval: ('day' | 'month' | 'week' | 'year')
 /**
  * @description The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
  */
 interval_count: number
}

/**
 * @title SubscriptionSchedule
 * @description A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.
 * 
 * Related guide: [Subscription schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules)
 */
export type subscription_schedule = {
 /**
  * @description ID of the Connect Application that created the schedule.
  */
 application?: (string | Schemas.application | Schemas.deleted_application) | null
 /**
  * @title SubscriptionsResourceBillingMode
  * @description The billing mode of the subscription.
  */
 billing_mode: Schemas.subscriptions_resource_billing_mode
 /**
  * @description Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
  */
 canceled_at?: number | null
 /**
  * @description Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
  */
 completed_at?: number | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`.
  */
 current_phase?: Schemas.subscription_schedule_current_phase | null
 /**
  * @description ID of the customer who owns the subscription schedule.
  */
 customer: (string | Schemas.customer | Schemas.deleted_customer)
 /**
  * @title SubscriptionSchedulesResourceDefaultSettings
  */
 default_settings: Schemas.subscription_schedules_resource_default_settings
 /**
  * @description Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running. `cancel` will end the subscription schedule and cancel the underlying subscription.
  */
 end_behavior: ('cancel' | 'none' | 'release' | 'renew')
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'subscription_schedule'
 /**
  * @description Configuration for the subscription schedule's phases.
  */
 phases: Schemas.subscription_schedule_phase_configuration[]
 /**
  * @description Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
  */
 released_at?: number | null
 /**
  * @description ID of the subscription once managed by the subscription schedule (if it is released).
  */
 released_subscription?: string | null
 /**
  * @description The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
  */
 status: ('active' | 'canceled' | 'completed' | 'not_started' | 'released')
 /**
  * @description ID of the subscription managed by the subscription schedule.
  */
 subscription?: (string | Schemas.subscription) | null
 /**
  * @description ID of the test clock this subscription schedule belongs to.
  */
 test_clock?: (string | Schemas.test_helperstest_clock) | null
}

/**
 * @title SubscriptionScheduleAddInvoiceItem
 * @description An Add Invoice Item describes the prices and quantities that will be added as pending invoice items when entering a phase.
 */
export type subscription_schedule_add_invoice_item = {
 /**
  * @description The stackable discounts that will be applied to the item.
  */
 discounts: Schemas.discounts_resource_stackable_discount[]
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @title SubscriptionScheduleAddInvoiceItemPeriod
  */
 period: Schemas.subscription_schedule_add_invoice_item_period
 /**
  * @description ID of the price used to generate the invoice item.
  */
 price: (string | Schemas.price | Schemas.deleted_price)
 /**
  * @description The quantity of the invoice item.
  */
 quantity?: number | null
 /**
  * @description The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item.
  */
 tax_rates?: Schemas.tax_rate[] | null
}

/**
 * @title SubscriptionScheduleAddInvoiceItemPeriod
 */
export type subscription_schedule_add_invoice_item_period = {
 /**
  * @title SubscriptionSchedulesResourceInvoiceItemPeriodResourcePeriodEnd
  */
 end: Schemas.subscription_schedules_resource_invoice_item_period_resource_period_end
 /**
  * @title SubscriptionSchedulesResourceInvoiceItemPeriodResourcePeriodStart
  */
 start: Schemas.subscription_schedules_resource_invoice_item_period_resource_period_start
}

/**
 * @title SubscriptionScheduleConfigurationItem
 * @description A phase item describes the price and quantity of a phase.
 */
export type subscription_schedule_configuration_item = {
 /**
  * @description Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period
  */
 billing_thresholds?: Schemas.subscription_item_billing_thresholds | null
 /**
  * @description The discounts applied to the subscription item. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount.
  */
 discounts: Schemas.discounts_resource_stackable_discount[]
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an item. Metadata on this item will update the underlying subscription item's `metadata` when the phase is entered.
  */
 metadata?: Record<string, string> | null
 /**
  * @description ID of the price to which the customer should be subscribed.
  */
 price: (string | Schemas.price | Schemas.deleted_price)
 /**
  * @description Quantity of the plan to which the customer should be subscribed.
  */
 quantity?: number
 /**
  * @description The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`.
  */
 tax_rates?: Schemas.tax_rate[] | null
}

/**
 * @title SubscriptionScheduleCurrentPhase
 */
export type subscription_schedule_current_phase = {
 /**
  * @description The end of this phase of the subscription schedule.
  */
 end_date: number
 /**
  * @description The start of this phase of the subscription schedule.
  */
 start_date: number
}

/**
 * @title SubscriptionSchedulePhaseConfiguration
 * @description A phase describes the plans, coupon, and trialing status of a subscription for a predefined time period.
 */
export type subscription_schedule_phase_configuration = {
 /**
  * @description A list of prices and quantities that will generate invoice items appended to the next invoice for this phase.
  */
 add_invoice_items: Schemas.subscription_schedule_add_invoice_item[]
 /**
  * @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule.
  */
 application_fee_percent?: number | null
 /**
  * @title SchedulesPhaseAutomaticTax
  */
 automatic_tax?: Schemas.schedules_phase_automatic_tax
 /**
  * @description Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
  */
 billing_cycle_anchor?: ('automatic' | 'phase_start') | null
 /**
  * @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
  */
 billing_thresholds?: Schemas.subscription_billing_thresholds | null
 /**
  * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
  */
 collection_method?: ('charge_automatically' | 'send_invoice') | null
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
  */
 default_payment_method?: (string | Schemas.payment_method) | null
 /**
  * @description The default tax rates to apply to the subscription during this phase of the subscription schedule.
  */
 default_tax_rates?: Schemas.tax_rate[] | null
 /**
  * @description Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
  */
 description?: string | null
 /**
  * @description The stackable discounts that will be applied to the subscription on this phase. Subscription item discounts are applied before subscription discounts.
  */
 discounts: Schemas.discounts_resource_stackable_discount[]
 /**
  * @description The end of this phase of the subscription schedule.
  */
 end_date: number
 /**
  * @description The invoice settings applicable during this phase.
  */
 invoice_settings?: Schemas.invoice_setting_subscription_schedule_phase_setting | null
 /**
  * @description Subscription items to configure the subscription to during this phase of the subscription schedule.
  */
 items: Schemas.subscription_schedule_configuration_item[]
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to a phase. Metadata on a schedule's phase will update the underlying subscription's `metadata` when the phase is entered. Updating the underlying subscription's `metadata` directly will not affect the current phase's `metadata`.
  */
 metadata?: Record<string, string> | null
 /**
  * @description The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details.
  */
 on_behalf_of?: (string | Schemas.account) | null
 /**
  * @description When transitioning phases, controls how prorations are handled (if any). Possible values are `create_prorations`, `none`, and `always_invoice`.
  */
 proration_behavior: ('always_invoice' | 'create_prorations' | 'none')
 /**
  * @description The start of this phase of the subscription schedule.
  */
 start_date: number
 /**
  * @description The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
  */
 transfer_data?: Schemas.subscription_transfer_data | null
 /**
  * @description When the trial ends within the phase.
  */
 trial_end?: number | null
}

/**
 * @title SubscriptionSchedulesResourceDefaultSettings
 */
export type subscription_schedules_resource_default_settings = {
 /**
  * @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule.
  */
 application_fee_percent?: number | null
 /**
  * @title SubscriptionSchedulesResourceDefaultSettingsAutomaticTax
  */
 automatic_tax?: Schemas.subscription_schedules_resource_default_settings_automatic_tax
 /**
  * @description Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
  */
 billing_cycle_anchor: ('automatic' | 'phase_start')
 /**
  * @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
  */
 billing_thresholds?: Schemas.subscription_billing_thresholds | null
 /**
  * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
  */
 collection_method?: ('charge_automatically' | 'send_invoice') | null
 /**
  * @description ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
  */
 default_payment_method?: (string | Schemas.payment_method) | null
 /**
  * @description Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
  */
 description?: string | null
 /**
  * @title InvoiceSettingSubscriptionScheduleSetting
  */
 invoice_settings: Schemas.invoice_setting_subscription_schedule_setting
 /**
  * @description The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details.
  */
 on_behalf_of?: (string | Schemas.account) | null
 /**
  * @description The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
  */
 transfer_data?: Schemas.subscription_transfer_data | null
}

/**
 * @title SubscriptionSchedulesResourceDefaultSettingsAutomaticTax
 */
export type subscription_schedules_resource_default_settings_automatic_tax = {
 /**
  * @description If Stripe disabled automatic tax, this enum describes why.
  */
 disabled_reason?: 'requires_location_inputs' | null
 /**
  * @description Whether Stripe automatically computes tax on invoices created during this phase.
  */
 enabled: boolean
 /**
  * @description The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
  */
 liability?: Schemas.connect_account_reference | null
}

/**
 * @title SubscriptionSchedulesResourceInvoiceItemPeriodResourcePeriodEnd
 */
export type subscription_schedules_resource_invoice_item_period_resource_period_end = {
 /**
  * @description A precise Unix timestamp for the end of the invoice item period. Must be greater than or equal to `period.start`.
  */
 timestamp?: number
 /**
  * @description Select how to calculate the end of the invoice item period.
  */
 type: ('min_item_period_end' | 'phase_end' | 'timestamp')
}

/**
 * @title SubscriptionSchedulesResourceInvoiceItemPeriodResourcePeriodStart
 */
export type subscription_schedules_resource_invoice_item_period_resource_period_start = {
 /**
  * @description A precise Unix timestamp for the start of the invoice item period. Must be less than or equal to `period.end`.
  */
 timestamp?: number
 /**
  * @description Select how to calculate the start of the invoice item period.
  */
 type: ('max_item_period_start' | 'phase_start' | 'timestamp')
}

/**
 * @title SubscriptionTransferData
 */
export type subscription_transfer_data = {
 /**
  * @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
  */
 amount_percent?: number | null
 /**
  * @description The account where funds from the payment will be transferred to upon payment success.
  */
 destination: (string | Schemas.account)
}

/**
 * @title SubscriptionsResourceBillingCycleAnchorConfig
 */
export type subscriptions_resource_billing_cycle_anchor_config = {
 /**
  * @description The day of the month of the billing_cycle_anchor.
  */
 day_of_month: number
 /**
  * @description The hour of the day of the billing_cycle_anchor.
  */
 hour?: number | null
 /**
  * @description The minute of the hour of the billing_cycle_anchor.
  */
 minute?: number | null
 /**
  * @description The month to start full cycle billing periods.
  */
 month?: number | null
 /**
  * @description The second of the minute of the billing_cycle_anchor.
  */
 second?: number | null
}

/**
 * @title SubscriptionsResourceBillingMode
 * @description The billing mode of the subscription.
 */
export type subscriptions_resource_billing_mode = {
 /**
  * @description Controls how prorations and invoices for subscriptions are calculated and orchestrated.
  */
 type: ('classic' | 'flexible')
 /**
  * @description Details on when the current billing_mode was adopted.
  */
 updated_at?: number
}

/**
 * @title SubscriptionsResourcePauseCollection
 * @description The Pause Collection settings determine how we will pause collection for this subscription and for how long the subscription
 * should be paused.
 */
export type subscriptions_resource_pause_collection = {
 /**
  * @description The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`.
  */
 behavior: ('keep_as_draft' | 'mark_uncollectible' | 'void')
 /**
  * @description The time after which the subscription will resume collecting payments.
  */
 resumes_at?: number | null
}

/**
 * @title SubscriptionsResourcePaymentMethodOptions
 */
export type subscriptions_resource_payment_method_options = {
 /**
  * @description This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to invoices created by the subscription.
  */
 acss_debit?: Schemas.invoice_payment_method_options_acss_debit | null
 /**
  * @description This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription.
  */
 bancontact?: Schemas.invoice_payment_method_options_bancontact | null
 /**
  * @description This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription.
  */
 card?: Schemas.subscription_payment_method_options_card | null
 /**
  * @description This sub-hash contains details about the Bank transfer payment method options to pass to invoices created by the subscription.
  */
 customer_balance?: Schemas.invoice_payment_method_options_customer_balance | null
 /**
  * @description This sub-hash contains details about the Konbini payment method options to pass to invoices created by the subscription.
  */
 konbini?: Schemas.invoice_payment_method_options_konbini | null
 /**
  * @description This sub-hash contains details about the SEPA Direct Debit payment method options to pass to invoices created by the subscription.
  */
 sepa_debit?: Schemas.invoice_payment_method_options_sepa_debit | null
 /**
  * @description This sub-hash contains details about the ACH direct debit payment method options to pass to invoices created by the subscription.
  */
 us_bank_account?: Schemas.invoice_payment_method_options_us_bank_account | null
}

/**
 * @title SubscriptionsResourcePaymentSettings
 */
export type subscriptions_resource_payment_settings = {
 /**
  * @description Payment-method-specific configuration to provide to invoices created by the subscription.
  */
 payment_method_options?: Schemas.subscriptions_resource_payment_method_options | null
 /**
  * @description The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
  */
 payment_method_types?: ('ach_credit_transfer' | 'ach_debit' | 'acss_debit' | 'affirm' | 'amazon_pay' | 'au_becs_debit' | 'bacs_debit' | 'bancontact' | 'boleto' | 'card' | 'cashapp' | 'crypto' | 'customer_balance' | 'eps' | 'fpx' | 'giropay' | 'grabpay' | 'ideal' | 'jp_credit_transfer' | 'kakao_pay' | 'klarna' | 'konbini' | 'kr_card' | 'link' | 'multibanco' | 'naver_pay' | 'nz_bank_account' | 'p24' | 'payco' | 'paynow' | 'paypal' | 'promptpay' | 'revolut_pay' | 'sepa_credit_transfer' | 'sepa_debit' | 'sofort' | 'swish' | 'us_bank_account' | 'wechat_pay')[] | null
 /**
  * @description Configure whether Stripe updates `subscription.default_payment_method` when payment succeeds. Defaults to `off`.
  */
 save_default_payment_method?: ('off' | 'on_subscription') | null
}

/**
 * @title SubscriptionsResourcePendingUpdate
 * @description Pending Updates store the changes pending from a previous update that will be applied
 * to the Subscription upon successful payment.
 */
export type subscriptions_resource_pending_update = {
 /**
  * @description If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. The timestamp is in UTC format.
  */
 billing_cycle_anchor?: number | null
 /**
  * @description The point after which the changes reflected by this update will be discarded and no longer applied.
  */
 expires_at: number
 /**
  * @description List of subscription items, each with an attached plan, that will be set if the update is applied.
  */
 subscription_items?: Schemas.subscription_item[] | null
 /**
  * @description Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied.
  */
 trial_end?: number | null
 /**
  * @description Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
  */
 trial_from_plan?: boolean | null
}

/**
 * @title SubscriptionsResourceSubscriptionInvoiceSettings
 */
export type subscriptions_resource_subscription_invoice_settings = {
 /**
  * @description The account tax IDs associated with the subscription. Will be set on invoices generated by the subscription.
  */
 account_tax_ids?: (string | Schemas.tax_id | Schemas.deleted_tax_id)[] | null
 /**
  * @title ConnectAccountReference
  */
 issuer: Schemas.connect_account_reference
}

/**
 * @title SubscriptionsTrialsResourceEndBehavior
 * @description Defines how a subscription behaves when a free trial ends.
 */
export type subscriptions_trials_resource_end_behavior = {
 /**
  * @description Indicates how the subscription should change when the trial ends if the user did not provide a payment method.
  */
 missing_payment_method: ('cancel' | 'create_invoice' | 'pause')
}

/**
 * @title SubscriptionsTrialsResourceTrialSettings
 * @description Configures how this subscription behaves during the trial period.
 */
export type subscriptions_trials_resource_trial_settings = {
 /**
  * @title SubscriptionsTrialsResourceEndBehavior
  * @description Defines how a subscription behaves when a free trial ends.
  */
 end_behavior: Schemas.subscriptions_trials_resource_end_behavior
}

/**
 * @title TaxProductResourceTaxCalculation
 * @description A Tax Calculation allows you to calculate the tax to collect from your customer.
 * 
 * Related guide: [Calculate tax in your custom payment flow](https://stripe.com/docs/tax/custom)
 */
export type taxcalculation = {
 /**
  * @description Total amount after taxes in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 amount_total: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description The ID of an existing [Customer](https://stripe.com/docs/api/customers/object) used for the resource.
  */
 customer?: string | null
 /**
  * @title TaxProductResourceCustomerDetails
  */
 customer_details: Schemas.tax_product_resource_customer_details
 /**
  * @description Timestamp of date at which the tax calculation will expire.
  */
 expires_at?: number | null
 /**
  * @description Unique identifier for the calculation.
  */
 id?: string | null
 /**
  * @title TaxProductResourceTaxCalculationLineItemList
  * @description The list of items the customer is purchasing.
  */
 line_items?: {
  /**
   * @description Details about each object.
   */
  data: Schemas.taxcalculation_line_item[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 } | null
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'tax.calculation'
 /**
  * @description The details of the ship from location, such as the address.
  */
 ship_from_details?: Schemas.tax_product_resource_ship_from_details | null
 /**
  * @description The shipping cost details for the calculation.
  */
 shipping_cost?: Schemas.tax_product_resource_tax_calculation_shipping_cost | null
 /**
  * @description The amount of tax to be collected on top of the line item prices.
  */
 tax_amount_exclusive: number
 /**
  * @description The amount of tax already included in the line item prices.
  */
 tax_amount_inclusive: number
 /**
  * @description Breakdown of individual tax amounts that add up to the total.
  */
 tax_breakdown: Schemas.tax_product_resource_tax_breakdown[]
 /**
  * @description Timestamp of date at which the tax rules and rates in effect applies for the calculation.
  */
 tax_date: number
}

/**
 * @title TaxProductResourceTaxCalculationLineItem
 */
export type taxcalculation_line_item = {
 /**
  * @description The line item amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.
  */
 amount: number
 /**
  * @description The amount of tax calculated for this line item, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 amount_tax: number
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'tax.calculation_line_item'
 /**
  * @description The ID of an existing [Product](https://stripe.com/docs/api/products/object).
  */
 product?: string | null
 /**
  * @description The number of units of the item being purchased. For reversals, this is the quantity reversed.
  */
 quantity: number
 /**
  * @description A custom identifier for this line item.
  */
 reference: string
 /**
  * @description Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
  */
 tax_behavior: ('exclusive' | 'inclusive')
 /**
  * @description Detailed account of taxes relevant to this line item.
  */
 tax_breakdown?: Schemas.tax_product_resource_line_item_tax_breakdown[] | null
 /**
  * @description The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for this resource.
  */
 tax_code: string
}

/**
 * @title TaxProductRegistrationsResourceTaxRegistration
 * @description A Tax `Registration` lets us know that your business is registered to collect tax on payments within a region, enabling you to [automatically collect tax](https://stripe.com/docs/tax).
 * 
 * Stripe doesn't register on your behalf with the relevant authorities when you create a Tax `Registration` object. For more information on how to register to collect tax, see [our guide](https://stripe.com/docs/tax/registering).
 * 
 * Related guide: [Using the Registrations API](https://stripe.com/docs/tax/registrations-api)
 */
export type taxregistration = {
 /**
  * @description Time at which the registration becomes active. Measured in seconds since the Unix epoch.
  */
 active_from: number
 /**
  * @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  */
 country: string
 /**
  * @title TaxProductRegistrationsResourceCountryOptions
  */
 country_options: Schemas.tax_product_registrations_resource_country_options
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description If set, the registration stops being active at this time. If not set, the registration will be active indefinitely. Measured in seconds since the Unix epoch.
  */
 expires_at?: number | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'tax.registration'
 /**
  * @description The status of the registration. This field is present for convenience and can be deduced from `active_from` and `expires_at`.
  */
 status: ('active' | 'expired' | 'scheduled')
}

/**
 * @title TaxProductResourceTaxSettings
 * @description You can use Tax `Settings` to manage configurations used by Stripe Tax calculations.
 * 
 * Related guide: [Using the Settings API](https://stripe.com/docs/tax/settings-api)
 */
export type taxsettings = {
 /**
  * @title TaxProductResourceTaxSettingsDefaults
  */
 defaults: Schemas.tax_product_resource_tax_settings_defaults
 /**
  * @description The place where your business is located.
  */
 head_office?: Schemas.tax_product_resource_tax_settings_head_office | null
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'tax.settings'
 /**
  * @description The status of the Tax `Settings`.
  */
 status: ('active' | 'pending')
 /**
  * @title TaxProductResourceTaxSettingsStatusDetails
  */
 status_details: Schemas.tax_product_resource_tax_settings_status_details
}

/**
 * @title TaxProductResourceTaxTransaction
 * @description A Tax Transaction records the tax collected from or refunded to your customer.
 * 
 * Related guide: [Calculate tax in your custom payment flow](https://stripe.com/docs/tax/custom#tax-transaction)
 */
export type taxtransaction = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description The ID of an existing [Customer](https://stripe.com/docs/api/customers/object) used for the resource.
  */
 customer?: string | null
 /**
  * @title TaxProductResourceCustomerDetails
  */
 customer_details: Schemas.tax_product_resource_customer_details
 /**
  * @description Unique identifier for the transaction.
  */
 id: string
 /**
  * @title TaxProductResourceTaxTransactionLineItemList
  * @description The tax collected or refunded, by line item.
  */
 line_items?: {
  /**
   * @description Details about each object.
   */
  data: Schemas.taxtransaction_line_item[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 } | null
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'tax.transaction'
 /**
  * @description The Unix timestamp representing when the tax liability is assumed or reduced.
  */
 posted_at: number
 /**
  * @description A custom unique identifier, such as 'myOrder_123'.
  */
 reference: string
 /**
  * @description If `type=reversal`, contains information about what was reversed.
  */
 reversal?: Schemas.tax_product_resource_tax_transaction_resource_reversal | null
 /**
  * @description The details of the ship from location, such as the address.
  */
 ship_from_details?: Schemas.tax_product_resource_ship_from_details | null
 /**
  * @description The shipping cost details for the transaction.
  */
 shipping_cost?: Schemas.tax_product_resource_tax_transaction_shipping_cost | null
 /**
  * @description Timestamp of date at which the tax rules and rates in effect applies for the calculation.
  */
 tax_date: number
 /**
  * @description If `reversal`, this transaction reverses an earlier transaction.
  */
 type: ('reversal' | 'transaction')
}

/**
 * @title TaxProductResourceTaxTransactionLineItem
 */
export type taxtransaction_line_item = {
 /**
  * @description The line item amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.
  */
 amount: number
 /**
  * @description The amount of tax calculated for this line item, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 amount_tax: number
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'tax.transaction_line_item'
 /**
  * @description The ID of an existing [Product](https://stripe.com/docs/api/products/object).
  */
 product?: string | null
 /**
  * @description The number of units of the item being purchased. For reversals, this is the quantity reversed.
  */
 quantity: number
 /**
  * @description A custom identifier for this line item in the transaction.
  */
 reference: string
 /**
  * @description If `type=reversal`, contains information about what was reversed.
  */
 reversal?: Schemas.tax_product_resource_tax_transaction_line_item_resource_reversal | null
 /**
  * @description Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
  */
 tax_behavior: ('exclusive' | 'inclusive')
 /**
  * @description The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for this resource.
  */
 tax_code: string
 /**
  * @description If `reversal`, this line item reverses an earlier transaction.
  */
 type: ('reversal' | 'transaction')
}

/**
 * @title TaxProductResourceTaxCode
 * @description [Tax codes](https://stripe.com/docs/tax/tax-categories) classify goods and services for tax purposes.
 */
export type tax_code = {
 /**
  * @description A detailed description of which types of products the tax code represents.
  */
 description: string
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description A short name for the tax code.
  */
 name: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'tax_code'
}

/**
 * @title TaxDeductedAtSource
 */
export type tax_deducted_at_source = {
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'tax_deducted_at_source'
 /**
  * @description The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
  */
 period_end: number
 /**
  * @description The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
  */
 period_start: number
 /**
  * @description The TAN that was supplied to Stripe when TDS was assessed
  */
 tax_deduction_account_number: string
}

/**
 * @title TaxIDsOwner
 */
export type tax_i_ds_owner = {
 /**
  * @description The account being referenced when `type` is `account`.
  */
 account?: (string | Schemas.account)
 /**
  * @description The Connect Application being referenced when `type` is `application`.
  */
 application?: (string | Schemas.application)
 /**
  * @description The customer being referenced when `type` is `customer`.
  */
 customer?: (string | Schemas.customer)
 /**
  * @description Type of owner referenced.
  */
 type: ('account' | 'application' | 'customer' | 'self')
}

/**
 * @title tax_id
 * @description You can add one or multiple tax IDs to a [customer](https://stripe.com/docs/api/customers) or account.
 * Customer and account tax IDs get displayed on related invoices and credit notes.
 * 
 * Related guides: [Customer tax identification numbers](https://stripe.com/docs/billing/taxes/tax-ids), [Account tax IDs](https://stripe.com/docs/invoicing/connect#account-tax-ids)
 */
export type tax_id = {
 /**
  * @description Two-letter ISO code representing the country of the tax ID.
  */
 country?: string | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description ID of the customer.
  */
 customer?: (string | Schemas.customer) | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'tax_id'
 /**
  * @description The account or customer the tax ID belongs to.
  */
 owner?: Schemas.tax_i_ds_owner | null
 /**
  * @description Type of the tax ID, one of `ad_nrt`, `ae_trn`, `al_tin`, `am_tin`, `ao_tin`, `ar_cuit`, `au_abn`, `au_arn`, `aw_tin`, `az_tin`, `ba_tin`, `bb_tin`, `bd_bin`, `bf_ifu`, `bg_uic`, `bh_vat`, `bj_ifu`, `bo_tin`, `br_cnpj`, `br_cpf`, `bs_tin`, `by_tin`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `cd_nif`, `ch_uid`, `ch_vat`, `cl_tin`, `cm_niu`, `cn_tin`, `co_nit`, `cr_tin`, `cv_nif`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `et_tin`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `gn_nif`, `hk_br`, `hr_oib`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kg_tin`, `kh_tin`, `kr_brn`, `kz_bin`, `la_tin`, `li_uid`, `li_vat`, `ma_vat`, `md_vat`, `me_pib`, `mk_vat`, `mr_nif`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `np_pan`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sn_ninea`, `sr_fin`, `sv_nit`, `th_vat`, `tj_tin`, `tr_tin`, `tw_vat`, `tz_vat`, `ua_vat`, `ug_tin`, `us_ein`, `uy_ruc`, `uz_tin`, `uz_vat`, `ve_rif`, `vn_tin`, `za_vat`, `zm_tin`, or `zw_tin`. Note that some legacy tax IDs have type `unknown`
  */
 type: ('ad_nrt' | 'ae_trn' | 'al_tin' | 'am_tin' | 'ao_tin' | 'ar_cuit' | 'au_abn' | 'au_arn' | 'aw_tin' | 'az_tin' | 'ba_tin' | 'bb_tin' | 'bd_bin' | 'bf_ifu' | 'bg_uic' | 'bh_vat' | 'bj_ifu' | 'bo_tin' | 'br_cnpj' | 'br_cpf' | 'bs_tin' | 'by_tin' | 'ca_bn' | 'ca_gst_hst' | 'ca_pst_bc' | 'ca_pst_mb' | 'ca_pst_sk' | 'ca_qst' | 'cd_nif' | 'ch_uid' | 'ch_vat' | 'cl_tin' | 'cm_niu' | 'cn_tin' | 'co_nit' | 'cr_tin' | 'cv_nif' | 'de_stn' | 'do_rcn' | 'ec_ruc' | 'eg_tin' | 'es_cif' | 'et_tin' | 'eu_oss_vat' | 'eu_vat' | 'gb_vat' | 'ge_vat' | 'gn_nif' | 'hk_br' | 'hr_oib' | 'hu_tin' | 'id_npwp' | 'il_vat' | 'in_gst' | 'is_vat' | 'jp_cn' | 'jp_rn' | 'jp_trn' | 'ke_pin' | 'kg_tin' | 'kh_tin' | 'kr_brn' | 'kz_bin' | 'la_tin' | 'li_uid' | 'li_vat' | 'ma_vat' | 'md_vat' | 'me_pib' | 'mk_vat' | 'mr_nif' | 'mx_rfc' | 'my_frp' | 'my_itn' | 'my_sst' | 'ng_tin' | 'no_vat' | 'no_voec' | 'np_pan' | 'nz_gst' | 'om_vat' | 'pe_ruc' | 'ph_tin' | 'ro_tin' | 'rs_pib' | 'ru_inn' | 'ru_kpp' | 'sa_vat' | 'sg_gst' | 'sg_uen' | 'si_tin' | 'sn_ninea' | 'sr_fin' | 'sv_nit' | 'th_vat' | 'tj_tin' | 'tr_tin' | 'tw_vat' | 'tz_vat' | 'ua_vat' | 'ug_tin' | 'unknown' | 'us_ein' | 'uy_ruc' | 'uz_tin' | 'uz_vat' | 've_rif' | 'vn_tin' | 'za_vat' | 'zm_tin' | 'zw_tin')
 /**
  * @description Value of the tax ID.
  */
 value: string
 /**
  * @description Tax ID verification information.
  */
 verification?: Schemas.tax_id_verification | null
}

/**
 * @title tax_id_verification
 */
export type tax_id_verification = {
 /**
  * @description Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`.
  */
 status: ('pending' | 'unavailable' | 'unverified' | 'verified')
 /**
  * @description Verified address.
  */
 verified_address?: string | null
 /**
  * @description Verified name.
  */
 verified_name?: string | null
}

/**
 * @title TaxProductRegistrationsResourceCountryOptions
 */
export type tax_product_registrations_resource_country_options = {
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods
  */
 ae?: Schemas.tax_product_registrations_resource_country_options_default_inbound_goods
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 al?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 am?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 ao?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 at?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods
  */
 au?: Schemas.tax_product_registrations_resource_country_options_default_inbound_goods
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 aw?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 az?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 ba?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 bb?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 bd?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 be?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 bf?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 bg?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 bh?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 bj?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 bs?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 by?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsCanada
  */
 ca?: Schemas.tax_product_registrations_resource_country_options_canada
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 cd?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods
  */
 ch?: Schemas.tax_product_registrations_resource_country_options_default_inbound_goods
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 cl?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 cm?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 co?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 cr?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 cv?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 cy?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 cz?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 de?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 dk?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 ec?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 ee?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 eg?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 es?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 et?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 fi?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 fr?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods
  */
 gb?: Schemas.tax_product_registrations_resource_country_options_default_inbound_goods
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 ge?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 gn?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 gr?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 hr?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 hu?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 id?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 ie?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 in?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 is?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 it?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods
  */
 jp?: Schemas.tax_product_registrations_resource_country_options_default_inbound_goods
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 ke?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 kg?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 kh?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 kr?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 kz?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 la?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 lt?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 lu?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 lv?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 ma?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 md?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 me?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 mk?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 mr?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 mt?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 mx?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 my?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 ng?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 nl?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods
  */
 no?: Schemas.tax_product_registrations_resource_country_options_default_inbound_goods
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 np?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods
  */
 nz?: Schemas.tax_product_registrations_resource_country_options_default_inbound_goods
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 om?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 pe?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 ph?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 pl?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 pt?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 ro?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 rs?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 ru?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 sa?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 se?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods
  */
 sg?: Schemas.tax_product_registrations_resource_country_options_default_inbound_goods
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 si?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEurope
  */
 sk?: Schemas.tax_product_registrations_resource_country_options_europe
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 sn?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 sr?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 th?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 tj?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 tr?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 tz?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 ua?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 ug?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsUnitedStates
  */
 us?: Schemas.tax_product_registrations_resource_country_options_united_states
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 uy?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 uz?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 vn?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 za?: Schemas.tax_product_registrations_resource_country_options_default
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsSimplified
  */
 zm?: Schemas.tax_product_registrations_resource_country_options_simplified
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefault
  */
 zw?: Schemas.tax_product_registrations_resource_country_options_default
}

/**
 * @title TaxProductRegistrationsResourceCountryOptionsCaProvinceStandard
 */
export type tax_product_registrations_resource_country_options_ca_province_standard = {
 /**
  * @description Two-letter CA province code ([ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2)).
  */
 province: string
}

/**
 * @title TaxProductRegistrationsResourceCountryOptionsCanada
 */
export type tax_product_registrations_resource_country_options_canada = {
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsCaProvinceStandard
  */
 province_standard?: Schemas.tax_product_registrations_resource_country_options_ca_province_standard
 /**
  * @description Type of registration in Canada.
  */
 type: ('province_standard' | 'simplified' | 'standard')
}

/**
 * @title TaxProductRegistrationsResourceCountryOptionsDefault
 */
export type tax_product_registrations_resource_country_options_default = {
 /**
  * @description Type of registration in `country`.
  */
 type: 'standard'
}

/**
 * @title TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods
 */
export type tax_product_registrations_resource_country_options_default_inbound_goods = {
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsDefaultStandard
  */
 standard?: Schemas.tax_product_registrations_resource_country_options_default_standard
 /**
  * @description Type of registration in `country`.
  */
 type: 'standard'
}

/**
 * @title TaxProductRegistrationsResourceCountryOptionsDefaultStandard
 */
export type tax_product_registrations_resource_country_options_default_standard = {
 /**
  * @description Place of supply scheme used in an Default standard registration.
  */
 place_of_supply_scheme: ('inbound_goods' | 'standard')
}

/**
 * @title TaxProductRegistrationsResourceCountryOptionsEuStandard
 */
export type tax_product_registrations_resource_country_options_eu_standard = {
 /**
  * @description Place of supply scheme used in an EU standard registration.
  */
 place_of_supply_scheme: ('inbound_goods' | 'small_seller' | 'standard')
}

/**
 * @title TaxProductRegistrationsResourceCountryOptionsEurope
 */
export type tax_product_registrations_resource_country_options_europe = {
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsEuStandard
  */
 standard?: Schemas.tax_product_registrations_resource_country_options_eu_standard
 /**
  * @description Type of registration in an EU country.
  */
 type: ('ioss' | 'oss_non_union' | 'oss_union' | 'standard')
}

/**
 * @title TaxProductRegistrationsResourceCountryOptionsSimplified
 */
export type tax_product_registrations_resource_country_options_simplified = {
 /**
  * @description Type of registration in `country`.
  */
 type: 'simplified'
}

/**
 * @title TaxProductRegistrationsResourceCountryOptionsUnitedStates
 */
export type tax_product_registrations_resource_country_options_united_states = {
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsUsLocalAmusementTax
  */
 local_amusement_tax?: Schemas.tax_product_registrations_resource_country_options_us_local_amusement_tax
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsUsLocalLeaseTax
  */
 local_lease_tax?: Schemas.tax_product_registrations_resource_country_options_us_local_lease_tax
 /**
  * @description Two-letter US state code ([ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2)).
  */
 state: string
 /**
  * @title TaxProductRegistrationsResourceCountryOptionsUsStateSalesTax
  */
 state_sales_tax?: Schemas.tax_product_registrations_resource_country_options_us_state_sales_tax
 /**
  * @description Type of registration in the US.
  */
 type: ('local_amusement_tax' | 'local_lease_tax' | 'state_communications_tax' | 'state_retail_delivery_fee' | 'state_sales_tax')
}

/**
 * @title TaxProductRegistrationsResourceCountryOptionsUsLocalAmusementTax
 */
export type tax_product_registrations_resource_country_options_us_local_amusement_tax = {
 /**
  * @description A [FIPS code](https://www.census.gov/library/reference/code-lists/ansi.html) representing the local jurisdiction.
  */
 jurisdiction: string
}

/**
 * @title TaxProductRegistrationsResourceCountryOptionsUsLocalLeaseTax
 */
export type tax_product_registrations_resource_country_options_us_local_lease_tax = {
 /**
  * @description A [FIPS code](https://www.census.gov/library/reference/code-lists/ansi.html) representing the local jurisdiction.
  */
 jurisdiction: string
}

/**
 * @title TaxProductRegistrationsResourceCountryOptionsUsStateSalesTax
 */
export type tax_product_registrations_resource_country_options_us_state_sales_tax = {
 /**
  * @description Elections for the state sales tax registration.
  */
 elections?: Schemas.tax_product_registrations_resource_country_options_us_state_sales_tax_election[]
}

/**
 * @title TaxProductRegistrationsResourceCountryOptionsUsStateSalesTaxElection
 */
export type tax_product_registrations_resource_country_options_us_state_sales_tax_election = {
 /**
  * @description A [FIPS code](https://www.census.gov/library/reference/code-lists/ansi.html) representing the local jurisdiction.
  */
 jurisdiction?: string
 /**
  * @description The type of the election for the state sales tax registration.
  */
 type: ('local_use_tax' | 'simplified_sellers_use_tax' | 'single_local_use_tax')
}

/**
 * @title TaxProductResourceCustomerDetails
 */
export type tax_product_resource_customer_details = {
 /**
  * @description The customer's postal address (for example, home or business location).
  */
 address?: Schemas.tax_product_resource_postal_address | null
 /**
  * @description The type of customer address provided.
  */
 address_source?: ('billing' | 'shipping') | null
 /**
  * @description The customer's IP address (IPv4 or IPv6).
  */
 ip_address?: string | null
 /**
  * @description The customer's tax IDs (for example, EU VAT numbers).
  */
 tax_ids: Schemas.tax_product_resource_customer_details_resource_tax_id[]
 /**
  * @description The taxability override used for taxation.
  */
 taxability_override: ('customer_exempt' | 'none' | 'reverse_charge')
}

/**
 * @title TaxProductResourceCustomerDetailsResourceTaxId
 */
export type tax_product_resource_customer_details_resource_tax_id = {
 /**
  * @description The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `hr_oib`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `no_voec`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `li_vat`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, `al_tin`, `bh_vat`, `kz_bin`, `ng_tin`, `om_vat`, `de_stn`, `ch_uid`, `tz_vat`, `uz_vat`, `uz_tin`, `md_vat`, `ma_vat`, `by_tin`, `ao_tin`, `bs_tin`, `bb_tin`, `cd_nif`, `mr_nif`, `me_pib`, `zw_tin`, `ba_tin`, `gn_nif`, `mk_vat`, `sr_fin`, `sn_ninea`, `am_tin`, `np_pan`, `tj_tin`, `ug_tin`, `zm_tin`, `kh_tin`, `aw_tin`, `az_tin`, `bd_bin`, `bj_ifu`, `et_tin`, `kg_tin`, `la_tin`, `cm_niu`, `cv_nif`, `bf_ifu`, or `unknown`
  */
 type: ('ad_nrt' | 'ae_trn' | 'al_tin' | 'am_tin' | 'ao_tin' | 'ar_cuit' | 'au_abn' | 'au_arn' | 'aw_tin' | 'az_tin' | 'ba_tin' | 'bb_tin' | 'bd_bin' | 'bf_ifu' | 'bg_uic' | 'bh_vat' | 'bj_ifu' | 'bo_tin' | 'br_cnpj' | 'br_cpf' | 'bs_tin' | 'by_tin' | 'ca_bn' | 'ca_gst_hst' | 'ca_pst_bc' | 'ca_pst_mb' | 'ca_pst_sk' | 'ca_qst' | 'cd_nif' | 'ch_uid' | 'ch_vat' | 'cl_tin' | 'cm_niu' | 'cn_tin' | 'co_nit' | 'cr_tin' | 'cv_nif' | 'de_stn' | 'do_rcn' | 'ec_ruc' | 'eg_tin' | 'es_cif' | 'et_tin' | 'eu_oss_vat' | 'eu_vat' | 'gb_vat' | 'ge_vat' | 'gn_nif' | 'hk_br' | 'hr_oib' | 'hu_tin' | 'id_npwp' | 'il_vat' | 'in_gst' | 'is_vat' | 'jp_cn' | 'jp_rn' | 'jp_trn' | 'ke_pin' | 'kg_tin' | 'kh_tin' | 'kr_brn' | 'kz_bin' | 'la_tin' | 'li_uid' | 'li_vat' | 'ma_vat' | 'md_vat' | 'me_pib' | 'mk_vat' | 'mr_nif' | 'mx_rfc' | 'my_frp' | 'my_itn' | 'my_sst' | 'ng_tin' | 'no_vat' | 'no_voec' | 'np_pan' | 'nz_gst' | 'om_vat' | 'pe_ruc' | 'ph_tin' | 'ro_tin' | 'rs_pib' | 'ru_inn' | 'ru_kpp' | 'sa_vat' | 'sg_gst' | 'sg_uen' | 'si_tin' | 'sn_ninea' | 'sr_fin' | 'sv_nit' | 'th_vat' | 'tj_tin' | 'tr_tin' | 'tw_vat' | 'tz_vat' | 'ua_vat' | 'ug_tin' | 'unknown' | 'us_ein' | 'uy_ruc' | 'uz_tin' | 'uz_vat' | 've_rif' | 'vn_tin' | 'za_vat' | 'zm_tin' | 'zw_tin')
 /**
  * @description The value of the tax ID.
  */
 value: string
}

/**
 * @title TaxProductResourceJurisdiction
 */
export type tax_product_resource_jurisdiction = {
 /**
  * @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  */
 country: string
 /**
  * @description A human-readable name for the jurisdiction imposing the tax.
  */
 display_name: string
 /**
  * @description Indicates the level of the jurisdiction imposing the tax.
  */
 level: ('city' | 'country' | 'county' | 'district' | 'state')
 /**
  * @description [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2), without country prefix. For example, "NY" for New York, United States.
  */
 state?: string | null
}

/**
 * @title TaxProductResourceLineItemTaxBreakdown
 */
export type tax_product_resource_line_item_tax_breakdown = {
 /**
  * @description The amount of tax, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 amount: number
 /**
  * @title TaxProductResourceJurisdiction
  */
 jurisdiction: Schemas.tax_product_resource_jurisdiction
 /**
  * @description Indicates whether the jurisdiction was determined by the origin (merchant's address) or destination (customer's address).
  */
 sourcing: ('destination' | 'origin')
 /**
  * @description Details regarding the rate for this tax. This field will be `null` when the tax is not imposed, for example if the product is exempt from tax.
  */
 tax_rate_details?: Schemas.tax_product_resource_line_item_tax_rate_details | null
 /**
  * @description The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
  */
 taxability_reason: ('customer_exempt' | 'not_collecting' | 'not_subject_to_tax' | 'not_supported' | 'portion_product_exempt' | 'portion_reduced_rated' | 'portion_standard_rated' | 'product_exempt' | 'product_exempt_holiday' | 'proportionally_rated' | 'reduced_rated' | 'reverse_charge' | 'standard_rated' | 'taxable_basis_reduced' | 'zero_rated')
 /**
  * @description The amount on which tax is calculated, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 taxable_amount: number
}

/**
 * @title TaxProductResourceLineItemTaxRateDetails
 */
export type tax_product_resource_line_item_tax_rate_details = {
 /**
  * @description A localized display name for tax type, intended to be human-readable. For example, "Local Sales and Use Tax", "Value-added tax (VAT)", or "Umsatzsteuer (USt.)".
  */
 display_name: string
 /**
  * @description The tax rate percentage as a string. For example, 8.5% is represented as "8.5".
  */
 percentage_decimal: string
 /**
  * @description The tax type, such as `vat` or `sales_tax`.
  */
 tax_type: ('amusement_tax' | 'communications_tax' | 'gst' | 'hst' | 'igst' | 'jct' | 'lease_tax' | 'pst' | 'qst' | 'retail_delivery_fee' | 'rst' | 'sales_tax' | 'service_tax' | 'vat')
}

/**
 * @title TaxProductResourcePostalAddress
 */
export type tax_product_resource_postal_address = {
 /**
  * @description City, district, suburb, town, or village.
  */
 city?: string | null
 /**
  * @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  */
 country: string
 /**
  * @description Address line 1 (e.g., street, PO Box, or company name).
  */
 line1?: string | null
 /**
  * @description Address line 2 (e.g., apartment, suite, unit, or building).
  */
 line2?: string | null
 /**
  * @description ZIP or postal code.
  */
 postal_code?: string | null
 /**
  * @description State/province as an [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) subdivision code, without country prefix. Example: "NY" or "TX".
  */
 state?: string | null
}

/**
 * @title TaxProductResourceShipFromDetails
 */
export type tax_product_resource_ship_from_details = {
 /**
  * @title TaxProductResourcePostalAddress
  */
 address: Schemas.tax_product_resource_postal_address
}

/**
 * @title TaxProductResourceTaxBreakdown
 */
export type tax_product_resource_tax_breakdown = {
 /**
  * @description The amount of tax, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 amount: number
 /**
  * @description Specifies whether the tax amount is included in the line item amount.
  */
 inclusive: boolean
 /**
  * @title TaxProductResourceTaxRateDetails
  */
 tax_rate_details: Schemas.tax_product_resource_tax_rate_details
 /**
  * @description The reasoning behind this tax, for example, if the product is tax exempt. We might extend the possible values for this field to support new tax rules.
  */
 taxability_reason: ('customer_exempt' | 'not_collecting' | 'not_subject_to_tax' | 'not_supported' | 'portion_product_exempt' | 'portion_reduced_rated' | 'portion_standard_rated' | 'product_exempt' | 'product_exempt_holiday' | 'proportionally_rated' | 'reduced_rated' | 'reverse_charge' | 'standard_rated' | 'taxable_basis_reduced' | 'zero_rated')
 /**
  * @description The amount on which tax is calculated, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 taxable_amount: number
}

/**
 * @title TaxProductResourceTaxCalculationShippingCost
 */
export type tax_product_resource_tax_calculation_shipping_cost = {
 /**
  * @description The shipping amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.
  */
 amount: number
 /**
  * @description The amount of tax calculated for shipping, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 amount_tax: number
 /**
  * @description The ID of an existing [ShippingRate](https://stripe.com/docs/api/shipping_rates/object).
  */
 shipping_rate?: string
 /**
  * @description Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
  */
 tax_behavior: ('exclusive' | 'inclusive')
 /**
  * @description Detailed account of taxes relevant to shipping cost.
  */
 tax_breakdown?: Schemas.tax_product_resource_line_item_tax_breakdown[]
 /**
  * @description The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for shipping.
  */
 tax_code: string
}

/**
 * @title TaxProductResourceTaxRateDetails
 */
export type tax_product_resource_tax_rate_details = {
 /**
  * @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  */
 country?: string | null
 /**
  * @description The amount of the tax rate when the `rate_type` is `flat_amount`. Tax rates with `rate_type` `percentage` can vary based on the transaction, resulting in this field being `null`. This field exposes the amount and currency of the flat tax rate.
  */
 flat_amount?: Schemas.tax_rate_flat_amount | null
 /**
  * @description The tax rate percentage as a string. For example, 8.5% is represented as `"8.5"`.
  */
 percentage_decimal: string
 /**
  * @description Indicates the type of tax rate applied to the taxable amount. This value can be `null` when no tax applies to the location. This field is only present for TaxRates created by Stripe Tax.
  */
 rate_type?: ('flat_amount' | 'percentage') | null
 /**
  * @description State, county, province, or region.
  */
 state?: string | null
 /**
  * @description The tax type, such as `vat` or `sales_tax`.
  */
 tax_type?: ('amusement_tax' | 'communications_tax' | 'gst' | 'hst' | 'igst' | 'jct' | 'lease_tax' | 'pst' | 'qst' | 'retail_delivery_fee' | 'rst' | 'sales_tax' | 'service_tax' | 'vat') | null
}

/**
 * @title TaxProductResourceTaxSettingsDefaults
 */
export type tax_product_resource_tax_settings_defaults = {
 /**
  * @description Default [tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#tax-behavior) used to specify whether the price is considered inclusive of taxes or exclusive of taxes. If the item's price has a tax behavior set, it will take precedence over the default tax behavior.
  */
 tax_behavior?: ('exclusive' | 'inclusive' | 'inferred_by_currency') | null
 /**
  * @description Default [tax code](https://stripe.com/docs/tax/tax-categories) used to classify your products and prices.
  */
 tax_code?: string | null
}

/**
 * @title TaxProductResourceTaxSettingsHeadOffice
 */
export type tax_product_resource_tax_settings_head_office = {
 /**
  * @title Address
  */
 address: Schemas.address
}

/**
 * @title TaxProductResourceTaxSettingsStatusDetails
 */
export type tax_product_resource_tax_settings_status_details = {
 /**
  * @title TaxProductResourceTaxSettingsStatusDetailsResourceActive
  */
 active?: Schemas.tax_product_resource_tax_settings_status_details_resource_active
 /**
  * @title TaxProductResourceTaxSettingsStatusDetailsResourcePending
  */
 pending?: Schemas.tax_product_resource_tax_settings_status_details_resource_pending
}

/**
 * @title TaxProductResourceTaxSettingsStatusDetailsResourceActive
 */
export type tax_product_resource_tax_settings_status_details_resource_active = unknown

/**
 * @title TaxProductResourceTaxSettingsStatusDetailsResourcePending
 */
export type tax_product_resource_tax_settings_status_details_resource_pending = {
 /**
  * @description The list of missing fields that are required to perform calculations. It includes the entry `head_office` when the status is `pending`. It is recommended to set the optional values even if they aren't listed as required for calculating taxes. Calculations can fail if missing fields aren't explicitly provided on every call.
  */
 missing_fields?: string[] | null
}

/**
 * @title TaxProductResourceTaxTransactionLineItemResourceReversal
 */
export type tax_product_resource_tax_transaction_line_item_resource_reversal = {
 /**
  * @description The `id` of the line item to reverse in the original transaction.
  */
 original_line_item: string
}

/**
 * @title TaxProductResourceTaxTransactionResourceReversal
 */
export type tax_product_resource_tax_transaction_resource_reversal = {
 /**
  * @description The `id` of the reversed `Transaction` object.
  */
 original_transaction?: string | null
}

/**
 * @title TaxProductResourceTaxTransactionShippingCost
 */
export type tax_product_resource_tax_transaction_shipping_cost = {
 /**
  * @description The shipping amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.
  */
 amount: number
 /**
  * @description The amount of tax calculated for shipping, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 amount_tax: number
 /**
  * @description The ID of an existing [ShippingRate](https://stripe.com/docs/api/shipping_rates/object).
  */
 shipping_rate?: string
 /**
  * @description Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
  */
 tax_behavior: ('exclusive' | 'inclusive')
 /**
  * @description The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for shipping.
  */
 tax_code: string
}

/**
 * @title TaxRate
 * @description Tax rates can be applied to [invoices](/invoicing/taxes/tax-rates), [subscriptions](/billing/taxes/tax-rates) and [Checkout Sessions](/payments/checkout/use-manual-tax-rates) to collect tax.
 * 
 * Related guide: [Tax rates](/billing/taxes/tax-rates)
 */
export type tax_rate = {
 /**
  * @description Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
  */
 active: boolean
 /**
  * @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  */
 country?: string | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
  */
 description?: string | null
 /**
  * @description The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.
  */
 display_name: string
 /**
  * @description Actual/effective tax rate percentage out of 100. For tax calculations with automatic_tax[enabled]=true,
  * this percentage reflects the rate actually used to calculate tax based on the product's taxability
  * and whether the user is registered to collect taxes in the corresponding jurisdiction.
  */
 effective_percentage?: number | null
 /**
  * @description The amount of the tax rate when the `rate_type` is `flat_amount`. Tax rates with `rate_type` `percentage` can vary based on the transaction, resulting in this field being `null`. This field exposes the amount and currency of the flat tax rate.
  */
 flat_amount?: Schemas.tax_rate_flat_amount | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description This specifies if the tax rate is inclusive or exclusive.
  */
 inclusive: boolean
 /**
  * @description The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
  */
 jurisdiction?: string | null
 /**
  * @description The level of the jurisdiction that imposes this tax rate. Will be `null` for manually defined tax rates.
  */
 jurisdiction_level?: ('city' | 'country' | 'county' | 'district' | 'multiple' | 'state') | null
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'tax_rate'
 /**
  * @description Tax rate percentage out of 100. For tax calculations with automatic_tax[enabled]=true, this percentage includes the statutory tax rate of non-taxable jurisdictions.
  */
 percentage: number
 /**
  * @description Indicates the type of tax rate applied to the taxable amount. This value can be `null` when no tax applies to the location. This field is only present for TaxRates created by Stripe Tax.
  */
 rate_type?: ('flat_amount' | 'percentage') | null
 /**
  * @description [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2), without country prefix. For example, "NY" for New York, United States.
  */
 state?: string | null
 /**
  * @description The high-level tax type, such as `vat` or `sales_tax`.
  */
 tax_type?: ('amusement_tax' | 'communications_tax' | 'gst' | 'hst' | 'igst' | 'jct' | 'lease_tax' | 'pst' | 'qst' | 'retail_delivery_fee' | 'rst' | 'sales_tax' | 'service_tax' | 'vat') | null
}

/**
 * @title TaxRateFlatAmount
 * @description The amount of the tax rate when the `rate_type`` is `flat_amount`. Tax rates with `rate_type` `percentage` can vary based on the transaction, resulting in this field being `null`. This field exposes the amount and currency of the flat tax rate.
 */
export type tax_rate_flat_amount = {
 /**
  * @description Amount of the tax when the `rate_type` is `flat_amount`. This positive integer represents how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  */
 amount: number
 /**
  * @description Three-letter ISO currency code, in lowercase.
  */
 currency: string
}

/**
 * @title TerminalConfigurationConfiguration
 * @description A Configurations object represents how features should be configured for terminal readers.
 * For information about how to use it, see the [Terminal configurations documentation](https://docs.stripe.com/terminal/fleet/configurations-overview).
 */
export type terminalconfiguration = {
 /**
  * @title TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig
  */
 bbpos_wisepos_e?: Schemas.terminal_configuration_configuration_resource_device_type_specific_config
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Whether this Configuration is the default for your account
  */
 is_account_default?: boolean | null
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String indicating the name of the Configuration object, set by the user
  */
 name?: string | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'terminal.configuration'
 /**
  * @title TerminalConfigurationConfigurationResourceOfflineConfig
  */
 offline?: Schemas.terminal_configuration_configuration_resource_offline_config
 /**
  * @title TerminalConfigurationConfigurationResourceRebootWindow
  */
 reboot_window?: Schemas.terminal_configuration_configuration_resource_reboot_window
 /**
  * @title TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig
  */
 stripe_s700?: Schemas.terminal_configuration_configuration_resource_device_type_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceTipping
  */
 tipping?: Schemas.terminal_configuration_configuration_resource_tipping
 /**
  * @title TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig
  */
 verifone_p400?: Schemas.terminal_configuration_configuration_resource_device_type_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceWifiConfig
  */
 wifi?: Schemas.terminal_configuration_configuration_resource_wifi_config
}

/**
 * @title TerminalConnectionToken
 * @description A Connection Token is used by the Stripe Terminal SDK to connect to a reader.
 * 
 * Related guide: [Fleet management](https://stripe.com/docs/terminal/fleet/locations)
 */
export type terminalconnection_token = {
 /**
  * @description The id of the location that this connection token is scoped to. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://docs.stripe.com/terminal/fleet/locations-and-zones?dashboard-or-api=api#connection-tokens).
  */
 location?: string
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'terminal.connection_token'
 /**
  * @description Your application should pass this token to the Stripe Terminal SDK.
  */
 secret: string
}

/**
 * @title TerminalLocationLocation
 * @description A Location represents a grouping of readers.
 * 
 * Related guide: [Fleet management](https://stripe.com/docs/terminal/fleet/locations)
 */
export type terminallocation = {
 /**
  * @title Address
  */
 address: Schemas.address
 /**
  * @description The ID of a configuration that will be used to customize all readers in this location.
  */
 configuration_overrides?: string
 /**
  * @description The display name of the location.
  */
 display_name: string
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'terminal.location'
}

/**
 * @title TerminalReaderReader
 * @description A Reader represents a physical device for accepting payment details.
 * 
 * Related guide: [Connecting to a reader](https://stripe.com/docs/terminal/payments/connect-reader)
 */
export type terminalreader = {
 /**
  * @description The most recent action performed by the reader.
  */
 action?: Schemas.terminal_reader_reader_resource_reader_action | null
 /**
  * @description The current software version of the reader.
  */
 device_sw_version?: string | null
 /**
  * @description Device type of the reader.
  */
 device_type: ('bbpos_chipper2x' | 'bbpos_wisepad3' | 'bbpos_wisepos_e' | 'mobile_phone_reader' | 'simulated_stripe_s700' | 'simulated_wisepos_e' | 'stripe_m2' | 'stripe_s700' | 'verifone_P400')
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description The local IP address of the reader.
  */
 ip_address?: string | null
 /**
  * @description Custom label given to the reader for easier identification.
  */
 label: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description The location identifier of the reader.
  */
 location?: (string | Schemas.terminallocation) | null
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'terminal.reader'
 /**
  * @description Serial number of the reader.
  */
 serial_number: string
 /**
  * @description The networking status of the reader. We do not recommend using this field in flows that may block taking payments.
  */
 status?: ('offline' | 'online') | null
}

/**
 * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
 */
export type terminal_configuration_configuration_resource_currency_specific_config = {
 /**
  * @description Fixed amounts displayed when collecting a tip
  */
 fixed_amounts?: number[] | null
 /**
  * @description Percentages displayed when collecting a tip
  */
 percentages?: number[] | null
 /**
  * @description Below this amount, fixed amounts will be displayed; above it, percentages will be displayed
  */
 smart_tip_threshold?: number
}

/**
 * @title TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig
 */
export type terminal_configuration_configuration_resource_device_type_specific_config = {
 /**
  * @description A File ID representing an image to display on the reader
  */
 splashscreen?: (string | Schemas.file)
}

/**
 * @title TerminalConfigurationConfigurationResourceEnterprisePEAPWifi
 */
export type terminal_configuration_configuration_resource_enterprise_peap_wifi = {
 /**
  * @description A File ID representing a PEM file containing the server certificate
  */
 ca_certificate_file?: string
 /**
  * @description Password for connecting to the WiFi network
  */
 password: string
 /**
  * @description Name of the WiFi network
  */
 ssid: string
 /**
  * @description Username for connecting to the WiFi network
  */
 username: string
}

/**
 * @title TerminalConfigurationConfigurationResourceEnterpriseTLSWifi
 */
export type terminal_configuration_configuration_resource_enterprise_tls_wifi = {
 /**
  * @description A File ID representing a PEM file containing the server certificate
  */
 ca_certificate_file?: string
 /**
  * @description A File ID representing a PEM file containing the client certificate
  */
 client_certificate_file: string
 /**
  * @description A File ID representing a PEM file containing the client RSA private key
  */
 private_key_file: string
 /**
  * @description Password for the private key file
  */
 private_key_file_password?: string
 /**
  * @description Name of the WiFi network
  */
 ssid: string
}

/**
 * @title TerminalConfigurationConfigurationResourceOfflineConfig
 */
export type terminal_configuration_configuration_resource_offline_config = {
 /**
  * @description Determines whether to allow transactions to be collected while reader is offline. Defaults to false.
  */
 enabled?: boolean | null
}

/**
 * @title TerminalConfigurationConfigurationResourcePersonalPSKWifi
 */
export type terminal_configuration_configuration_resource_personal_psk_wifi = {
 /**
  * @description Password for connecting to the WiFi network
  */
 password: string
 /**
  * @description Name of the WiFi network
  */
 ssid: string
}

/**
 * @title TerminalConfigurationConfigurationResourceRebootWindow
 */
export type terminal_configuration_configuration_resource_reboot_window = {
 /**
  * @description Integer between 0 to 23 that represents the end hour of the reboot time window. The value must be different than the start_hour.
  */
 end_hour: number
 /**
  * @description Integer between 0 to 23 that represents the start hour of the reboot time window.
  */
 start_hour: number
}

/**
 * @title TerminalConfigurationConfigurationResourceTipping
 */
export type terminal_configuration_configuration_resource_tipping = {
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 aed?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 aud?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 bgn?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 cad?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 chf?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 czk?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 dkk?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 eur?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 gbp?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 hkd?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 huf?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 jpy?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 mxn?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 myr?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 nok?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 nzd?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 pln?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 ron?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 sek?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 sgd?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
 /**
  * @title TerminalConfigurationConfigurationResourceCurrencySpecificConfig
  */
 usd?: Schemas.terminal_configuration_configuration_resource_currency_specific_config
}

/**
 * @title TerminalConfigurationConfigurationResourceWifiConfig
 */
export type terminal_configuration_configuration_resource_wifi_config = {
 /**
  * @title TerminalConfigurationConfigurationResourceEnterprisePEAPWifi
  */
 enterprise_eap_peap?: Schemas.terminal_configuration_configuration_resource_enterprise_peap_wifi
 /**
  * @title TerminalConfigurationConfigurationResourceEnterpriseTLSWifi
  */
 enterprise_eap_tls?: Schemas.terminal_configuration_configuration_resource_enterprise_tls_wifi
 /**
  * @title TerminalConfigurationConfigurationResourcePersonalPSKWifi
  */
 personal_psk?: Schemas.terminal_configuration_configuration_resource_personal_psk_wifi
 /**
  * @description Security type of the WiFi network. The hash with the corresponding name contains the credentials for this security type.
  */
 type: ('enterprise_eap_peap' | 'enterprise_eap_tls' | 'personal_psk')
}

/**
 * @title TerminalReaderReaderResourceCart
 * @description Represents a cart to be displayed on the reader
 */
export type terminal_reader_reader_resource_cart = {
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description List of line items in the cart.
  */
 line_items: Schemas.terminal_reader_reader_resource_line_item[]
 /**
  * @description Tax amount for the entire cart. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 tax?: number | null
 /**
  * @description Total amount for the entire cart, including tax. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 total: number
}

/**
 * @title TerminalReaderReaderResourceChoice
 * @description Choice to be selected on a Reader
 */
export type terminal_reader_reader_resource_choice = {
 /**
  * @description The id to be selected
  */
 id?: string | null
 /**
  * @description The button style for the choice
  */
 style?: ('primary' | 'secondary') | null
 /**
  * @description The text to be selected
  */
 text: string
}

/**
 * @title TerminalReaderReaderResourceCollectConfig
 * @description Represents a per-transaction override of a reader configuration
 */
export type terminal_reader_reader_resource_collect_config = {
 /**
  * @description Enable customer-initiated cancellation when processing this payment.
  */
 enable_customer_cancellation?: boolean
 /**
  * @description Override showing a tipping selection screen on this transaction.
  */
 skip_tipping?: boolean
 /**
  * @title TerminalReaderReaderResourceTippingConfig
  * @description Represents a per-transaction tipping configuration
  */
 tipping?: Schemas.terminal_reader_reader_resource_tipping_config
}

/**
 * @title TerminalReaderReaderResourceCollectInputsAction
 * @description Represents a reader action to collect customer inputs
 */
export type terminal_reader_reader_resource_collect_inputs_action = {
 /**
  * @description List of inputs to be collected.
  */
 inputs: Schemas.terminal_reader_reader_resource_input[]
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
}

/**
 * @title TerminalReaderReaderResourceCollectPaymentMethodAction
 * @description Represents a reader action to collect a payment method
 */
export type terminal_reader_reader_resource_collect_payment_method_action = {
 /**
  * @title TerminalReaderReaderResourceCollectConfig
  * @description Represents a per-transaction override of a reader configuration
  */
 collect_config?: Schemas.terminal_reader_reader_resource_collect_config
 /**
  * @description Most recent PaymentIntent processed by the reader.
  */
 payment_intent: (string | Schemas.payment_intent)
 /**
  * @title PaymentMethod
  * @description PaymentMethod objects represent your customer's payment instruments.
  * You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
  * Customer objects to store instrument details for future payments.
  * 
  * Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
  */
 payment_method?: Schemas.payment_method
}

/**
 * @title TerminalReaderReaderResourceConfirmConfig
 * @description Represents a per-transaction override of a reader configuration
 */
export type terminal_reader_reader_resource_confirm_config = {
 /**
  * @description If the customer doesn't abandon authenticating the payment, they're redirected to this URL after completion.
  */
 return_url?: string
}

/**
 * @title TerminalReaderReaderResourceConfirmPaymentIntentAction
 * @description Represents a reader action to confirm a payment
 */
export type terminal_reader_reader_resource_confirm_payment_intent_action = {
 /**
  * @title TerminalReaderReaderResourceConfirmConfig
  * @description Represents a per-transaction override of a reader configuration
  */
 confirm_config?: Schemas.terminal_reader_reader_resource_confirm_config
 /**
  * @description Most recent PaymentIntent processed by the reader.
  */
 payment_intent: (string | Schemas.payment_intent)
}

/**
 * @title TerminalReaderReaderResourceCustomText
 * @description Represents custom text to be displayed when collecting the input using a reader
 */
export type terminal_reader_reader_resource_custom_text = {
 /**
  * @description Customize the default description for this input
  */
 description?: string | null
 /**
  * @description Customize the default label for this input's skip button
  */
 skip_button?: string | null
 /**
  * @description Customize the default label for this input's submit button
  */
 submit_button?: string | null
 /**
  * @description Customize the default title for this input
  */
 title?: string | null
}

/**
 * @title TerminalReaderReaderResourceEmail
 * @description Information about a email being collected using a reader
 */
export type terminal_reader_reader_resource_email = {
 /**
  * @description The collected email address
  */
 value?: string | null
}

/**
 * @title TerminalReaderReaderResourceInput
 * @description Represents an input to be collected using the reader
 */
export type terminal_reader_reader_resource_input = {
 /**
  * @description Default text of input being collected.
  */
 custom_text?: Schemas.terminal_reader_reader_resource_custom_text | null
 /**
  * @title TerminalReaderReaderResourceEmail
  * @description Information about a email being collected using a reader
  */
 email?: Schemas.terminal_reader_reader_resource_email
 /**
  * @title TerminalReaderReaderResourceNumeric
  * @description Information about a number being collected using a reader
  */
 numeric?: Schemas.terminal_reader_reader_resource_numeric
 /**
  * @title TerminalReaderReaderResourcePhone
  * @description Information about a phone number being collected using a reader
  */
 phone?: Schemas.terminal_reader_reader_resource_phone
 /**
  * @description Indicate that this input is required, disabling the skip button.
  */
 required?: boolean | null
 /**
  * @title TerminalReaderReaderResourceSelection
  * @description Information about a selection being collected using a reader
  */
 selection?: Schemas.terminal_reader_reader_resource_selection
 /**
  * @title TerminalReaderReaderResourceSignature
  * @description Information about a signature being collected using a reader
  */
 signature?: Schemas.terminal_reader_reader_resource_signature
 /**
  * @description Indicate that this input was skipped by the user.
  */
 skipped?: boolean
 /**
  * @title TerminalReaderReaderResourceText
  * @description Information about text being collected using a reader
  */
 text?: Schemas.terminal_reader_reader_resource_text
 /**
  * @description List of toggles being collected. Values are present if collection is complete.
  */
 toggles?: Schemas.terminal_reader_reader_resource_toggle[] | null
 /**
  * @description Type of input being collected.
  */
 type: ('email' | 'numeric' | 'phone' | 'selection' | 'signature' | 'text')
}

/**
 * @title TerminalReaderReaderResourceLineItem
 * @description Represents a line item to be displayed on the reader
 */
export type terminal_reader_reader_resource_line_item = {
 /**
  * @description The amount of the line item. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  */
 amount: number
 /**
  * @description Description of the line item.
  */
 description: string
 /**
  * @description The quantity of the line item.
  */
 quantity: number
}

/**
 * @title TerminalReaderReaderResourceNumeric
 * @description Information about a number being collected using a reader
 */
export type terminal_reader_reader_resource_numeric = {
 /**
  * @description The collected number
  */
 value?: string | null
}

/**
 * @title TerminalReaderReaderResourcePhone
 * @description Information about a phone number being collected using a reader
 */
export type terminal_reader_reader_resource_phone = {
 /**
  * @description The collected phone number
  */
 value?: string | null
}

/**
 * @title TerminalReaderReaderResourceProcessConfig
 * @description Represents a per-transaction override of a reader configuration
 */
export type terminal_reader_reader_resource_process_config = {
 /**
  * @description Enable customer-initiated cancellation when processing this payment.
  */
 enable_customer_cancellation?: boolean
 /**
  * @description If the customer doesn't abandon authenticating the payment, they're redirected to this URL after completion.
  */
 return_url?: string
 /**
  * @description Override showing a tipping selection screen on this transaction.
  */
 skip_tipping?: boolean
 /**
  * @title TerminalReaderReaderResourceTippingConfig
  * @description Represents a per-transaction tipping configuration
  */
 tipping?: Schemas.terminal_reader_reader_resource_tipping_config
}

/**
 * @title TerminalReaderReaderResourceProcessPaymentIntentAction
 * @description Represents a reader action to process a payment intent
 */
export type terminal_reader_reader_resource_process_payment_intent_action = {
 /**
  * @description Most recent PaymentIntent processed by the reader.
  */
 payment_intent: (string | Schemas.payment_intent)
 /**
  * @title TerminalReaderReaderResourceProcessConfig
  * @description Represents a per-transaction override of a reader configuration
  */
 process_config?: Schemas.terminal_reader_reader_resource_process_config
}

/**
 * @title TerminalReaderReaderResourceProcessSetupConfig
 * @description Represents a per-setup override of a reader configuration
 */
export type terminal_reader_reader_resource_process_setup_config = {
 /**
  * @description Enable customer-initiated cancellation when processing this SetupIntent.
  */
 enable_customer_cancellation?: boolean
}

/**
 * @title TerminalReaderReaderResourceProcessSetupIntentAction
 * @description Represents a reader action to process a setup intent
 */
export type terminal_reader_reader_resource_process_setup_intent_action = {
 /**
  * @description ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
  */
 generated_card?: string
 /**
  * @title TerminalReaderReaderResourceProcessSetupConfig
  * @description Represents a per-setup override of a reader configuration
  */
 process_config?: Schemas.terminal_reader_reader_resource_process_setup_config
 /**
  * @description Most recent SetupIntent processed by the reader.
  */
 setup_intent: (string | Schemas.setup_intent)
}

/**
 * @title TerminalReaderReaderResourceReaderAction
 * @description Represents an action performed by the reader
 */
export type terminal_reader_reader_resource_reader_action = {
 /**
  * @title TerminalReaderReaderResourceCollectInputsAction
  * @description Represents a reader action to collect customer inputs
  */
 collect_inputs?: Schemas.terminal_reader_reader_resource_collect_inputs_action
 /**
  * @title TerminalReaderReaderResourceCollectPaymentMethodAction
  * @description Represents a reader action to collect a payment method
  */
 collect_payment_method?: Schemas.terminal_reader_reader_resource_collect_payment_method_action
 /**
  * @title TerminalReaderReaderResourceConfirmPaymentIntentAction
  * @description Represents a reader action to confirm a payment
  */
 confirm_payment_intent?: Schemas.terminal_reader_reader_resource_confirm_payment_intent_action
 /**
  * @description Failure code, only set if status is `failed`.
  */
 failure_code?: string | null
 /**
  * @description Detailed failure message, only set if status is `failed`.
  */
 failure_message?: string | null
 /**
  * @title TerminalReaderReaderResourceProcessPaymentIntentAction
  * @description Represents a reader action to process a payment intent
  */
 process_payment_intent?: Schemas.terminal_reader_reader_resource_process_payment_intent_action
 /**
  * @title TerminalReaderReaderResourceProcessSetupIntentAction
  * @description Represents a reader action to process a setup intent
  */
 process_setup_intent?: Schemas.terminal_reader_reader_resource_process_setup_intent_action
 /**
  * @title TerminalReaderReaderResourceRefundPaymentAction
  * @description Represents a reader action to refund a payment
  */
 refund_payment?: Schemas.terminal_reader_reader_resource_refund_payment_action
 /**
  * @title TerminalReaderReaderResourceSetReaderDisplayAction
  * @description Represents a reader action to set the reader display
  */
 set_reader_display?: Schemas.terminal_reader_reader_resource_set_reader_display_action
 /**
  * @description Status of the action performed by the reader.
  */
 status: ('failed' | 'in_progress' | 'succeeded')
 /**
  * @description Type of action performed by the reader.
  */
 type: ('collect_inputs' | 'collect_payment_method' | 'confirm_payment_intent' | 'process_payment_intent' | 'process_setup_intent' | 'refund_payment' | 'set_reader_display')
}

/**
 * @title TerminalReaderReaderResourceRefundPaymentAction
 * @description Represents a reader action to refund a payment
 */
export type terminal_reader_reader_resource_refund_payment_action = {
 /**
  * @description The amount being refunded.
  */
 amount?: number
 /**
  * @description Charge that is being refunded.
  */
 charge?: (string | Schemas.charge)
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string>
 /**
  * @description Payment intent that is being refunded.
  */
 payment_intent?: (string | Schemas.payment_intent)
 /**
  * @description The reason for the refund.
  */
 reason?: ('duplicate' | 'fraudulent' | 'requested_by_customer')
 /**
  * @description Unique identifier for the refund object.
  */
 refund?: (string | Schemas.refund)
 /**
  * @description Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.
  */
 refund_application_fee?: boolean
 /**
  * @title TerminalReaderReaderResourceRefundPaymentConfig
  * @description Represents a per-transaction override of a reader configuration
  */
 refund_payment_config?: Schemas.terminal_reader_reader_resource_refund_payment_config
 /**
  * @description Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount). A transfer can be reversed only by the application that created the charge.
  */
 reverse_transfer?: boolean
}

/**
 * @title TerminalReaderReaderResourceRefundPaymentConfig
 * @description Represents a per-transaction override of a reader configuration
 */
export type terminal_reader_reader_resource_refund_payment_config = {
 /**
  * @description Enable customer-initiated cancellation when refunding this payment.
  */
 enable_customer_cancellation?: boolean
}

/**
 * @title TerminalReaderReaderResourceSelection
 * @description Information about a selection being collected using a reader
 */
export type terminal_reader_reader_resource_selection = {
 /**
  * @description List of possible choices to be selected
  */
 choices: Schemas.terminal_reader_reader_resource_choice[]
 /**
  * @description The id of the selected choice
  */
 id?: string | null
 /**
  * @description The text of the selected choice
  */
 text?: string | null
}

/**
 * @title TerminalReaderReaderResourceSetReaderDisplayAction
 * @description Represents a reader action to set the reader display
 */
export type terminal_reader_reader_resource_set_reader_display_action = {
 /**
  * @description Cart object to be displayed by the reader.
  */
 cart?: Schemas.terminal_reader_reader_resource_cart | null
 /**
  * @description Type of information to be displayed by the reader.
  */
 type: 'cart'
}

/**
 * @title TerminalReaderReaderResourceSignature
 * @description Information about a signature being collected using a reader
 */
export type terminal_reader_reader_resource_signature = {
 /**
  * @description The File ID of a collected signature image
  */
 value?: string | null
}

/**
 * @title TerminalReaderReaderResourceText
 * @description Information about text being collected using a reader
 */
export type terminal_reader_reader_resource_text = {
 /**
  * @description The collected text value
  */
 value?: string | null
}

/**
 * @title TerminalReaderReaderResourceTippingConfig
 * @description Represents a per-transaction tipping configuration
 */
export type terminal_reader_reader_resource_tipping_config = {
 /**
  * @description Amount used to calculate tip suggestions on tipping selection screen for this transaction. Must be a positive integer in the smallest currency unit (e.g., 100 cents to represent $1.00 or 100 to represent ¥100, a zero-decimal currency).
  */
 amount_eligible?: number
}

/**
 * @title TerminalReaderReaderResourceToggle
 * @description Information about an input's toggle
 */
export type terminal_reader_reader_resource_toggle = {
 /**
  * @description The toggle's default value
  */
 default_value?: ('disabled' | 'enabled') | null
 /**
  * @description The toggle's description text
  */
 description?: string | null
 /**
  * @description The toggle's title text
  */
 title?: string | null
 /**
  * @description The toggle's collected value
  */
 value?: ('disabled' | 'enabled') | null
}

/**
 * @title TestClock
 * @description A test clock enables deterministic control over objects in testmode. With a test clock, you can create
 * objects at a frozen time in the past or future, and advance to a specific future time to observe webhooks and state changes. After the clock advances,
 * you can either validate the current state of your scenario (and test your assumptions), change the current state of your scenario (and test more complex scenarios), or keep advancing forward in time.
 */
export type test_helperstest_clock = {
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Time at which this clock is scheduled to auto delete.
  */
 deletes_after: number
 /**
  * @description Time at which all objects belonging to this clock are frozen.
  */
 frozen_time: number
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description The custom name supplied at creation.
  */
 name?: string | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'test_helpers.test_clock'
 /**
  * @description The status of the Test Clock.
  */
 status: ('advancing' | 'internal_failure' | 'ready')
 /**
  * @title BillingClocksResourceStatusDetailsStatusDetails
  */
 status_details: Schemas.billing_clocks_resource_status_details_status_details
}

/**
 * @title three_d_secure_details
 */
export type three_d_secure_details = {
 /**
  * @description For authenticated transactions: how the customer was authenticated by
  * the issuing bank.
  */
 authentication_flow?: ('challenge' | 'frictionless') | null
 /**
  * @description The Electronic Commerce Indicator (ECI). A protocol-level field
  * indicating what degree of authentication was performed.
  */
 electronic_commerce_indicator?: ('01' | '02' | '05' | '06' | '07') | null
 /**
  * @description Indicates the outcome of 3D Secure authentication.
  */
 result?: ('attempt_acknowledged' | 'authenticated' | 'exempted' | 'failed' | 'not_supported' | 'processing_error') | null
 /**
  * @description Additional information about why 3D Secure succeeded or failed based
  * on the `result`.
  */
 result_reason?: ('abandoned' | 'bypassed' | 'canceled' | 'card_not_enrolled' | 'network_not_supported' | 'protocol_error' | 'rejected') | null
 /**
  * @description The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID
  * (dsTransId) for this payment.
  */
 transaction_id?: string | null
 /**
  * @description The version of 3D Secure that was used.
  */
 version?: ('1.0.2' | '2.1.0' | '2.2.0') | null
}

/**
 * @title three_d_secure_details_charge
 */
export type three_d_secure_details_charge = {
 /**
  * @description For authenticated transactions: how the customer was authenticated by
  * the issuing bank.
  */
 authentication_flow?: ('challenge' | 'frictionless') | null
 /**
  * @description The Electronic Commerce Indicator (ECI). A protocol-level field
  * indicating what degree of authentication was performed.
  */
 electronic_commerce_indicator?: ('01' | '02' | '05' | '06' | '07') | null
 /**
  * @description The exemption requested via 3DS and accepted by the issuer at authentication time.
  */
 exemption_indicator?: ('low_risk' | 'none') | null
 /**
  * @description Whether Stripe requested the value of `exemption_indicator` in the transaction. This will depend on
  * the outcome of Stripe's internal risk assessment.
  */
 exemption_indicator_applied?: boolean
 /**
  * @description Indicates the outcome of 3D Secure authentication.
  */
 result?: ('attempt_acknowledged' | 'authenticated' | 'exempted' | 'failed' | 'not_supported' | 'processing_error') | null
 /**
  * @description Additional information about why 3D Secure succeeded or failed based
  * on the `result`.
  */
 result_reason?: ('abandoned' | 'bypassed' | 'canceled' | 'card_not_enrolled' | 'network_not_supported' | 'protocol_error' | 'rejected') | null
 /**
  * @description The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID
  * (dsTransId) for this payment.
  */
 transaction_id?: string | null
 /**
  * @description The version of 3D Secure that was used.
  */
 version?: ('1.0.2' | '2.1.0' | '2.2.0') | null
}

/**
 * @title three_d_secure_usage
 */
export type three_d_secure_usage = {
 /**
  * @description Whether 3D Secure is supported on this card.
  */
 supported: boolean
}

/**
 * @title ThresholdsResourceUsageAlertFilter
 */
export type thresholds_resource_usage_alert_filter = {
 /**
  * @description Limit the scope of the alert to this customer ID
  */
 customer?: (string | Schemas.customer) | null
 type: 'customer'
}

/**
 * @title ThresholdsResourceUsageThresholdConfig
 * @description The usage threshold alert configuration enables setting up alerts for when a certain usage threshold on a specific meter is crossed.
 */
export type thresholds_resource_usage_threshold_config = {
 /**
  * @description The filters allow limiting the scope of this usage alert. You can only specify up to one filter at this time.
  */
 filters?: Schemas.thresholds_resource_usage_alert_filter[] | null
 /**
  * @description The value at which this alert will trigger.
  */
 gte: number
 /**
  * @description The [Billing Meter](/api/billing/meter) ID whose usage is monitored.
  */
 meter: (string | Schemas.billingmeter)
 /**
  * @description Defines how the alert will behave.
  */
 recurrence: 'one_time'
}

/**
 * @title Token
 * @description Tokenization is the process Stripe uses to collect sensitive card or bank
 * account details, or personally identifiable information (PII), directly from
 * your customers in a secure manner. A token representing this information is
 * returned to your server to use. Use our
 * [recommended payments integrations](https://stripe.com/docs/payments) to perform this process
 * on the client-side. This guarantees that no sensitive card data touches your server,
 * and allows your integration to operate in a PCI-compliant way.
 * 
 * If you can't use client-side tokenization, you can also create tokens using
 * the API with either your publishable or secret API key. If
 * your integration uses this method, you're responsible for any PCI compliance
 * that it might require, and you must keep your secret API key safe. Unlike with
 * client-side tokenization, your customer's information isn't sent directly to
 * Stripe, so we can't determine how it's handled or stored.
 * 
 * You can't store or use tokens more than once. To store card or bank account
 * information for later use, create [Customer](https://stripe.com/docs/api#customers)
 * objects or [External accounts](/api#external_accounts).
 * [Radar](https://stripe.com/docs/radar), our integrated solution for automatic fraud protection,
 * performs best with integrations that use client-side tokenization.
 */
export type token = {
 /**
  * @title BankAccount
  * @description These bank accounts are payment methods on `Customer` objects.
  * 
  * On the other hand [External Accounts](/api#external_accounts) are transfer
  * destinations on `Account` objects for connected accounts.
  * They can be bank accounts or debit cards as well, and are documented in the links above.
  * 
  * Related guide: [Bank debits and transfers](/payments/bank-debits-transfers)
  */
 bank_account?: Schemas.bank_account
 /**
  * @title Card
  * @description You can store multiple cards on a customer in order to charge the customer
  * later. You can also store multiple debit cards on a recipient in order to
  * transfer to those cards later.
  * 
  * Related guide: [Card payments with Sources](https://stripe.com/docs/sources/cards)
  */
 card?: Schemas.card
 /**
  * @description IP address of the client that generates the token.
  */
 client_ip?: string | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'token'
 /**
  * @description Type of the token: `account`, `bank_account`, `card`, or `pii`.
  */
 type: string
 /**
  * @description Determines if you have already used this token (you can only use tokens once).
  */
 used: boolean
}

/**
 * @title token_card_networks
 */
export type token_card_networks = {
 /**
  * @description The preferred network for co-branded cards. Can be `cartes_bancaires`, `mastercard`, `visa` or `invalid_preference` if requested network is not valid for the card.
  */
 preferred?: string | null
}

/**
 * @title Topup
 * @description To top up your Stripe balance, you create a top-up object. You can retrieve
 * individual top-ups, as well as list all top-ups. Top-ups are identified by a
 * unique, random ID.
 * 
 * Related guide: [Topping up your platform account](https://stripe.com/docs/connect/top-ups)
 */
export type topup = {
 /**
  * @description Amount transferred.
  */
 amount: number
 /**
  * @description ID of the balance transaction that describes the impact of this top-up on your account balance. May not be specified depending on status of top-up.
  */
 balance_transaction?: (string | Schemas.balance_transaction) | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description?: string | null
 /**
  * @description Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up.
  */
 expected_availability_date?: number | null
 /**
  * @description Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).
  */
 failure_code?: string | null
 /**
  * @description Message to user further explaining reason for top-up failure if available.
  */
 failure_message?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'topup'
 /**
  * @description The source field is deprecated. It might not always be present in the API response.
  */
 source?: Schemas.source | null
 /**
  * @description Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter.
  */
 statement_descriptor?: string | null
 /**
  * @description The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.
  */
 status: ('canceled' | 'failed' | 'pending' | 'reversed' | 'succeeded')
 /**
  * @description A string that identifies this top-up as part of a group.
  */
 transfer_group?: string | null
}

/**
 * @title Transfer
 * @description A `Transfer` object is created when you move funds between Stripe accounts as
 * part of Connect.
 * 
 * Before April 6, 2017, transfers also represented movement of funds from a
 * Stripe account to a card or bank account. This behavior has since been split
 * out into a [Payout](https://stripe.com/docs/api#payout_object) object, with corresponding payout endpoints. For more
 * information, read about the
 * [transfer/payout split](https://stripe.com/docs/transfer-payout-split).
 * 
 * Related guide: [Creating separate charges and transfers](https://stripe.com/docs/connect/separate-charges-and-transfers)
 */
export type transfer = {
 /**
  * @description Amount in cents (or local equivalent) to be transferred.
  */
 amount: number
 /**
  * @description Amount in cents (or local equivalent) reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).
  */
 amount_reversed: number
 /**
  * @description Balance transaction that describes the impact of this transfer on your account balance.
  */
 balance_transaction?: (string | Schemas.balance_transaction) | null
 /**
  * @description Time that this record of the transfer was first created.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description?: string | null
 /**
  * @description ID of the Stripe account the transfer was sent to.
  */
 destination?: (string | Schemas.account) | null
 /**
  * @description If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer.
  */
 destination_payment?: (string | Schemas.charge)
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'transfer'
 /**
  * @title TransferReversalList
  * @description A list of reversals that have been applied to the transfer.
  */
 reversals: {
  /**
   * @description Details about each object.
   */
  data: Schemas.transfer_reversal[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 }
 /**
  * @description Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.
  */
 reversed: boolean
 /**
  * @description ID of the charge that was used to fund the transfer. If null, the transfer was funded from the available balance.
  */
 source_transaction?: (string | Schemas.charge) | null
 /**
  * @description The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`.
  */
 source_type?: string
 /**
  * @description A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.
  */
 transfer_group?: string | null
}

/**
 * @title transfer_data
 */
export type transfer_data = {
 /**
  * @description The amount transferred to the destination account. This transfer will occur automatically after the payment succeeds. If no amount is specified, by default the entire payment amount is transferred to the destination account.
  *  The amount must be less than or equal to the [amount](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount), and must be a positive integer
  *  representing how much to transfer in the smallest currency unit (e.g., 100 cents to charge $1.00).
  */
 amount?: number
 /**
  * @description The account (if any) that the payment is attributed to for tax reporting, and where funds from the payment are transferred to after payment success.
  */
 destination: (string | Schemas.account)
}

/**
 * @title TransferReversal
 * @description [Stripe Connect](https://stripe.com/docs/connect) platforms can reverse transfers made to a
 * connected account, either entirely or partially, and can also specify whether
 * to refund any related application fees. Transfer reversals add to the
 * platform's balance and subtract from the destination account's balance.
 * 
 * Reversing a transfer that was made for a [destination
 * charge](/docs/connect/destination-charges) is allowed only up to the amount of
 * the charge. It is possible to reverse a
 * [transfer_group](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options)
 * transfer only if the destination account has enough balance to cover the
 * reversal.
 * 
 * Related guide: [Reverse transfers](https://stripe.com/docs/connect/separate-charges-and-transfers#reverse-transfers)
 */
export type transfer_reversal = {
 /**
  * @description Amount, in cents (or local equivalent).
  */
 amount: number
 /**
  * @description Balance transaction that describes the impact on your account balance.
  */
 balance_transaction?: (string | Schemas.balance_transaction) | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description Linked payment refund for the transfer reversal.
  */
 destination_payment_refund?: (string | Schemas.refund) | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'transfer_reversal'
 /**
  * @description ID of the refund responsible for the transfer reversal.
  */
 source_refund?: (string | Schemas.refund) | null
 /**
  * @description ID of the transfer that was reversed.
  */
 transfer: (string | Schemas.transfer)
}

/**
 * @title TransferSchedule
 */
export type transfer_schedule = {
 /**
  * @description The number of days charges for the account will be held before being paid out.
  */
 delay_days: number
 /**
  * @description How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`.
  */
 interval: string
 /**
  * @description The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months.
  */
 monthly_anchor?: number
 /**
  * @description The days of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months.
  */
 monthly_payout_days?: number[]
 /**
  * @description The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly.
  */
 weekly_anchor?: string
 /**
  * @description The days of the week when available funds are paid out, specified as an array, for example, [`monday`, `tuesday`]. Only shown if `interval` is weekly.
  */
 weekly_payout_days?: ('friday' | 'monday' | 'saturday' | 'sunday' | 'thursday' | 'tuesday' | 'wednesday')[]
}

/**
 * @title TransformQuantity
 */
export type transform_quantity = {
 /**
  * @description Divide usage by this number.
  */
 divide_by: number
 /**
  * @description After division, either round the result `up` or `down`.
  */
 round: ('down' | 'up')
}

/**
 * @title TransformUsage
 */
export type transform_usage = {
 /**
  * @description Divide usage by this number.
  */
 divide_by: number
 /**
  * @description After division, either round the result `up` or `down`.
  */
 round: ('down' | 'up')
}

/**
 * @title TreasuryReceivedCreditsResourceCreditReversal
 * @description You can reverse some [ReceivedCredits](https://stripe.com/docs/api#received_credits) depending on their network and source flow. Reversing a ReceivedCredit leads to the creation of a new object known as a CreditReversal.
 */
export type treasurycredit_reversal = {
 /**
  * @description Amount (in cents) transferred.
  */
 amount: number
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description The FinancialAccount to reverse funds from.
  */
 financial_account: string
 /**
  * @description A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
  */
 hosted_regulatory_receipt_url?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description The rails used to reverse the funds.
  */
 network: ('ach' | 'stripe')
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'treasury.credit_reversal'
 /**
  * @description The ReceivedCredit being reversed.
  */
 received_credit: string
 /**
  * @description Status of the CreditReversal
  */
 status: ('canceled' | 'posted' | 'processing')
 /**
  * @title TreasuryReceivedCreditsResourceStatusTransitions
  */
 status_transitions: Schemas.treasury_received_credits_resource_status_transitions
 /**
  * @description The Transaction associated with this object.
  */
 transaction?: (string | Schemas.treasurytransaction) | null
}

/**
 * @title TreasuryReceivedDebitsResourceDebitReversal
 * @description You can reverse some [ReceivedDebits](https://stripe.com/docs/api#received_debits) depending on their network and source flow. Reversing a ReceivedDebit leads to the creation of a new object known as a DebitReversal.
 */
export type treasurydebit_reversal = {
 /**
  * @description Amount (in cents) transferred.
  */
 amount: number
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description The FinancialAccount to reverse funds from.
  */
 financial_account?: string | null
 /**
  * @description A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
  */
 hosted_regulatory_receipt_url?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Other flows linked to a DebitReversal.
  */
 linked_flows?: Schemas.treasury_received_debits_resource_debit_reversal_linked_flows | null
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description The rails used to reverse the funds.
  */
 network: ('ach' | 'card')
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'treasury.debit_reversal'
 /**
  * @description The ReceivedDebit being reversed.
  */
 received_debit: string
 /**
  * @description Status of the DebitReversal
  */
 status: ('failed' | 'processing' | 'succeeded')
 /**
  * @title TreasuryReceivedDebitsResourceStatusTransitions
  */
 status_transitions: Schemas.treasury_received_debits_resource_status_transitions
 /**
  * @description The Transaction associated with this object.
  */
 transaction?: (string | Schemas.treasurytransaction) | null
}

/**
 * @title TreasuryFinancialAccountsResourceFinancialAccount
 * @description Stripe Treasury provides users with a container for money called a FinancialAccount that is separate from their Payments balance.
 * FinancialAccounts serve as the source and destination of Treasury’s money movement APIs.
 */
export type treasuryfinancial_account = {
 /**
  * @description The array of paths to active Features in the Features hash.
  */
 active_features?: ('card_issuing' | 'deposit_insurance' | 'financial_addresses.aba' | 'financial_addresses.aba.forwarding' | 'inbound_transfers.ach' | 'intra_stripe_flows' | 'outbound_payments.ach' | 'outbound_payments.us_domestic_wire' | 'outbound_transfers.ach' | 'outbound_transfers.us_domestic_wire' | 'remote_deposit_capture')[]
 /**
  * @title TreasuryFinancialAccountsResourceBalance
  * @description Balance information for the FinancialAccount
  */
 balance: Schemas.treasury_financial_accounts_resource_balance
 /**
  * @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  */
 country: string
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @title TreasuryFinancialAccountsResourceFinancialAccountFeatures
  * @description Encodes whether a FinancialAccount has access to a particular Feature, with a `status` enum and associated `status_details`.
  * Stripe or the platform can control Features via the requested field.
  */
 features?: Schemas.treasuryfinancial_account_features
 /**
  * @description The set of credentials that resolve to a FinancialAccount.
  */
 financial_addresses: Schemas.treasury_financial_accounts_resource_financial_address[]
 /**
  * @description Unique identifier for the object.
  */
 id: string
 is_default?: boolean
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata?: Record<string, string> | null
 /**
  * @description The nickname for the FinancialAccount.
  */
 nickname?: string | null
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'treasury.financial_account'
 /**
  * @description The array of paths to pending Features in the Features hash.
  */
 pending_features?: ('card_issuing' | 'deposit_insurance' | 'financial_addresses.aba' | 'financial_addresses.aba.forwarding' | 'inbound_transfers.ach' | 'intra_stripe_flows' | 'outbound_payments.ach' | 'outbound_payments.us_domestic_wire' | 'outbound_transfers.ach' | 'outbound_transfers.us_domestic_wire' | 'remote_deposit_capture')[]
 /**
  * @description The set of functionalities that the platform can restrict on the FinancialAccount.
  */
 platform_restrictions?: Schemas.treasury_financial_accounts_resource_platform_restrictions | null
 /**
  * @description The array of paths to restricted Features in the Features hash.
  */
 restricted_features?: ('card_issuing' | 'deposit_insurance' | 'financial_addresses.aba' | 'financial_addresses.aba.forwarding' | 'inbound_transfers.ach' | 'intra_stripe_flows' | 'outbound_payments.ach' | 'outbound_payments.us_domestic_wire' | 'outbound_transfers.ach' | 'outbound_transfers.us_domestic_wire' | 'remote_deposit_capture')[]
 /**
  * @description Status of this FinancialAccount.
  */
 status: ('closed' | 'open')
 /**
  * @title TreasuryFinancialAccountsResourceStatusDetails
  */
 status_details: Schemas.treasury_financial_accounts_resource_status_details
 /**
  * @description The currencies the FinancialAccount can hold a balance in. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
  */
 supported_currencies: string[]
}

/**
 * @title TreasuryFinancialAccountsResourceFinancialAccountFeatures
 * @description Encodes whether a FinancialAccount has access to a particular Feature, with a `status` enum and associated `status_details`.
 * Stripe or the platform can control Features via the requested field.
 */
export type treasuryfinancial_account_features = {
 /**
  * @title TreasuryFinancialAccountsResourceToggleSettings
  * @description Toggle settings for enabling/disabling a feature
  */
 card_issuing?: Schemas.treasury_financial_accounts_resource_toggle_settings
 /**
  * @title TreasuryFinancialAccountsResourceToggleSettings
  * @description Toggle settings for enabling/disabling a feature
  */
 deposit_insurance?: Schemas.treasury_financial_accounts_resource_toggle_settings
 /**
  * @title TreasuryFinancialAccountsResourceFinancialAddressesFeatures
  * @description Settings related to Financial Addresses features on a Financial Account
  */
 financial_addresses?: Schemas.treasury_financial_accounts_resource_financial_addresses_features
 /**
  * @title TreasuryFinancialAccountsResourceInboundTransfers
  * @description InboundTransfers contains inbound transfers features for a FinancialAccount.
  */
 inbound_transfers?: Schemas.treasury_financial_accounts_resource_inbound_transfers
 /**
  * @title TreasuryFinancialAccountsResourceToggleSettings
  * @description Toggle settings for enabling/disabling a feature
  */
 intra_stripe_flows?: Schemas.treasury_financial_accounts_resource_toggle_settings
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'treasury.financial_account_features'
 /**
  * @title TreasuryFinancialAccountsResourceOutboundPayments
  * @description Settings related to Outbound Payments features on a Financial Account
  */
 outbound_payments?: Schemas.treasury_financial_accounts_resource_outbound_payments
 /**
  * @title TreasuryFinancialAccountsResourceOutboundTransfers
  * @description OutboundTransfers contains outbound transfers features for a FinancialAccount.
  */
 outbound_transfers?: Schemas.treasury_financial_accounts_resource_outbound_transfers
}

/**
 * @title TreasuryInboundTransfersResourceInboundTransfer
 * @description Use [InboundTransfers](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/into/inbound-transfers) to add funds to your [FinancialAccount](https://stripe.com/docs/api#financial_accounts) via a PaymentMethod that is owned by you. The funds will be transferred via an ACH debit.
 * 
 * Related guide: [Moving money with Treasury using InboundTransfer objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/into/inbound-transfers)
 */
export type treasuryinbound_transfer = {
 /**
  * @description Amount (in cents) transferred.
  */
 amount: number
 /**
  * @description Returns `true` if the InboundTransfer is able to be canceled.
  */
 cancelable: boolean
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description?: string | null
 /**
  * @description Details about this InboundTransfer's failure. Only set when status is `failed`.
  */
 failure_details?: Schemas.treasury_inbound_transfers_resource_failure_details | null
 /**
  * @description The FinancialAccount that received the funds.
  */
 financial_account: string
 /**
  * @description A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
  */
 hosted_regulatory_receipt_url?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @title TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows
  */
 linked_flows: Schemas.treasury_inbound_transfers_resource_inbound_transfer_resource_linked_flows
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'treasury.inbound_transfer'
 /**
  * @description The origin payment method to be debited for an InboundTransfer.
  */
 origin_payment_method?: string | null
 /**
  * @description Details about the PaymentMethod for an InboundTransfer.
  */
 origin_payment_method_details?: Schemas.inbound_transfers | null
 /**
  * @description Returns `true` if the funds for an InboundTransfer were returned after the InboundTransfer went to the `succeeded` state.
  */
 returned?: boolean | null
 /**
  * @description Statement descriptor shown when funds are debited from the source. Not all payment networks support `statement_descriptor`.
  */
 statement_descriptor: string
 /**
  * @description Status of the InboundTransfer: `processing`, `succeeded`, `failed`, and `canceled`. An InboundTransfer is `processing` if it is created and pending. The status changes to `succeeded` once the funds have been "confirmed" and a `transaction` is created and posted. The status changes to `failed` if the transfer fails.
  */
 status: ('canceled' | 'failed' | 'processing' | 'succeeded')
 /**
  * @title TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions
  */
 status_transitions: Schemas.treasury_inbound_transfers_resource_inbound_transfer_resource_status_transitions
 /**
  * @description The Transaction associated with this object.
  */
 transaction?: (string | Schemas.treasurytransaction) | null
}

/**
 * @title TreasuryOutboundPaymentsResourceOutboundPayment
 * @description Use [OutboundPayments](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-payments) to send funds to another party's external bank account or [FinancialAccount](https://stripe.com/docs/api#financial_accounts). To send money to an account belonging to the same user, use an [OutboundTransfer](https://stripe.com/docs/api#outbound_transfers).
 * 
 * Simulate OutboundPayment state changes with the `/v1/test_helpers/treasury/outbound_payments` endpoints. These methods can only be called on test mode objects.
 * 
 * Related guide: [Moving money with Treasury using OutboundPayment objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-payments)
 */
export type treasuryoutbound_payment = {
 /**
  * @description Amount (in cents) transferred.
  */
 amount: number
 /**
  * @description Returns `true` if the object can be canceled, and `false` otherwise.
  */
 cancelable: boolean
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description ID of the [customer](https://stripe.com/docs/api/customers) to whom an OutboundPayment is sent.
  */
 customer?: string | null
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description?: string | null
 /**
  * @description The PaymentMethod via which an OutboundPayment is sent. This field can be empty if the OutboundPayment was created using `destination_payment_method_data`.
  */
 destination_payment_method?: string | null
 /**
  * @description Details about the PaymentMethod for an OutboundPayment.
  */
 destination_payment_method_details?: Schemas.outbound_payments_payment_method_details | null
 /**
  * @description Details about the end user.
  */
 end_user_details?: Schemas.treasury_outbound_payments_resource_outbound_payment_resource_end_user_details | null
 /**
  * @description The date when funds are expected to arrive in the destination account.
  */
 expected_arrival_date: number
 /**
  * @description The FinancialAccount that funds were pulled from.
  */
 financial_account: string
 /**
  * @description A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
  */
 hosted_regulatory_receipt_url?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'treasury.outbound_payment'
 /**
  * @description Details about a returned OutboundPayment. Only set when the status is `returned`.
  */
 returned_details?: Schemas.treasury_outbound_payments_resource_returned_status | null
 /**
  * @description The description that appears on the receiving end for an OutboundPayment (for example, bank statement for external bank transfer).
  */
 statement_descriptor: string
 /**
  * @description Current status of the OutboundPayment: `processing`, `failed`, `posted`, `returned`, `canceled`. An OutboundPayment is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundPayment has been "confirmed" and funds have left the account, or to `failed` or `canceled`. If an OutboundPayment fails to arrive at its destination, its status will change to `returned`.
  */
 status: ('canceled' | 'failed' | 'posted' | 'processing' | 'returned')
 /**
  * @title TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions
  */
 status_transitions: Schemas.treasury_outbound_payments_resource_outbound_payment_resource_status_transitions
 /**
  * @description Details about network-specific tracking information if available.
  */
 tracking_details?: Schemas.treasury_outbound_payments_resource_outbound_payment_resource_tracking_details | null
 /**
  * @description The Transaction associated with this object.
  */
 transaction: (string | Schemas.treasurytransaction)
}

/**
 * @title TreasuryOutboundTransfersResourceOutboundTransfer
 * @description Use [OutboundTransfers](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-transfers) to transfer funds from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) to a PaymentMethod belonging to the same entity. To send funds to a different party, use [OutboundPayments](https://stripe.com/docs/api#outbound_payments) instead. You can send funds over ACH rails or through a domestic wire transfer to a user's own external bank account.
 * 
 * Simulate OutboundTransfer state changes with the `/v1/test_helpers/treasury/outbound_transfers` endpoints. These methods can only be called on test mode objects.
 * 
 * Related guide: [Moving money with Treasury using OutboundTransfer objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-transfers)
 */
export type treasuryoutbound_transfer = {
 /**
  * @description Amount (in cents) transferred.
  */
 amount: number
 /**
  * @description Returns `true` if the object can be canceled, and `false` otherwise.
  */
 cancelable: boolean
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description?: string | null
 /**
  * @description The PaymentMethod used as the payment instrument for an OutboundTransfer.
  */
 destination_payment_method?: string | null
 /**
  * @title OutboundTransfersPaymentMethodDetails
  */
 destination_payment_method_details: Schemas.outbound_transfers_payment_method_details
 /**
  * @description The date when funds are expected to arrive in the destination account.
  */
 expected_arrival_date: number
 /**
  * @description The FinancialAccount that funds were pulled from.
  */
 financial_account: string
 /**
  * @description A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
  */
 hosted_regulatory_receipt_url?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'treasury.outbound_transfer'
 /**
  * @description Details about a returned OutboundTransfer. Only set when the status is `returned`.
  */
 returned_details?: Schemas.treasury_outbound_transfers_resource_returned_details | null
 /**
  * @description Information about the OutboundTransfer to be sent to the recipient account.
  */
 statement_descriptor: string
 /**
  * @description Current status of the OutboundTransfer: `processing`, `failed`, `canceled`, `posted`, `returned`. An OutboundTransfer is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundTransfer has been "confirmed" and funds have left the account, or to `failed` or `canceled`. If an OutboundTransfer fails to arrive at its destination, its status will change to `returned`.
  */
 status: ('canceled' | 'failed' | 'posted' | 'processing' | 'returned')
 /**
  * @title TreasuryOutboundTransfersResourceStatusTransitions
  */
 status_transitions: Schemas.treasury_outbound_transfers_resource_status_transitions
 /**
  * @description Details about network-specific tracking information if available.
  */
 tracking_details?: Schemas.treasury_outbound_transfers_resource_outbound_transfer_resource_tracking_details | null
 /**
  * @description The Transaction associated with this object.
  */
 transaction: (string | Schemas.treasurytransaction)
}

/**
 * @title TreasuryReceivedCreditsResourceReceivedCredit
 * @description ReceivedCredits represent funds sent to a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) (for example, via ACH or wire). These money movements are not initiated from the FinancialAccount.
 */
export type treasuryreceived_credit = {
 /**
  * @description Amount (in cents) transferred.
  */
 amount: number
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description: string
 /**
  * @description Reason for the failure. A ReceivedCredit might fail because the receiving FinancialAccount is closed or frozen.
  */
 failure_code?: ('account_closed' | 'account_frozen' | 'international_transaction' | 'other') | null
 /**
  * @description The FinancialAccount that received the funds.
  */
 financial_account?: string | null
 /**
  * @description A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
  */
 hosted_regulatory_receipt_url?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @title TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails
  */
 initiating_payment_method_details: Schemas.treasury_shared_resource_initiating_payment_method_details_initiating_payment_method_details
 /**
  * @title TreasuryReceivedCreditsResourceLinkedFlows
  */
 linked_flows: Schemas.treasury_received_credits_resource_linked_flows
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description The rails used to send the funds.
  */
 network: ('ach' | 'card' | 'stripe' | 'us_domestic_wire')
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'treasury.received_credit'
 /**
  * @description Details describing when a ReceivedCredit may be reversed.
  */
 reversal_details?: Schemas.treasury_received_credits_resource_reversal_details | null
 /**
  * @description Status of the ReceivedCredit. ReceivedCredits are created either `succeeded` (approved) or `failed` (declined). If a ReceivedCredit is declined, the failure reason can be found in the `failure_code` field.
  */
 status: ('failed' | 'succeeded')
 /**
  * @description The Transaction associated with this object.
  */
 transaction?: (string | Schemas.treasurytransaction) | null
}

/**
 * @title TreasuryReceivedDebitsResourceReceivedDebit
 * @description ReceivedDebits represent funds pulled from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts). These are not initiated from the FinancialAccount.
 */
export type treasuryreceived_debit = {
 /**
  * @description Amount (in cents) transferred.
  */
 amount: number
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description: string
 /**
  * @description Reason for the failure. A ReceivedDebit might fail because the FinancialAccount doesn't have sufficient funds, is closed, or is frozen.
  */
 failure_code?: ('account_closed' | 'account_frozen' | 'insufficient_funds' | 'international_transaction' | 'other') | null
 /**
  * @description The FinancialAccount that funds were pulled from.
  */
 financial_account?: string | null
 /**
  * @description A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
  */
 hosted_regulatory_receipt_url?: string | null
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @title TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails
  */
 initiating_payment_method_details?: Schemas.treasury_shared_resource_initiating_payment_method_details_initiating_payment_method_details
 /**
  * @title TreasuryReceivedDebitsResourceLinkedFlows
  */
 linked_flows: Schemas.treasury_received_debits_resource_linked_flows
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description The network used for the ReceivedDebit.
  */
 network: ('ach' | 'card' | 'stripe')
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'treasury.received_debit'
 /**
  * @description Details describing when a ReceivedDebit might be reversed.
  */
 reversal_details?: Schemas.treasury_received_debits_resource_reversal_details | null
 /**
  * @description Status of the ReceivedDebit. ReceivedDebits are created with a status of either `succeeded` (approved) or `failed` (declined). The failure reason can be found under the `failure_code`.
  */
 status: ('failed' | 'succeeded')
 /**
  * @description The Transaction associated with this object.
  */
 transaction?: (string | Schemas.treasurytransaction) | null
}

/**
 * @title TreasuryTransactionsResourceTransaction
 * @description Transactions represent changes to a [FinancialAccount's](https://stripe.com/docs/api#financial_accounts) balance.
 */
export type treasurytransaction = {
 /**
  * @description Amount (in cents) transferred.
  */
 amount: number
 /**
  * @title TreasuryTransactionsResourceBalanceImpact
  * @description Change to a FinancialAccount's balance
  */
 balance_impact: Schemas.treasury_transactions_resource_balance_impact
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description An arbitrary string attached to the object. Often useful for displaying to users.
  */
 description: string
 /**
  * @title TreasuryTransactionsResourceTransactionEntryList
  * @description A list of TransactionEntries that are part of this Transaction. This cannot be expanded in any list endpoints.
  */
 entries?: {
  /**
   * @description Details about each object.
   */
  data: Schemas.treasurytransaction_entry[]
  /**
   * @description True if this list has another page of items after this one that can be fetched.
   */
  has_more: boolean
  /**
   * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
   */
  object: 'list'
  /**
   * @description The URL where this list can be accessed.
   */
  url: string
 } | null
 /**
  * @description The FinancialAccount associated with this object.
  */
 financial_account: string
 /**
  * @description ID of the flow that created the Transaction.
  */
 flow?: string | null
 /**
  * @description Details of the flow that created the Transaction.
  */
 flow_details?: Schemas.treasury_transactions_resource_flow_details | null
 /**
  * @description Type of the flow that created the Transaction.
  */
 flow_type: ('credit_reversal' | 'debit_reversal' | 'inbound_transfer' | 'issuing_authorization' | 'other' | 'outbound_payment' | 'outbound_transfer' | 'received_credit' | 'received_debit')
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'treasury.transaction'
 /**
  * @description Status of the Transaction.
  */
 status: ('open' | 'posted' | 'void')
 /**
  * @title TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions
  */
 status_transitions: Schemas.treasury_transactions_resource_abstract_transaction_resource_status_transitions
}

/**
 * @title TreasuryTransactionsResourceTransactionEntry
 * @description TransactionEntries represent individual units of money movements within a single [Transaction](https://stripe.com/docs/api#transactions).
 */
export type treasurytransaction_entry = {
 /**
  * @title TreasuryTransactionsResourceBalanceImpact
  * @description Change to a FinancialAccount's balance
  */
 balance_impact: Schemas.treasury_transactions_resource_balance_impact
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  */
 currency: string
 /**
  * @description When the TransactionEntry will impact the FinancialAccount's balance.
  */
 effective_at: number
 /**
  * @description The FinancialAccount associated with this object.
  */
 financial_account: string
 /**
  * @description Token of the flow associated with the TransactionEntry.
  */
 flow?: string | null
 /**
  * @description Details of the flow associated with the TransactionEntry.
  */
 flow_details?: Schemas.treasury_transactions_resource_flow_details | null
 /**
  * @description Type of the flow associated with the TransactionEntry.
  */
 flow_type: ('credit_reversal' | 'debit_reversal' | 'inbound_transfer' | 'issuing_authorization' | 'other' | 'outbound_payment' | 'outbound_transfer' | 'received_credit' | 'received_debit')
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'treasury.transaction_entry'
 /**
  * @description The Transaction associated with this object.
  */
 transaction: (string | Schemas.treasurytransaction)
 /**
  * @description The specific money movement that generated the TransactionEntry.
  */
 type: ('credit_reversal' | 'credit_reversal_posting' | 'debit_reversal' | 'inbound_transfer' | 'inbound_transfer_return' | 'issuing_authorization_hold' | 'issuing_authorization_release' | 'other' | 'outbound_payment' | 'outbound_payment_cancellation' | 'outbound_payment_failure' | 'outbound_payment_posting' | 'outbound_payment_return' | 'outbound_transfer' | 'outbound_transfer_cancellation' | 'outbound_transfer_failure' | 'outbound_transfer_posting' | 'outbound_transfer_return' | 'received_credit' | 'received_debit')
}

/**
 * @title TreasuryFinancialAccountsResourceABARecord
 * @description ABA Records contain U.S. bank account details per the ABA format.
 */
export type treasury_financial_accounts_resource_aba_record = {
 /**
  * @description The name of the person or business that owns the bank account.
  */
 account_holder_name: string
 /**
  * @description The account number.
  */
 account_number?: string | null
 /**
  * @description The last four characters of the account number.
  */
 account_number_last4: string
 /**
  * @description Name of the bank.
  */
 bank_name: string
 /**
  * @description Routing number for the account.
  */
 routing_number: string
}

/**
 * @title TreasuryFinancialAccountsResourceAbaToggleSettings
 * @description Toggle settings for enabling/disabling the ABA address feature
 */
export type treasury_financial_accounts_resource_aba_toggle_settings = {
 /**
  * @description Whether the FinancialAccount should have the Feature.
  */
 requested: boolean
 /**
  * @description Whether the Feature is operational.
  */
 status: ('active' | 'pending' | 'restricted')
 /**
  * @description Additional details; includes at least one entry when the status is not `active`.
  */
 status_details: Schemas.treasury_financial_accounts_resource_toggles_setting_status_details[]
}

/**
 * @title TreasuryFinancialAccountsResourceBalance
 * @description Balance information for the FinancialAccount
 */
export type treasury_financial_accounts_resource_balance = {
 /**
  * @description Funds the user can spend right now.
  */
 cash: Record<string, number>
 /**
  * @description Funds not spendable yet, but will become available at a later time.
  */
 inbound_pending: Record<string, number>
 /**
  * @description Funds in the account, but not spendable because they are being held for pending outbound flows.
  */
 outbound_pending: Record<string, number>
}

/**
 * @title TreasuryFinancialAccountsResourceClosedStatusDetails
 */
export type treasury_financial_accounts_resource_closed_status_details = {
 /**
  * @description The array that contains reasons for a FinancialAccount closure.
  */
 reasons: ('account_rejected' | 'closed_by_platform' | 'other')[]
}

/**
 * @title TreasuryFinancialAccountsResourceFinancialAddress
 * @description FinancialAddresses contain identifying information that resolves to a FinancialAccount.
 */
export type treasury_financial_accounts_resource_financial_address = {
 /**
  * @title TreasuryFinancialAccountsResourceABARecord
  * @description ABA Records contain U.S. bank account details per the ABA format.
  */
 aba?: Schemas.treasury_financial_accounts_resource_aba_record
 /**
  * @description The list of networks that the address supports
  */
 supported_networks?: ('ach' | 'us_domestic_wire')[]
 /**
  * @description The type of financial address
  */
 type: 'aba'
}

/**
 * @title TreasuryFinancialAccountsResourceFinancialAddressesFeatures
 * @description Settings related to Financial Addresses features on a Financial Account
 */
export type treasury_financial_accounts_resource_financial_addresses_features = {
 /**
  * @title TreasuryFinancialAccountsResourceAbaToggleSettings
  * @description Toggle settings for enabling/disabling the ABA address feature
  */
 aba?: Schemas.treasury_financial_accounts_resource_aba_toggle_settings
}

/**
 * @title TreasuryFinancialAccountsResourceInboundAchToggleSettings
 * @description Toggle settings for enabling/disabling an inbound ACH specific feature
 */
export type treasury_financial_accounts_resource_inbound_ach_toggle_settings = {
 /**
  * @description Whether the FinancialAccount should have the Feature.
  */
 requested: boolean
 /**
  * @description Whether the Feature is operational.
  */
 status: ('active' | 'pending' | 'restricted')
 /**
  * @description Additional details; includes at least one entry when the status is not `active`.
  */
 status_details: Schemas.treasury_financial_accounts_resource_toggles_setting_status_details[]
}

/**
 * @title TreasuryFinancialAccountsResourceInboundTransfers
 * @description InboundTransfers contains inbound transfers features for a FinancialAccount.
 */
export type treasury_financial_accounts_resource_inbound_transfers = {
 /**
  * @title TreasuryFinancialAccountsResourceInboundAchToggleSettings
  * @description Toggle settings for enabling/disabling an inbound ACH specific feature
  */
 ach?: Schemas.treasury_financial_accounts_resource_inbound_ach_toggle_settings
}

/**
 * @title TreasuryFinancialAccountsResourceOutboundAchToggleSettings
 * @description Toggle settings for enabling/disabling an outbound ACH specific feature
 */
export type treasury_financial_accounts_resource_outbound_ach_toggle_settings = {
 /**
  * @description Whether the FinancialAccount should have the Feature.
  */
 requested: boolean
 /**
  * @description Whether the Feature is operational.
  */
 status: ('active' | 'pending' | 'restricted')
 /**
  * @description Additional details; includes at least one entry when the status is not `active`.
  */
 status_details: Schemas.treasury_financial_accounts_resource_toggles_setting_status_details[]
}

/**
 * @title TreasuryFinancialAccountsResourceOutboundPayments
 * @description Settings related to Outbound Payments features on a Financial Account
 */
export type treasury_financial_accounts_resource_outbound_payments = {
 /**
  * @title TreasuryFinancialAccountsResourceOutboundAchToggleSettings
  * @description Toggle settings for enabling/disabling an outbound ACH specific feature
  */
 ach?: Schemas.treasury_financial_accounts_resource_outbound_ach_toggle_settings
 /**
  * @title TreasuryFinancialAccountsResourceToggleSettings
  * @description Toggle settings for enabling/disabling a feature
  */
 us_domestic_wire?: Schemas.treasury_financial_accounts_resource_toggle_settings
}

/**
 * @title TreasuryFinancialAccountsResourceOutboundTransfers
 * @description OutboundTransfers contains outbound transfers features for a FinancialAccount.
 */
export type treasury_financial_accounts_resource_outbound_transfers = {
 /**
  * @title TreasuryFinancialAccountsResourceOutboundAchToggleSettings
  * @description Toggle settings for enabling/disabling an outbound ACH specific feature
  */
 ach?: Schemas.treasury_financial_accounts_resource_outbound_ach_toggle_settings
 /**
  * @title TreasuryFinancialAccountsResourceToggleSettings
  * @description Toggle settings for enabling/disabling a feature
  */
 us_domestic_wire?: Schemas.treasury_financial_accounts_resource_toggle_settings
}

/**
 * @title TreasuryFinancialAccountsResourcePlatformRestrictions
 * @description Restrictions that a Connect Platform has placed on this FinancialAccount.
 */
export type treasury_financial_accounts_resource_platform_restrictions = {
 /**
  * @description Restricts all inbound money movement.
  */
 inbound_flows?: ('restricted' | 'unrestricted') | null
 /**
  * @description Restricts all outbound money movement.
  */
 outbound_flows?: ('restricted' | 'unrestricted') | null
}

/**
 * @title TreasuryFinancialAccountsResourceStatusDetails
 */
export type treasury_financial_accounts_resource_status_details = {
 /**
  * @description Details related to the closure of this FinancialAccount
  */
 closed?: Schemas.treasury_financial_accounts_resource_closed_status_details | null
}

/**
 * @title TreasuryFinancialAccountsResourceToggleSettings
 * @description Toggle settings for enabling/disabling a feature
 */
export type treasury_financial_accounts_resource_toggle_settings = {
 /**
  * @description Whether the FinancialAccount should have the Feature.
  */
 requested: boolean
 /**
  * @description Whether the Feature is operational.
  */
 status: ('active' | 'pending' | 'restricted')
 /**
  * @description Additional details; includes at least one entry when the status is not `active`.
  */
 status_details: Schemas.treasury_financial_accounts_resource_toggles_setting_status_details[]
}

/**
 * @title TreasuryFinancialAccountsResourceTogglesSettingStatusDetails
 * @description Additional details on the FinancialAccount Features information.
 */
export type treasury_financial_accounts_resource_toggles_setting_status_details = {
 /**
  * @description Represents the reason why the status is `pending` or `restricted`.
  */
 code: ('activating' | 'capability_not_requested' | 'financial_account_closed' | 'rejected_other' | 'rejected_unsupported_business' | 'requirements_past_due' | 'requirements_pending_verification' | 'restricted_by_platform' | 'restricted_other')
 /**
  * @description Represents what the user should do, if anything, to activate the Feature.
  */
 resolution?: ('contact_stripe' | 'provide_information' | 'remove_restriction') | null
 /**
  * @description The `platform_restrictions` that are restricting this Feature.
  */
 restriction?: ('inbound_flows' | 'outbound_flows')
}

/**
 * @title TreasuryInboundTransfersResourceFailureDetails
 */
export type treasury_inbound_transfers_resource_failure_details = {
 /**
  * @description Reason for the failure.
  */
 code: ('account_closed' | 'account_frozen' | 'bank_account_restricted' | 'bank_ownership_changed' | 'debit_not_authorized' | 'incorrect_account_holder_address' | 'incorrect_account_holder_name' | 'incorrect_account_holder_tax_id' | 'insufficient_funds' | 'invalid_account_number' | 'invalid_currency' | 'no_account' | 'other')
}

/**
 * @title TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows
 */
export type treasury_inbound_transfers_resource_inbound_transfer_resource_linked_flows = {
 /**
  * @description If funds for this flow were returned after the flow went to the `succeeded` state, this field contains a reference to the ReceivedDebit return.
  */
 received_debit?: string | null
}

/**
 * @title TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions
 */
export type treasury_inbound_transfers_resource_inbound_transfer_resource_status_transitions = {
 /**
  * @description Timestamp describing when an InboundTransfer changed status to `canceled`.
  */
 canceled_at?: number | null
 /**
  * @description Timestamp describing when an InboundTransfer changed status to `failed`.
  */
 failed_at?: number | null
 /**
  * @description Timestamp describing when an InboundTransfer changed status to `succeeded`.
  */
 succeeded_at?: number | null
}

/**
 * @title TreasuryOutboundPaymentsResourceACHTrackingDetails
 */
export type treasury_outbound_payments_resource_ach_tracking_details = {
 /**
  * @description ACH trace ID of the OutboundPayment for payments sent over the `ach` network.
  */
 trace_id: string
}

/**
 * @title TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails
 */
export type treasury_outbound_payments_resource_outbound_payment_resource_end_user_details = {
 /**
  * @description IP address of the user initiating the OutboundPayment. Set if `present` is set to `true`. IP address collection is required for risk and compliance reasons. This will be used to help determine if the OutboundPayment is authorized or should be blocked.
  */
 ip_address?: string | null
 /**
  * @description `true` if the OutboundPayment creation request is being made on behalf of an end user by a platform. Otherwise, `false`.
  */
 present: boolean
}

/**
 * @title TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions
 */
export type treasury_outbound_payments_resource_outbound_payment_resource_status_transitions = {
 /**
  * @description Timestamp describing when an OutboundPayment changed status to `canceled`.
  */
 canceled_at?: number | null
 /**
  * @description Timestamp describing when an OutboundPayment changed status to `failed`.
  */
 failed_at?: number | null
 /**
  * @description Timestamp describing when an OutboundPayment changed status to `posted`.
  */
 posted_at?: number | null
 /**
  * @description Timestamp describing when an OutboundPayment changed status to `returned`.
  */
 returned_at?: number | null
}

/**
 * @title TreasuryOutboundPaymentsResourceOutboundPaymentResourceTrackingDetails
 */
export type treasury_outbound_payments_resource_outbound_payment_resource_tracking_details = {
 /**
  * @title TreasuryOutboundPaymentsResourceACHTrackingDetails
  */
 ach?: Schemas.treasury_outbound_payments_resource_ach_tracking_details
 /**
  * @description The US bank account network used to send funds.
  */
 type: ('ach' | 'us_domestic_wire')
 /**
  * @title TreasuryOutboundPaymentsResourceUSDomesticWireTrackingDetails
  */
 us_domestic_wire?: Schemas.treasury_outbound_payments_resource_us_domestic_wire_tracking_details
}

/**
 * @title TreasuryOutboundPaymentsResourceReturnedStatus
 */
export type treasury_outbound_payments_resource_returned_status = {
 /**
  * @description Reason for the return.
  */
 code: ('account_closed' | 'account_frozen' | 'bank_account_restricted' | 'bank_ownership_changed' | 'declined' | 'incorrect_account_holder_name' | 'invalid_account_number' | 'invalid_currency' | 'no_account' | 'other')
 /**
  * @description The Transaction associated with this object.
  */
 transaction: (string | Schemas.treasurytransaction)
}

/**
 * @title TreasuryOutboundPaymentsResourceUSDomesticWireTrackingDetails
 */
export type treasury_outbound_payments_resource_us_domestic_wire_tracking_details = {
 /**
  * @description CHIPS System Sequence Number (SSN) of the OutboundPayment for payments sent over the `us_domestic_wire` network.
  */
 chips?: string | null
 /**
  * @description IMAD of the OutboundPayment for payments sent over the `us_domestic_wire` network.
  */
 imad?: string | null
 /**
  * @description OMAD of the OutboundPayment for payments sent over the `us_domestic_wire` network.
  */
 omad?: string | null
}

/**
 * @title TreasuryOutboundTransfersResourceACHTrackingDetails
 */
export type treasury_outbound_transfers_resource_ach_tracking_details = {
 /**
  * @description ACH trace ID of the OutboundTransfer for transfers sent over the `ach` network.
  */
 trace_id: string
}

/**
 * @title TreasuryOutboundTransfersResourceOutboundTransferResourceTrackingDetails
 */
export type treasury_outbound_transfers_resource_outbound_transfer_resource_tracking_details = {
 /**
  * @title TreasuryOutboundTransfersResourceACHTrackingDetails
  */
 ach?: Schemas.treasury_outbound_transfers_resource_ach_tracking_details
 /**
  * @description The US bank account network used to send funds.
  */
 type: ('ach' | 'us_domestic_wire')
 /**
  * @title TreasuryOutboundTransfersResourceUSDomesticWireTrackingDetails
  */
 us_domestic_wire?: Schemas.treasury_outbound_transfers_resource_us_domestic_wire_tracking_details
}

/**
 * @title TreasuryOutboundTransfersResourceReturnedDetails
 */
export type treasury_outbound_transfers_resource_returned_details = {
 /**
  * @description Reason for the return.
  */
 code: ('account_closed' | 'account_frozen' | 'bank_account_restricted' | 'bank_ownership_changed' | 'declined' | 'incorrect_account_holder_name' | 'invalid_account_number' | 'invalid_currency' | 'no_account' | 'other')
 /**
  * @description The Transaction associated with this object.
  */
 transaction: (string | Schemas.treasurytransaction)
}

/**
 * @title TreasuryOutboundTransfersResourceStatusTransitions
 */
export type treasury_outbound_transfers_resource_status_transitions = {
 /**
  * @description Timestamp describing when an OutboundTransfer changed status to `canceled`
  */
 canceled_at?: number | null
 /**
  * @description Timestamp describing when an OutboundTransfer changed status to `failed`
  */
 failed_at?: number | null
 /**
  * @description Timestamp describing when an OutboundTransfer changed status to `posted`
  */
 posted_at?: number | null
 /**
  * @description Timestamp describing when an OutboundTransfer changed status to `returned`
  */
 returned_at?: number | null
}

/**
 * @title TreasuryOutboundTransfersResourceUSDomesticWireTrackingDetails
 */
export type treasury_outbound_transfers_resource_us_domestic_wire_tracking_details = {
 /**
  * @description CHIPS System Sequence Number (SSN) of the OutboundTransfer for transfers sent over the `us_domestic_wire` network.
  */
 chips?: string | null
 /**
  * @description IMAD of the OutboundTransfer for transfers sent over the `us_domestic_wire` network.
  */
 imad?: string | null
 /**
  * @description OMAD of the OutboundTransfer for transfers sent over the `us_domestic_wire` network.
  */
 omad?: string | null
}

/**
 * @title TreasuryReceivedCreditsResourceLinkedFlows
 */
export type treasury_received_credits_resource_linked_flows = {
 /**
  * @description The CreditReversal created as a result of this ReceivedCredit being reversed.
  */
 credit_reversal?: string | null
 /**
  * @description Set if the ReceivedCredit was created due to an [Issuing Authorization](https://stripe.com/docs/api#issuing_authorizations) object.
  */
 issuing_authorization?: string | null
 /**
  * @description Set if the ReceivedCredit is also viewable as an [Issuing transaction](https://stripe.com/docs/api#issuing_transactions) object.
  */
 issuing_transaction?: string | null
 /**
  * @description ID of the source flow. Set if `network` is `stripe` and the source flow is visible to the user. Examples of source flows include OutboundPayments, payouts, or CreditReversals.
  */
 source_flow?: string | null
 /**
  * @description The expandable object of the source flow.
  */
 source_flow_details?: Schemas.treasury_received_credits_resource_source_flows_details | null
 /**
  * @description The type of flow that originated the ReceivedCredit (for example, `outbound_payment`).
  */
 source_flow_type?: string | null
}

/**
 * @title TreasuryReceivedCreditsResourceReversalDetails
 */
export type treasury_received_credits_resource_reversal_details = {
 /**
  * @description Time before which a ReceivedCredit can be reversed.
  */
 deadline?: number | null
 /**
  * @description Set if a ReceivedCredit cannot be reversed.
  */
 restricted_reason?: ('already_reversed' | 'deadline_passed' | 'network_restricted' | 'other' | 'source_flow_restricted') | null
}

/**
 * @title TreasuryReceivedCreditsResourceSourceFlowsDetails
 */
export type treasury_received_credits_resource_source_flows_details = {
 /**
  * @title TreasuryReceivedCreditsResourceCreditReversal
  * @description You can reverse some [ReceivedCredits](https://stripe.com/docs/api#received_credits) depending on their network and source flow. Reversing a ReceivedCredit leads to the creation of a new object known as a CreditReversal.
  */
 credit_reversal?: Schemas.treasurycredit_reversal
 /**
  * @title TreasuryOutboundPaymentsResourceOutboundPayment
  * @description Use [OutboundPayments](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-payments) to send funds to another party's external bank account or [FinancialAccount](https://stripe.com/docs/api#financial_accounts). To send money to an account belonging to the same user, use an [OutboundTransfer](https://stripe.com/docs/api#outbound_transfers).
  * 
  * Simulate OutboundPayment state changes with the `/v1/test_helpers/treasury/outbound_payments` endpoints. These methods can only be called on test mode objects.
  * 
  * Related guide: [Moving money with Treasury using OutboundPayment objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-payments)
  */
 outbound_payment?: Schemas.treasuryoutbound_payment
 /**
  * @title TreasuryOutboundTransfersResourceOutboundTransfer
  * @description Use [OutboundTransfers](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-transfers) to transfer funds from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) to a PaymentMethod belonging to the same entity. To send funds to a different party, use [OutboundPayments](https://stripe.com/docs/api#outbound_payments) instead. You can send funds over ACH rails or through a domestic wire transfer to a user's own external bank account.
  * 
  * Simulate OutboundTransfer state changes with the `/v1/test_helpers/treasury/outbound_transfers` endpoints. These methods can only be called on test mode objects.
  * 
  * Related guide: [Moving money with Treasury using OutboundTransfer objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-transfers)
  */
 outbound_transfer?: Schemas.treasuryoutbound_transfer
 /**
  * @title Payout
  * @description A `Payout` object is created when you receive funds from Stripe, or when you
  * initiate a payout to either a bank account or debit card of a [connected
  * Stripe account](/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts,
  * and list all payouts. Payouts are made on [varying
  * schedules](/docs/connect/manage-payout-schedule), depending on your country and
  * industry.
  * 
  * Related guide: [Receiving payouts](https://stripe.com/docs/payouts)
  */
 payout?: Schemas.payout
 /**
  * @description The type of the source flow that originated the ReceivedCredit.
  */
 type: ('credit_reversal' | 'other' | 'outbound_payment' | 'outbound_transfer' | 'payout')
}

/**
 * @title TreasuryReceivedCreditsResourceStatusTransitions
 */
export type treasury_received_credits_resource_status_transitions = {
 /**
  * @description Timestamp describing when the CreditReversal changed status to `posted`
  */
 posted_at?: number | null
}

/**
 * @title TreasuryReceivedDebitsResourceDebitReversalLinkedFlows
 */
export type treasury_received_debits_resource_debit_reversal_linked_flows = {
 /**
  * @description Set if there is an Issuing dispute associated with the DebitReversal.
  */
 issuing_dispute?: string | null
}

/**
 * @title TreasuryReceivedDebitsResourceLinkedFlows
 */
export type treasury_received_debits_resource_linked_flows = {
 /**
  * @description The DebitReversal created as a result of this ReceivedDebit being reversed.
  */
 debit_reversal?: string | null
 /**
  * @description Set if the ReceivedDebit is associated with an InboundTransfer's return of funds.
  */
 inbound_transfer?: string | null
 /**
  * @description Set if the ReceivedDebit was created due to an [Issuing Authorization](https://stripe.com/docs/api#issuing_authorizations) object.
  */
 issuing_authorization?: string | null
 /**
  * @description Set if the ReceivedDebit is also viewable as an [Issuing Dispute](https://stripe.com/docs/api#issuing_disputes) object.
  */
 issuing_transaction?: string | null
 /**
  * @description Set if the ReceivedDebit was created due to a [Payout](https://stripe.com/docs/api#payouts) object.
  */
 payout?: string | null
}

/**
 * @title TreasuryReceivedDebitsResourceReversalDetails
 */
export type treasury_received_debits_resource_reversal_details = {
 /**
  * @description Time before which a ReceivedDebit can be reversed.
  */
 deadline?: number | null
 /**
  * @description Set if a ReceivedDebit can't be reversed.
  */
 restricted_reason?: ('already_reversed' | 'deadline_passed' | 'network_restricted' | 'other' | 'source_flow_restricted') | null
}

/**
 * @title TreasuryReceivedDebitsResourceStatusTransitions
 */
export type treasury_received_debits_resource_status_transitions = {
 /**
  * @description Timestamp describing when the DebitReversal changed status to `completed`.
  */
 completed_at?: number | null
}

/**
 * @title TreasurySharedResourceBillingDetails
 */
export type treasury_shared_resource_billing_details = {
 /**
  * @title Address
  */
 address: Schemas.address
 /**
  * @description Email address.
  */
 email?: string | null
 /**
  * @description Full name.
  */
 name?: string | null
}

/**
 * @title TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails
 */
export type treasury_shared_resource_initiating_payment_method_details_initiating_payment_method_details = {
 /**
  * @description Set when `type` is `balance`.
  */
 balance?: 'payments'
 /**
  * @title TreasurySharedResourceBillingDetails
  */
 billing_details: Schemas.treasury_shared_resource_billing_details
 /**
  * @title received_payment_method_details_financial_account
  */
 financial_account?: Schemas.received_payment_method_details_financial_account
 /**
  * @description Set when `type` is `issuing_card`. This is an [Issuing Card](https://stripe.com/docs/api#issuing_cards) ID.
  */
 issuing_card?: string
 /**
  * @description Polymorphic type matching the originating money movement's source. This can be an external account, a Stripe balance, or a FinancialAccount.
  */
 type: ('balance' | 'financial_account' | 'issuing_card' | 'stripe' | 'us_bank_account')
 /**
  * @title TreasurySharedResourceInitiatingPaymentMethodDetailsUSBankAccount
  */
 us_bank_account?: Schemas.treasury_shared_resource_initiating_payment_method_details_us_bank_account
}

/**
 * @title TreasurySharedResourceInitiatingPaymentMethodDetailsUSBankAccount
 */
export type treasury_shared_resource_initiating_payment_method_details_us_bank_account = {
 /**
  * @description Bank name.
  */
 bank_name?: string | null
 /**
  * @description The last four digits of the bank account number.
  */
 last4?: string | null
 /**
  * @description The routing number for the bank account.
  */
 routing_number?: string | null
}

/**
 * @title TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions
 */
export type treasury_transactions_resource_abstract_transaction_resource_status_transitions = {
 /**
  * @description Timestamp describing when the Transaction changed status to `posted`.
  */
 posted_at?: number | null
 /**
  * @description Timestamp describing when the Transaction changed status to `void`.
  */
 void_at?: number | null
}

/**
 * @title TreasuryTransactionsResourceBalanceImpact
 * @description Change to a FinancialAccount's balance
 */
export type treasury_transactions_resource_balance_impact = {
 /**
  * @description The change made to funds the user can spend right now.
  */
 cash: number
 /**
  * @description The change made to funds that are not spendable yet, but will become available at a later time.
  */
 inbound_pending: number
 /**
  * @description The change made to funds in the account, but not spendable because they are being held for pending outbound flows.
  */
 outbound_pending: number
}

/**
 * @title TreasuryTransactionsResourceFlowDetails
 */
export type treasury_transactions_resource_flow_details = {
 /**
  * @title TreasuryReceivedCreditsResourceCreditReversal
  * @description You can reverse some [ReceivedCredits](https://stripe.com/docs/api#received_credits) depending on their network and source flow. Reversing a ReceivedCredit leads to the creation of a new object known as a CreditReversal.
  */
 credit_reversal?: Schemas.treasurycredit_reversal
 /**
  * @title TreasuryReceivedDebitsResourceDebitReversal
  * @description You can reverse some [ReceivedDebits](https://stripe.com/docs/api#received_debits) depending on their network and source flow. Reversing a ReceivedDebit leads to the creation of a new object known as a DebitReversal.
  */
 debit_reversal?: Schemas.treasurydebit_reversal
 /**
  * @title TreasuryInboundTransfersResourceInboundTransfer
  * @description Use [InboundTransfers](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/into/inbound-transfers) to add funds to your [FinancialAccount](https://stripe.com/docs/api#financial_accounts) via a PaymentMethod that is owned by you. The funds will be transferred via an ACH debit.
  * 
  * Related guide: [Moving money with Treasury using InboundTransfer objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/into/inbound-transfers)
  */
 inbound_transfer?: Schemas.treasuryinbound_transfer
 /**
  * @title IssuingAuthorization
  * @description When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`
  * object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the
  * purchase to be completed successfully.
  * 
  * Related guide: [Issued card authorizations](https://stripe.com/docs/issuing/purchases/authorizations)
  */
 issuing_authorization?: Schemas.issuingauthorization
 /**
  * @title TreasuryOutboundPaymentsResourceOutboundPayment
  * @description Use [OutboundPayments](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-payments) to send funds to another party's external bank account or [FinancialAccount](https://stripe.com/docs/api#financial_accounts). To send money to an account belonging to the same user, use an [OutboundTransfer](https://stripe.com/docs/api#outbound_transfers).
  * 
  * Simulate OutboundPayment state changes with the `/v1/test_helpers/treasury/outbound_payments` endpoints. These methods can only be called on test mode objects.
  * 
  * Related guide: [Moving money with Treasury using OutboundPayment objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-payments)
  */
 outbound_payment?: Schemas.treasuryoutbound_payment
 /**
  * @title TreasuryOutboundTransfersResourceOutboundTransfer
  * @description Use [OutboundTransfers](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-transfers) to transfer funds from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) to a PaymentMethod belonging to the same entity. To send funds to a different party, use [OutboundPayments](https://stripe.com/docs/api#outbound_payments) instead. You can send funds over ACH rails or through a domestic wire transfer to a user's own external bank account.
  * 
  * Simulate OutboundTransfer state changes with the `/v1/test_helpers/treasury/outbound_transfers` endpoints. These methods can only be called on test mode objects.
  * 
  * Related guide: [Moving money with Treasury using OutboundTransfer objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-transfers)
  */
 outbound_transfer?: Schemas.treasuryoutbound_transfer
 /**
  * @title TreasuryReceivedCreditsResourceReceivedCredit
  * @description ReceivedCredits represent funds sent to a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) (for example, via ACH or wire). These money movements are not initiated from the FinancialAccount.
  */
 received_credit?: Schemas.treasuryreceived_credit
 /**
  * @title TreasuryReceivedDebitsResourceReceivedDebit
  * @description ReceivedDebits represent funds pulled from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts). These are not initiated from the FinancialAccount.
  */
 received_debit?: Schemas.treasuryreceived_debit
 /**
  * @description Type of the flow that created the Transaction. Set to the same value as `flow_type`.
  */
 type: ('credit_reversal' | 'debit_reversal' | 'inbound_transfer' | 'issuing_authorization' | 'other' | 'outbound_payment' | 'outbound_transfer' | 'received_credit' | 'received_debit')
}

/**
 * @title us_bank_account_networks
 */
export type us_bank_account_networks = {
 /**
  * @description The preferred network.
  */
 preferred?: string | null
 /**
  * @description All supported networks.
  */
 supported: ('ach' | 'us_domestic_wire')[]
}

/**
 * @title verification_session_redaction
 */
export type verification_session_redaction = {
 /**
  * @description Indicates whether this object and its related objects have been redacted or not.
  */
 status: ('processing' | 'redacted')
}

/**
 * @title NotificationWebhookEndpoint
 * @description You can configure [webhook endpoints](https://docs.stripe.com/webhooks/) via the API to be
 * notified about events that happen in your Stripe account or connected
 * accounts.
 * 
 * Most users configure webhooks from [the dashboard](https://dashboard.stripe.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.
 * 
 * Related guide: [Setting up webhooks](https://docs.stripe.com/webhooks/configure)
 */
export type webhook_endpoint = {
 /**
  * @description The API version events are rendered as for this webhook endpoint.
  */
 api_version?: string | null
 /**
  * @description The ID of the associated Connect application.
  */
 application?: string | null
 /**
  * @description Time at which the object was created. Measured in seconds since the Unix epoch.
  */
 created: number
 /**
  * @description An optional description of what the webhook is used for.
  */
 description?: string | null
 /**
  * @description The list of events to enable for this endpoint. `['*']` indicates that all events are enabled, except those that require explicit selection.
  */
 enabled_events: string[]
 /**
  * @description Unique identifier for the object.
  */
 id: string
 /**
  * @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  */
 livemode: boolean
 /**
  * @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  */
 metadata: Record<string, string>
 /**
  * @description String representing the object's type. Objects of the same type share the same value.
  */
 object: 'webhook_endpoint'
 /**
  * @description The endpoint's secret, used to generate [webhook signatures](https://docs.stripe.com/webhooks/signatures). Only returned at creation.
  */
 secret?: string
 /**
  * @description The status of the webhook. It can be `enabled` or `disabled`.
  */
 status: string
 /**
  * @description The URL of the webhook endpoint.
  */
 url: string
}

}